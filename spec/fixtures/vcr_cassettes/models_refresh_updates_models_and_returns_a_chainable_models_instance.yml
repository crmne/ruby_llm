---
http_interactions:
- request:
    method: get
    uri: https://api.openai.com/v1/models
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v2.13.0
      Authorization:
      - Bearer <OPENAI_API_KEY>
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 23 Apr 2025 11:31:53 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Openai-Version:
      - '2020-10-01'
      X-Request-Id:
      - "<X_REQUEST_ID>"
      Openai-Processing-Ms:
      - '430'
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - "<COOKIE>"
      - "<COOKIE>"
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - "<CF_RAY>"
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |-
        {
          "object": "list",
          "data": [
            {
              "id": "gpt-4o-audio-preview-2024-12-17",
              "object": "model",
              "created": 1734034239,
              "owned_by": "system"
            },
            {
              "id": "dall-e-3",
              "object": "model",
              "created": 1698785189,
              "owned_by": "system"
            },
            {
              "id": "dall-e-2",
              "object": "model",
              "created": 1698798177,
              "owned_by": "system"
            },
            {
              "id": "gpt-4o-audio-preview-2024-10-01",
              "object": "model",
              "created": 1727389042,
              "owned_by": "system"
            },
            {
              "id": "o4-mini",
              "object": "model",
              "created": 1744225351,
              "owned_by": "system"
            },
            {
              "id": "gpt-4.1-nano",
              "object": "model",
              "created": 1744321707,
              "owned_by": "system"
            },
            {
              "id": "gpt-4.1-nano-2025-04-14",
              "object": "model",
              "created": 1744321025,
              "owned_by": "system"
            },
            {
              "id": "gpt-4o-realtime-preview-2024-10-01",
              "object": "model",
              "created": 1727131766,
              "owned_by": "system"
            },
            {
              "id": "o4-mini-2025-04-16",
              "object": "model",
              "created": 1744133506,
              "owned_by": "system"
            },
            {
              "id": "gpt-4o-realtime-preview",
              "object": "model",
              "created": 1727659998,
              "owned_by": "system"
            },
            {
              "id": "babbage-002",
              "object": "model",
              "created": 1692634615,
              "owned_by": "system"
            },
            {
              "id": "gpt-4",
              "object": "model",
              "created": 1687882411,
              "owned_by": "openai"
            },
            {
              "id": "text-embedding-ada-002",
              "object": "model",
              "created": 1671217299,
              "owned_by": "openai-internal"
            },
            {
              "id": "text-embedding-3-large",
              "object": "model",
              "created": 1705953180,
              "owned_by": "system"
            },
            {
              "id": "gpt-4o-mini-audio-preview",
              "object": "model",
              "created": 1734387424,
              "owned_by": "system"
            },
            {
              "id": "gpt-4o-audio-preview",
              "object": "model",
              "created": 1727460443,
              "owned_by": "system"
            },
            {
              "id": "o1-preview-2024-09-12",
              "object": "model",
              "created": 1725648865,
              "owned_by": "system"
            },
            {
              "id": "gpt-4o-mini-realtime-preview",
              "object": "model",
              "created": 1734387380,
              "owned_by": "system"
            },
            {
              "id": "gpt-4.1-mini",
              "object": "model",
              "created": 1744318173,
              "owned_by": "system"
            },
            {
              "id": "gpt-4o-mini-realtime-preview-2024-12-17",
              "object": "model",
              "created": 1734112601,
              "owned_by": "system"
            },
            {
              "id": "gpt-3.5-turbo-instruct-0914",
              "object": "model",
              "created": 1694122472,
              "owned_by": "system"
            },
            {
              "id": "gpt-4o-mini-search-preview",
              "object": "model",
              "created": 1741391161,
              "owned_by": "system"
            },
            {
              "id": "gpt-4.1-mini-2025-04-14",
              "object": "model",
              "created": 1744317547,
              "owned_by": "system"
            },
            {
              "id": "chatgpt-4o-latest",
              "object": "model",
              "created": 1723515131,
              "owned_by": "system"
            },
            {
              "id": "davinci-002",
              "object": "model",
              "created": 1692634301,
              "owned_by": "system"
            },
            {
              "id": "gpt-3.5-turbo-1106",
              "object": "model",
              "created": 1698959748,
              "owned_by": "system"
            },
            {
              "id": "gpt-4o-search-preview",
              "object": "model",
              "created": 1741388720,
              "owned_by": "system"
            },
            {
              "id": "gpt-4-turbo",
              "object": "model",
              "created": 1712361441,
              "owned_by": "system"
            },
            {
              "id": "gpt-4o-realtime-preview-2024-12-17",
              "object": "model",
              "created": 1733945430,
              "owned_by": "system"
            },
            {
              "id": "gpt-3.5-turbo-instruct",
              "object": "model",
              "created": 1692901427,
              "owned_by": "system"
            },
            {
              "id": "gpt-3.5-turbo",
              "object": "model",
              "created": 1677610602,
              "owned_by": "openai"
            },
            {
              "id": "gpt-4-turbo-preview",
              "object": "model",
              "created": 1706037777,
              "owned_by": "system"
            },
            {
              "id": "gpt-4o-mini-search-preview-2025-03-11",
              "object": "model",
              "created": 1741390858,
              "owned_by": "system"
            },
            {
              "id": "gpt-4-0125-preview",
              "object": "model",
              "created": 1706037612,
              "owned_by": "system"
            },
            {
              "id": "gpt-4o-2024-11-20",
              "object": "model",
              "created": 1739331543,
              "owned_by": "system"
            },
            {
              "id": "whisper-1",
              "object": "model",
              "created": 1677532384,
              "owned_by": "openai-internal"
            },
            {
              "id": "gpt-4o-2024-05-13",
              "object": "model",
              "created": 1715368132,
              "owned_by": "system"
            },
            {
              "id": "gpt-4-turbo-2024-04-09",
              "object": "model",
              "created": 1712601677,
              "owned_by": "system"
            },
            {
              "id": "gpt-3.5-turbo-16k",
              "object": "model",
              "created": 1683758102,
              "owned_by": "openai-internal"
            },
            {
              "id": "o1-preview",
              "object": "model",
              "created": 1725648897,
              "owned_by": "system"
            },
            {
              "id": "gpt-4-0613",
              "object": "model",
              "created": 1686588896,
              "owned_by": "openai"
            },
            {
              "id": "gpt-4.5-preview",
              "object": "model",
              "created": 1740623059,
              "owned_by": "system"
            },
            {
              "id": "gpt-4.5-preview-2025-02-27",
              "object": "model",
              "created": 1740623304,
              "owned_by": "system"
            },
            {
              "id": "gpt-4o-search-preview-2025-03-11",
              "object": "model",
              "created": 1741388170,
              "owned_by": "system"
            },
            {
              "id": "omni-moderation-2024-09-26",
              "object": "model",
              "created": 1732734466,
              "owned_by": "system"
            },
            {
              "id": "text-embedding-3-small",
              "object": "model",
              "created": 1705948997,
              "owned_by": "system"
            },
            {
              "id": "tts-1-hd",
              "object": "model",
              "created": 1699046015,
              "owned_by": "system"
            },
            {
              "id": "gpt-4o",
              "object": "model",
              "created": 1715367049,
              "owned_by": "system"
            },
            {
              "id": "tts-1-hd-1106",
              "object": "model",
              "created": 1699053533,
              "owned_by": "system"
            },
            {
              "id": "gpt-4o-mini",
              "object": "model",
              "created": 1721172741,
              "owned_by": "system"
            },
            {
              "id": "gpt-4o-2024-08-06",
              "object": "model",
              "created": 1722814719,
              "owned_by": "system"
            },
            {
              "id": "gpt-4.1",
              "object": "model",
              "created": 1744316542,
              "owned_by": "system"
            },
            {
              "id": "gpt-4o-transcribe",
              "object": "model",
              "created": 1742068463,
              "owned_by": "system"
            },
            {
              "id": "gpt-4.1-2025-04-14",
              "object": "model",
              "created": 1744315746,
              "owned_by": "system"
            },
            {
              "id": "o1",
              "object": "model",
              "created": 1734375816,
              "owned_by": "system"
            },
            {
              "id": "gpt-4o-mini-2024-07-18",
              "object": "model",
              "created": 1721172717,
              "owned_by": "system"
            },
            {
              "id": "o1-pro-2025-03-19",
              "object": "model",
              "created": 1742251504,
              "owned_by": "system"
            },
            {
              "id": "gpt-4o-mini-transcribe",
              "object": "model",
              "created": 1742068596,
              "owned_by": "system"
            },
            {
              "id": "o1-pro",
              "object": "model",
              "created": 1742251791,
              "owned_by": "system"
            },
            {
              "id": "o1-mini",
              "object": "model",
              "created": 1725649008,
              "owned_by": "system"
            },
            {
              "id": "gpt-4o-mini-audio-preview-2024-12-17",
              "object": "model",
              "created": 1734115920,
              "owned_by": "system"
            },
            {
              "id": "gpt-3.5-turbo-0125",
              "object": "model",
              "created": 1706048358,
              "owned_by": "system"
            },
            {
              "id": "o1-mini-2024-09-12",
              "object": "model",
              "created": 1725648979,
              "owned_by": "system"
            },
            {
              "id": "o1-2024-12-17",
              "object": "model",
              "created": 1734326976,
              "owned_by": "system"
            },
            {
              "id": "o3-mini-2025-01-31",
              "object": "model",
              "created": 1738010200,
              "owned_by": "system"
            },
            {
              "id": "o3-mini",
              "object": "model",
              "created": 1737146383,
              "owned_by": "system"
            },
            {
              "id": "tts-1",
              "object": "model",
              "created": 1681940951,
              "owned_by": "openai-internal"
            },
            {
              "id": "gpt-4-1106-preview",
              "object": "model",
              "created": 1698957206,
              "owned_by": "system"
            },
            {
              "id": "gpt-4o-mini-tts",
              "object": "model",
              "created": 1742403959,
              "owned_by": "system"
            },
            {
              "id": "tts-1-1106",
              "object": "model",
              "created": 1699053241,
              "owned_by": "system"
            },
            {
              "id": "omni-moderation-latest",
              "object": "model",
              "created": 1731689265,
              "owned_by": "system"
            }
          ]
        }
  recorded_at: Wed, 23 Apr 2025 11:31:53 GMT
- request:
    method: get
    uri: https://api.anthropic.com/v1/models
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v2.13.0
      X-Api-Key:
      - "<ANTHROPIC_API_KEY>"
      Anthropic-Version:
      - '2023-06-01'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 23 Apr 2025 11:31:53 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Request-Id:
      - "<REQUEST_ID>"
      Anthropic-Organization-Id:
      - 0137b15c-16bf-490d-9f90-8cfd7e325ec0
      Via:
      - 1.1 google
      Cf-Cache-Status:
      - DYNAMIC
      X-Robots-Tag:
      - none
      Server:
      - cloudflare
      Cf-Ray:
      - "<CF_RAY>"
    body:
      encoding: ASCII-8BIT
      string: '{"data":[{"type":"model","id":"claude-3-7-sonnet-20250219","display_name":"Claude
        3.7 Sonnet","created_at":"2025-02-24T00:00:00Z"},{"type":"model","id":"claude-3-5-sonnet-20241022","display_name":"Claude
        3.5 Sonnet (New)","created_at":"2024-10-22T00:00:00Z"},{"type":"model","id":"claude-3-5-haiku-20241022","display_name":"Claude
        3.5 Haiku","created_at":"2024-10-22T00:00:00Z"},{"type":"model","id":"claude-3-5-sonnet-20240620","display_name":"Claude
        3.5 Sonnet (Old)","created_at":"2024-06-20T00:00:00Z"},{"type":"model","id":"claude-3-haiku-20240307","display_name":"Claude
        3 Haiku","created_at":"2024-03-07T00:00:00Z"},{"type":"model","id":"claude-3-opus-20240229","display_name":"Claude
        3 Opus","created_at":"2024-02-29T00:00:00Z"},{"type":"model","id":"claude-3-sonnet-20240229","display_name":"Claude
        3 Sonnet","created_at":"2024-02-29T00:00:00Z"},{"type":"model","id":"claude-2.1","display_name":"Claude
        2.1","created_at":"2023-11-21T00:00:00Z"},{"type":"model","id":"claude-2.0","display_name":"Claude
        2.0","created_at":"2023-07-11T00:00:00Z"}],"has_more":false,"first_id":"claude-3-7-sonnet-20250219","last_id":"claude-2.0"}'
  recorded_at: Wed, 23 Apr 2025 11:31:53 GMT
- request:
    method: get
    uri: https://generativelanguage.googleapis.com/v1beta/models
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v2.13.0
      X-Goog-Api-Key:
      - "<GEMINI_API_KEY>"
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 23 Apr 2025 11:31:54 GMT
      Server:
      - scaffolding on HTTPServer2
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Server-Timing:
      - gfet4t7; dur=81
      Alt-Svc:
      - h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "models": [
            {
              "name": "models/chat-bison-001",
              "version": "001",
              "displayName": "PaLM 2 Chat (Legacy)",
              "description": "A legacy text-only model optimized for chat conversations",
              "inputTokenLimit": 4096,
              "outputTokenLimit": 1024,
              "supportedGenerationMethods": [
                "generateMessage",
                "countMessageTokens"
              ],
              "temperature": 0.25,
              "topP": 0.95,
              "topK": 40
            },
            {
              "name": "models/text-bison-001",
              "version": "001",
              "displayName": "PaLM 2 (Legacy)",
              "description": "A legacy model that understands text and generates text as an output",
              "inputTokenLimit": 8196,
              "outputTokenLimit": 1024,
              "supportedGenerationMethods": [
                "generateText",
                "countTextTokens",
                "createTunedTextModel"
              ],
              "temperature": 0.7,
              "topP": 0.95,
              "topK": 40
            },
            {
              "name": "models/embedding-gecko-001",
              "version": "001",
              "displayName": "Embedding Gecko",
              "description": "Obtain a distributed representation of a text.",
              "inputTokenLimit": 1024,
              "outputTokenLimit": 1,
              "supportedGenerationMethods": [
                "embedText",
                "countTextTokens"
              ]
            },
            {
              "name": "models/gemini-1.0-pro-vision-latest",
              "version": "001",
              "displayName": "Gemini 1.0 Pro Vision",
              "description": "The original Gemini 1.0 Pro Vision model version which was optimized for image understanding. Gemini 1.0 Pro Vision was deprecated on July 12, 2024. Move to a newer Gemini version.",
              "inputTokenLimit": 12288,
              "outputTokenLimit": 4096,
              "supportedGenerationMethods": [
                "generateContent",
                "countTokens"
              ],
              "temperature": 0.4,
              "topP": 1,
              "topK": 32
            },
            {
              "name": "models/gemini-pro-vision",
              "version": "001",
              "displayName": "Gemini 1.0 Pro Vision",
              "description": "The original Gemini 1.0 Pro Vision model version which was optimized for image understanding. Gemini 1.0 Pro Vision was deprecated on July 12, 2024. Move to a newer Gemini version.",
              "inputTokenLimit": 12288,
              "outputTokenLimit": 4096,
              "supportedGenerationMethods": [
                "generateContent",
                "countTokens"
              ],
              "temperature": 0.4,
              "topP": 1,
              "topK": 32
            },
            {
              "name": "models/gemini-1.5-pro-latest",
              "version": "001",
              "displayName": "Gemini 1.5 Pro Latest",
              "description": "Alias that points to the most recent production (non-experimental) release of Gemini 1.5 Pro, our mid-size multimodal model that supports up to 2 million tokens.",
              "inputTokenLimit": 2000000,
              "outputTokenLimit": 8192,
              "supportedGenerationMethods": [
                "generateContent",
                "countTokens"
              ],
              "temperature": 1,
              "topP": 0.95,
              "topK": 40,
              "maxTemperature": 2
            },
            {
              "name": "models/gemini-1.5-pro-001",
              "version": "001",
              "displayName": "Gemini 1.5 Pro 001",
              "description": "Stable version of Gemini 1.5 Pro, our mid-size multimodal model that supports up to 2 million tokens, released in May of 2024.",
              "inputTokenLimit": 2000000,
              "outputTokenLimit": 8192,
              "supportedGenerationMethods": [
                "generateContent",
                "countTokens",
                "createCachedContent"
              ],
              "temperature": 1,
              "topP": 0.95,
              "topK": 64,
              "maxTemperature": 2
            },
            {
              "name": "models/gemini-1.5-pro-002",
              "version": "002",
              "displayName": "Gemini 1.5 Pro 002",
              "description": "Stable version of Gemini 1.5 Pro, our mid-size multimodal model that supports up to 2 million tokens, released in September of 2024.",
              "inputTokenLimit": 2000000,
              "outputTokenLimit": 8192,
              "supportedGenerationMethods": [
                "generateContent",
                "countTokens",
                "createCachedContent"
              ],
              "temperature": 1,
              "topP": 0.95,
              "topK": 40,
              "maxTemperature": 2
            },
            {
              "name": "models/gemini-1.5-pro",
              "version": "001",
              "displayName": "Gemini 1.5 Pro",
              "description": "Stable version of Gemini 1.5 Pro, our mid-size multimodal model that supports up to 2 million tokens, released in May of 2024.",
              "inputTokenLimit": 2000000,
              "outputTokenLimit": 8192,
              "supportedGenerationMethods": [
                "generateContent",
                "countTokens"
              ],
              "temperature": 1,
              "topP": 0.95,
              "topK": 40,
              "maxTemperature": 2
            },
            {
              "name": "models/gemini-1.5-flash-latest",
              "version": "001",
              "displayName": "Gemini 1.5 Flash Latest",
              "description": "Alias that points to the most recent production (non-experimental) release of Gemini 1.5 Flash, our fast and versatile multimodal model for scaling across diverse tasks.",
              "inputTokenLimit": 1000000,
              "outputTokenLimit": 8192,
              "supportedGenerationMethods": [
                "generateContent",
                "countTokens"
              ],
              "temperature": 1,
              "topP": 0.95,
              "topK": 40,
              "maxTemperature": 2
            },
            {
              "name": "models/gemini-1.5-flash-001",
              "version": "001",
              "displayName": "Gemini 1.5 Flash 001",
              "description": "Stable version of Gemini 1.5 Flash, our fast and versatile multimodal model for scaling across diverse tasks, released in May of 2024.",
              "inputTokenLimit": 1000000,
              "outputTokenLimit": 8192,
              "supportedGenerationMethods": [
                "generateContent",
                "countTokens",
                "createCachedContent"
              ],
              "temperature": 1,
              "topP": 0.95,
              "topK": 64,
              "maxTemperature": 2
            },
            {
              "name": "models/gemini-1.5-flash-001-tuning",
              "version": "001",
              "displayName": "Gemini 1.5 Flash 001 Tuning",
              "description": "Version of Gemini 1.5 Flash that supports tuning, our fast and versatile multimodal model for scaling across diverse tasks, released in May of 2024.",
              "inputTokenLimit": 16384,
              "outputTokenLimit": 8192,
              "supportedGenerationMethods": [
                "generateContent",
                "countTokens",
                "createTunedModel"
              ],
              "temperature": 1,
              "topP": 0.95,
              "topK": 64,
              "maxTemperature": 2
            },
            {
              "name": "models/gemini-1.5-flash",
              "version": "001",
              "displayName": "Gemini 1.5 Flash",
              "description": "Alias that points to the most recent stable version of Gemini 1.5 Flash, our fast and versatile multimodal model for scaling across diverse tasks.",
              "inputTokenLimit": 1000000,
              "outputTokenLimit": 8192,
              "supportedGenerationMethods": [
                "generateContent",
                "countTokens"
              ],
              "temperature": 1,
              "topP": 0.95,
              "topK": 40,
              "maxTemperature": 2
            },
            {
              "name": "models/gemini-1.5-flash-002",
              "version": "002",
              "displayName": "Gemini 1.5 Flash 002",
              "description": "Stable version of Gemini 1.5 Flash, our fast and versatile multimodal model for scaling across diverse tasks, released in September of 2024.",
              "inputTokenLimit": 1000000,
              "outputTokenLimit": 8192,
              "supportedGenerationMethods": [
                "generateContent",
                "countTokens",
                "createCachedContent"
              ],
              "temperature": 1,
              "topP": 0.95,
              "topK": 40,
              "maxTemperature": 2
            },
            {
              "name": "models/gemini-1.5-flash-8b",
              "version": "001",
              "displayName": "Gemini 1.5 Flash-8B",
              "description": "Stable version of Gemini 1.5 Flash-8B, our smallest and most cost effective Flash model, released in October of 2024.",
              "inputTokenLimit": 1000000,
              "outputTokenLimit": 8192,
              "supportedGenerationMethods": [
                "createCachedContent",
                "generateContent",
                "countTokens"
              ],
              "temperature": 1,
              "topP": 0.95,
              "topK": 40,
              "maxTemperature": 2
            },
            {
              "name": "models/gemini-1.5-flash-8b-001",
              "version": "001",
              "displayName": "Gemini 1.5 Flash-8B 001",
              "description": "Stable version of Gemini 1.5 Flash-8B, our smallest and most cost effective Flash model, released in October of 2024.",
              "inputTokenLimit": 1000000,
              "outputTokenLimit": 8192,
              "supportedGenerationMethods": [
                "createCachedContent",
                "generateContent",
                "countTokens"
              ],
              "temperature": 1,
              "topP": 0.95,
              "topK": 40,
              "maxTemperature": 2
            },
            {
              "name": "models/gemini-1.5-flash-8b-latest",
              "version": "001",
              "displayName": "Gemini 1.5 Flash-8B Latest",
              "description": "Alias that points to the most recent production (non-experimental) release of Gemini 1.5 Flash-8B, our smallest and most cost effective Flash model, released in October of 2024.",
              "inputTokenLimit": 1000000,
              "outputTokenLimit": 8192,
              "supportedGenerationMethods": [
                "createCachedContent",
                "generateContent",
                "countTokens"
              ],
              "temperature": 1,
              "topP": 0.95,
              "topK": 40,
              "maxTemperature": 2
            },
            {
              "name": "models/gemini-1.5-flash-8b-exp-0827",
              "version": "001",
              "displayName": "Gemini 1.5 Flash 8B Experimental 0827",
              "description": "Experimental release (August 27th, 2024) of Gemini 1.5 Flash-8B, our smallest and most cost effective Flash model. Replaced by Gemini-1.5-flash-8b-001 (stable).",
              "inputTokenLimit": 1000000,
              "outputTokenLimit": 8192,
              "supportedGenerationMethods": [
                "generateContent",
                "countTokens"
              ],
              "temperature": 1,
              "topP": 0.95,
              "topK": 40,
              "maxTemperature": 2
            },
            {
              "name": "models/gemini-1.5-flash-8b-exp-0924",
              "version": "001",
              "displayName": "Gemini 1.5 Flash 8B Experimental 0924",
              "description": "Experimental release (September 24th, 2024) of Gemini 1.5 Flash-8B, our smallest and most cost effective Flash model. Replaced by Gemini-1.5-flash-8b-001 (stable).",
              "inputTokenLimit": 1000000,
              "outputTokenLimit": 8192,
              "supportedGenerationMethods": [
                "generateContent",
                "countTokens"
              ],
              "temperature": 1,
              "topP": 0.95,
              "topK": 40,
              "maxTemperature": 2
            },
            {
              "name": "models/gemini-2.5-pro-exp-03-25",
              "version": "2.5-exp-03-25",
              "displayName": "Gemini 2.5 Pro Experimental 03-25",
              "description": "Experimental release (March 25th, 2025) of Gemini 2.5 Pro",
              "inputTokenLimit": 1048576,
              "outputTokenLimit": 65536,
              "supportedGenerationMethods": [
                "generateContent",
                "countTokens",
                "createCachedContent"
              ],
              "temperature": 1,
              "topP": 0.95,
              "topK": 64,
              "maxTemperature": 2
            },
            {
              "name": "models/gemini-2.5-pro-preview-03-25",
              "version": "2.5-preview-03-25",
              "displayName": "Gemini 2.5 Pro Preview 03-25",
              "description": "Gemini 2.5 Pro Preview 03-25",
              "inputTokenLimit": 1048576,
              "outputTokenLimit": 65536,
              "supportedGenerationMethods": [
                "generateContent",
                "countTokens",
                "createCachedContent"
              ],
              "temperature": 1,
              "topP": 0.95,
              "topK": 64,
              "maxTemperature": 2
            },
            {
              "name": "models/gemini-2.5-flash-preview-04-17",
              "version": "2.5-preview-04-17",
              "displayName": "Gemini 2.5 Flash Preview 04-17",
              "description": "Preview release (April 17th, 2025) of Gemini 2.5 Flash",
              "inputTokenLimit": 1048576,
              "outputTokenLimit": 65536,
              "supportedGenerationMethods": [
                "generateContent",
                "countTokens",
                "createCachedContent"
              ],
              "temperature": 1,
              "topP": 0.95,
              "topK": 64,
              "maxTemperature": 2
            },
            {
              "name": "models/gemini-2.0-flash-exp",
              "version": "2.0",
              "displayName": "Gemini 2.0 Flash Experimental",
              "description": "Gemini 2.0 Flash Experimental",
              "inputTokenLimit": 1048576,
              "outputTokenLimit": 8192,
              "supportedGenerationMethods": [
                "generateContent",
                "countTokens",
                "bidiGenerateContent"
              ],
              "temperature": 1,
              "topP": 0.95,
              "topK": 40,
              "maxTemperature": 2
            },
            {
              "name": "models/gemini-2.0-flash",
              "version": "2.0",
              "displayName": "Gemini 2.0 Flash",
              "description": "Gemini 2.0 Flash",
              "inputTokenLimit": 1048576,
              "outputTokenLimit": 8192,
              "supportedGenerationMethods": [
                "generateContent",
                "countTokens",
                "createCachedContent"
              ],
              "temperature": 1,
              "topP": 0.95,
              "topK": 40,
              "maxTemperature": 2
            },
            {
              "name": "models/gemini-2.0-flash-001",
              "version": "2.0",
              "displayName": "Gemini 2.0 Flash 001",
              "description": "Stable version of Gemini 2.0 Flash, our fast and versatile multimodal model for scaling across diverse tasks, released in January of 2025.",
              "inputTokenLimit": 1048576,
              "outputTokenLimit": 8192,
              "supportedGenerationMethods": [
                "generateContent",
                "countTokens",
                "createCachedContent"
              ],
              "temperature": 1,
              "topP": 0.95,
              "topK": 40,
              "maxTemperature": 2
            },
            {
              "name": "models/gemini-2.0-flash-lite-001",
              "version": "2.0",
              "displayName": "Gemini 2.0 Flash-Lite 001",
              "description": "Stable version of Gemini 2.0 Flash Lite",
              "inputTokenLimit": 1048576,
              "outputTokenLimit": 8192,
              "supportedGenerationMethods": [
                "generateContent",
                "countTokens",
                "createCachedContent"
              ],
              "temperature": 1,
              "topP": 0.95,
              "topK": 40,
              "maxTemperature": 2
            },
            {
              "name": "models/gemini-2.0-flash-lite",
              "version": "2.0",
              "displayName": "Gemini 2.0 Flash-Lite",
              "description": "Gemini 2.0 Flash-Lite",
              "inputTokenLimit": 1048576,
              "outputTokenLimit": 8192,
              "supportedGenerationMethods": [
                "generateContent",
                "countTokens",
                "createCachedContent"
              ],
              "temperature": 1,
              "topP": 0.95,
              "topK": 40,
              "maxTemperature": 2
            },
            {
              "name": "models/gemini-2.0-flash-lite-preview-02-05",
              "version": "preview-02-05",
              "displayName": "Gemini 2.0 Flash-Lite Preview 02-05",
              "description": "Preview release (February 5th, 2025) of Gemini 2.0 Flash Lite",
              "inputTokenLimit": 1048576,
              "outputTokenLimit": 8192,
              "supportedGenerationMethods": [
                "generateContent",
                "countTokens",
                "createCachedContent"
              ],
              "temperature": 1,
              "topP": 0.95,
              "topK": 40,
              "maxTemperature": 2
            },
            {
              "name": "models/gemini-2.0-flash-lite-preview",
              "version": "preview-02-05",
              "displayName": "Gemini 2.0 Flash-Lite Preview",
              "description": "Preview release (February 5th, 2025) of Gemini 2.0 Flash Lite",
              "inputTokenLimit": 1048576,
              "outputTokenLimit": 8192,
              "supportedGenerationMethods": [
                "generateContent",
                "countTokens",
                "createCachedContent"
              ],
              "temperature": 1,
              "topP": 0.95,
              "topK": 40,
              "maxTemperature": 2
            },
            {
              "name": "models/gemini-2.0-pro-exp",
              "version": "2.5-exp-03-25",
              "displayName": "Gemini 2.0 Pro Experimental",
              "description": "Experimental release (March 25th, 2025) of Gemini 2.5 Pro",
              "inputTokenLimit": 1048576,
              "outputTokenLimit": 65536,
              "supportedGenerationMethods": [
                "generateContent",
                "countTokens",
                "createCachedContent"
              ],
              "temperature": 1,
              "topP": 0.95,
              "topK": 64,
              "maxTemperature": 2
            },
            {
              "name": "models/gemini-2.0-pro-exp-02-05",
              "version": "2.5-exp-03-25",
              "displayName": "Gemini 2.0 Pro Experimental 02-05",
              "description": "Experimental release (March 25th, 2025) of Gemini 2.5 Pro",
              "inputTokenLimit": 1048576,
              "outputTokenLimit": 65536,
              "supportedGenerationMethods": [
                "generateContent",
                "countTokens",
                "createCachedContent"
              ],
              "temperature": 1,
              "topP": 0.95,
              "topK": 64,
              "maxTemperature": 2
            },
            {
              "name": "models/gemini-exp-1206",
              "version": "2.5-exp-03-25",
              "displayName": "Gemini Experimental 1206",
              "description": "Experimental release (March 25th, 2025) of Gemini 2.5 Pro",
              "inputTokenLimit": 1048576,
              "outputTokenLimit": 65536,
              "supportedGenerationMethods": [
                "generateContent",
                "countTokens",
                "createCachedContent"
              ],
              "temperature": 1,
              "topP": 0.95,
              "topK": 64,
              "maxTemperature": 2
            },
            {
              "name": "models/gemini-2.0-flash-thinking-exp-01-21",
              "version": "2.5-preview-04-17",
              "displayName": "Gemini 2.5 Flash Preview 04-17",
              "description": "Preview release (April 17th, 2025) of Gemini 2.5 Flash",
              "inputTokenLimit": 1048576,
              "outputTokenLimit": 65536,
              "supportedGenerationMethods": [
                "generateContent",
                "countTokens",
                "createCachedContent"
              ],
              "temperature": 1,
              "topP": 0.95,
              "topK": 64,
              "maxTemperature": 2
            },
            {
              "name": "models/gemini-2.0-flash-thinking-exp",
              "version": "2.5-preview-04-17",
              "displayName": "Gemini 2.5 Flash Preview 04-17",
              "description": "Preview release (April 17th, 2025) of Gemini 2.5 Flash",
              "inputTokenLimit": 1048576,
              "outputTokenLimit": 65536,
              "supportedGenerationMethods": [
                "generateContent",
                "countTokens",
                "createCachedContent"
              ],
              "temperature": 1,
              "topP": 0.95,
              "topK": 64,
              "maxTemperature": 2
            },
            {
              "name": "models/gemini-2.0-flash-thinking-exp-1219",
              "version": "2.5-preview-04-17",
              "displayName": "Gemini 2.5 Flash Preview 04-17",
              "description": "Preview release (April 17th, 2025) of Gemini 2.5 Flash",
              "inputTokenLimit": 1048576,
              "outputTokenLimit": 65536,
              "supportedGenerationMethods": [
                "generateContent",
                "countTokens",
                "createCachedContent"
              ],
              "temperature": 1,
              "topP": 0.95,
              "topK": 64,
              "maxTemperature": 2
            },
            {
              "name": "models/learnlm-1.5-pro-experimental",
              "version": "001",
              "displayName": "LearnLM 1.5 Pro Experimental",
              "description": "Alias that points to the most recent stable version of Gemini 1.5 Pro, our mid-size multimodal model that supports up to 2 million tokens.",
              "inputTokenLimit": 32767,
              "outputTokenLimit": 8192,
              "supportedGenerationMethods": [
                "generateContent",
                "countTokens"
              ],
              "temperature": 1,
              "topP": 0.95,
              "topK": 64,
              "maxTemperature": 2
            },
            {
              "name": "models/learnlm-2.0-flash-experimental",
              "version": "2.0",
              "displayName": "LearnLM 2.0 Flash Experimental",
              "description": "LearnLM 2.0 Flash Experimental",
              "inputTokenLimit": 1048576,
              "outputTokenLimit": 32768,
              "supportedGenerationMethods": [
                "generateContent",
                "countTokens"
              ],
              "temperature": 1,
              "topP": 0.95,
              "topK": 64,
              "maxTemperature": 2
            },
            {
              "name": "models/gemma-3-1b-it",
              "version": "001",
              "displayName": "Gemma 3 1B",
              "inputTokenLimit": 32768,
              "outputTokenLimit": 8192,
              "supportedGenerationMethods": [
                "generateContent",
                "countTokens"
              ],
              "temperature": 1,
              "topP": 0.95,
              "topK": 64
            },
            {
              "name": "models/gemma-3-4b-it",
              "version": "001",
              "displayName": "Gemma 3 4B",
              "inputTokenLimit": 32768,
              "outputTokenLimit": 8192,
              "supportedGenerationMethods": [
                "generateContent",
                "countTokens"
              ],
              "temperature": 1,
              "topP": 0.95,
              "topK": 64
            },
            {
              "name": "models/gemma-3-12b-it",
              "version": "001",
              "displayName": "Gemma 3 12B",
              "inputTokenLimit": 32768,
              "outputTokenLimit": 8192,
              "supportedGenerationMethods": [
                "generateContent",
                "countTokens"
              ],
              "temperature": 1,
              "topP": 0.95,
              "topK": 64
            },
            {
              "name": "models/gemma-3-27b-it",
              "version": "001",
              "displayName": "Gemma 3 27B",
              "inputTokenLimit": 131072,
              "outputTokenLimit": 8192,
              "supportedGenerationMethods": [
                "generateContent",
                "countTokens"
              ],
              "temperature": 1,
              "topP": 0.95,
              "topK": 64
            },
            {
              "name": "models/embedding-001",
              "version": "001",
              "displayName": "Embedding 001",
              "description": "Obtain a distributed representation of a text.",
              "inputTokenLimit": 2048,
              "outputTokenLimit": 1,
              "supportedGenerationMethods": [
                "embedContent"
              ]
            },
            {
              "name": "models/text-embedding-004",
              "version": "004",
              "displayName": "Text Embedding 004",
              "description": "Obtain a distributed representation of a text.",
              "inputTokenLimit": 2048,
              "outputTokenLimit": 1,
              "supportedGenerationMethods": [
                "embedContent"
              ]
            },
            {
              "name": "models/gemini-embedding-exp-03-07",
              "version": "exp-03-07",
              "displayName": "Gemini Embedding Experimental 03-07",
              "description": "Obtain a distributed representation of a text.",
              "inputTokenLimit": 8192,
              "outputTokenLimit": 1,
              "supportedGenerationMethods": [
                "embedContent",
                "countTextTokens"
              ]
            },
            {
              "name": "models/gemini-embedding-exp",
              "version": "exp-03-07",
              "displayName": "Gemini Embedding Experimental",
              "description": "Obtain a distributed representation of a text.",
              "inputTokenLimit": 8192,
              "outputTokenLimit": 1,
              "supportedGenerationMethods": [
                "embedContent",
                "countTextTokens"
              ]
            },
            {
              "name": "models/aqa",
              "version": "001",
              "displayName": "Model that performs Attributed Question Answering.",
              "description": "Model trained to return answers to questions that are grounded in provided sources, along with estimating answerable probability.",
              "inputTokenLimit": 7168,
              "outputTokenLimit": 1024,
              "supportedGenerationMethods": [
                "generateAnswer"
              ],
              "temperature": 0.2,
              "topP": 1,
              "topK": 40
            },
            {
              "name": "models/imagen-3.0-generate-002",
              "version": "002",
              "displayName": "Imagen 3.0 002 model",
              "description": "Vertex served Imagen 3.0 002 model",
              "inputTokenLimit": 480,
              "outputTokenLimit": 8192,
              "supportedGenerationMethods": [
                "predict"
              ]
            },
            {
              "name": "models/veo-2.0-generate-001",
              "version": "2.0",
              "displayName": "Veo 2",
              "description": "Vertex served Veo 2 model.",
              "inputTokenLimit": 480,
              "outputTokenLimit": 8192,
              "supportedGenerationMethods": [
                "predictLongRunning"
              ]
            },
            {
              "name": "models/gemini-2.0-flash-live-001",
              "version": "001",
              "displayName": "Gemini 2.0 Flash 001",
              "description": "Gemini 2.0 Flash 001",
              "inputTokenLimit": 131072,
              "outputTokenLimit": 8192,
              "supportedGenerationMethods": [
                "bidiGenerateContent",
                "countTokens"
              ],
              "temperature": 1,
              "topP": 0.95,
              "topK": 64,
              "maxTemperature": 2
            }
          ]
        }
  recorded_at: Wed, 23 Apr 2025 11:31:54 GMT
- request:
    method: get
    uri: https://api.deepseek.com/models
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v2.13.0
      Authorization:
      - Bearer <DEEPSEEK_API_KEY>
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 23 Apr 2025 11:31:54 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Vary:
      - origin, access-control-request-method, access-control-request-headers
      Access-Control-Allow-Credentials:
      - 'true'
      X-Ds-Trace-Id:
      - 1e1beee2a448731ecbdef434f14359c3
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - "<COOKIE>"
      Server:
      - cloudflare
      Cf-Ray:
      - "<CF_RAY>"
    body:
      encoding: ASCII-8BIT
      string: '{"object":"list","data":[{"id":"deepseek-chat","object":"model","owned_by":"deepseek"},{"id":"deepseek-reasoner","object":"model","owned_by":"deepseek"}]}'
  recorded_at: Wed, 23 Apr 2025 11:31:54 GMT
- request:
    method: get
    uri: https://bedrock.<AWS_REGION>.amazonaws.com/foundation-models
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v2.13.0
      Host:
      - bedrock.<AWS_REGION>.amazonaws.com
      X-Amz-Date:
      - 20250423T113154Z
      X-Amz-Content-Sha256:
      - e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
      Authorization:
      - AWS4-HMAC-SHA256 Credential=<AWS_ACCESS_KEY_ID>/20250423/<AWS_REGION>/bedrock/aws4_request,
        SignedHeaders=host;x-amz-content-sha256;x-amz-date, Signature=d122e7b1da43c5a38984508086fe2058b43dc903418fb9e4bee38e3be6ebd48c
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 23 Apr 2025 11:31:55 GMT
      Content-Type:
      - application/json
      Content-Length:
      - '45777'
      Connection:
      - keep-alive
      X-Amzn-Requestid:
      - 892e8888-57b6-4a46-90fb-f3fedcfc2a79
    body:
      encoding: UTF-8
      string: '{"modelSummaries":[{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":true,"inferenceTypesSupported":["ON_DEMAND"],"inputModalities":["TEXT"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/amazon.titan-tg1-large","modelId":"amazon.titan-tg1-large","modelLifecycle":{"status":"ACTIVE"},"modelName":"Titan
        Text Large","outputModalities":["TEXT"],"providerName":"Amazon","responseStreamingSupported":true},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":false,"inferenceTypesSupported":["ON_DEMAND"],"inputModalities":["TEXT"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/amazon.titan-embed-g1-text-02","modelId":"amazon.titan-embed-g1-text-02","modelLifecycle":{"status":"ACTIVE"},"modelName":"Titan
        Text Embeddings v2","outputModalities":["EMBEDDING"],"providerName":"Amazon","responseStreamingSupported":null},{"customizationsSupported":["FINE_TUNING","CONTINUED_PRE_TRAINING"],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":true,"inferenceTypesSupported":["PROVISIONED"],"inputModalities":["TEXT"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/amazon.titan-text-lite-v1:0:4k","modelId":"amazon.titan-text-lite-v1:0:4k","modelLifecycle":{"status":"ACTIVE"},"modelName":"Titan
        Text G1 - Lite","outputModalities":["TEXT"],"providerName":"Amazon","responseStreamingSupported":true},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":true,"inferenceTypesSupported":["ON_DEMAND"],"inputModalities":["TEXT"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/amazon.titan-text-lite-v1","modelId":"amazon.titan-text-lite-v1","modelLifecycle":{"status":"ACTIVE"},"modelName":"Titan
        Text G1 - Lite","outputModalities":["TEXT"],"providerName":"Amazon","responseStreamingSupported":true},{"customizationsSupported":["FINE_TUNING","CONTINUED_PRE_TRAINING"],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":true,"inferenceTypesSupported":["PROVISIONED"],"inputModalities":["TEXT"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/amazon.titan-text-express-v1:0:8k","modelId":"amazon.titan-text-express-v1:0:8k","modelLifecycle":{"status":"ACTIVE"},"modelName":"Titan
        Text G1 - Express","outputModalities":["TEXT"],"providerName":"Amazon","responseStreamingSupported":true},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":true,"inferenceTypesSupported":["ON_DEMAND"],"inputModalities":["TEXT"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/amazon.titan-text-express-v1","modelId":"amazon.titan-text-express-v1","modelLifecycle":{"status":"ACTIVE"},"modelName":"Titan
        Text G1 - Express","outputModalities":["TEXT"],"providerName":"Amazon","responseStreamingSupported":true},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":true},"guardrailsSupported":true,"inferenceTypesSupported":["INFERENCE_PROFILE"],"inputModalities":["TEXT","IMAGE","VIDEO"],"intelligentPromptRouting":{"isSupported":true},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/amazon.nova-pro-v1:0","modelId":"amazon.nova-pro-v1:0","modelLifecycle":{"status":"ACTIVE"},"modelName":"Nova
        Pro","outputModalities":["TEXT"],"providerName":"Amazon","responseStreamingSupported":true},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":true},"guardrailsSupported":true,"inferenceTypesSupported":["INFERENCE_PROFILE"],"inputModalities":["TEXT","IMAGE","VIDEO"],"intelligentPromptRouting":{"isSupported":true},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/amazon.nova-lite-v1:0","modelId":"amazon.nova-lite-v1:0","modelLifecycle":{"status":"ACTIVE"},"modelName":"Nova
        Lite","outputModalities":["TEXT"],"providerName":"Amazon","responseStreamingSupported":true},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":true},"guardrailsSupported":true,"inferenceTypesSupported":["INFERENCE_PROFILE"],"inputModalities":["TEXT"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/amazon.nova-micro-v1:0","modelId":"amazon.nova-micro-v1:0","modelLifecycle":{"status":"ACTIVE"},"modelName":"Nova
        Micro","outputModalities":["TEXT"],"providerName":"Amazon","responseStreamingSupported":true},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":false,"inferenceTypesSupported":["PROVISIONED"],"inputModalities":["TEXT"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/amazon.titan-embed-text-v1:2:8k","modelId":"amazon.titan-embed-text-v1:2:8k","modelLifecycle":{"status":"ACTIVE"},"modelName":"Titan
        Embeddings G1 - Text","outputModalities":["EMBEDDING"],"providerName":"Amazon","responseStreamingSupported":false},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":false,"inferenceTypesSupported":["ON_DEMAND"],"inputModalities":["TEXT"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/amazon.titan-embed-text-v1","modelId":"amazon.titan-embed-text-v1","modelLifecycle":{"status":"ACTIVE"},"modelName":"Titan
        Embeddings G1 - Text","outputModalities":["EMBEDDING"],"providerName":"Amazon","responseStreamingSupported":false},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":false,"inferenceTypesSupported":["ON_DEMAND"],"inputModalities":["TEXT"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/amazon.titan-embed-text-v2:0","modelId":"amazon.titan-embed-text-v2:0","modelLifecycle":{"status":"ACTIVE"},"modelName":"Titan
        Text Embeddings V2","outputModalities":["EMBEDDING"],"providerName":"Amazon","responseStreamingSupported":false},{"customizationsSupported":["FINE_TUNING"],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":false,"inferenceTypesSupported":["PROVISIONED"],"inputModalities":["TEXT","IMAGE"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/amazon.titan-embed-image-v1:0","modelId":"amazon.titan-embed-image-v1:0","modelLifecycle":{"status":"ACTIVE"},"modelName":"Titan
        Multimodal Embeddings G1","outputModalities":["EMBEDDING"],"providerName":"Amazon","responseStreamingSupported":null},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":false,"inferenceTypesSupported":["ON_DEMAND"],"inputModalities":["TEXT","IMAGE"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/amazon.titan-embed-image-v1","modelId":"amazon.titan-embed-image-v1","modelLifecycle":{"status":"ACTIVE"},"modelName":"Titan
        Multimodal Embeddings G1","outputModalities":["EMBEDDING"],"providerName":"Amazon","responseStreamingSupported":null},{"customizationsSupported":["FINE_TUNING"],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":true,"inferenceTypesSupported":["PROVISIONED"],"inputModalities":["TEXT","IMAGE"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/amazon.titan-image-generator-v1:0","modelId":"amazon.titan-image-generator-v1:0","modelLifecycle":{"status":"ACTIVE"},"modelName":"Titan
        Image Generator G1","outputModalities":["IMAGE"],"providerName":"Amazon","responseStreamingSupported":null},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":true,"inferenceTypesSupported":["ON_DEMAND"],"inputModalities":["TEXT","IMAGE"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/amazon.titan-image-generator-v1","modelId":"amazon.titan-image-generator-v1","modelLifecycle":{"status":"ACTIVE"},"modelName":"Titan
        Image Generator G1","outputModalities":["IMAGE"],"providerName":"Amazon","responseStreamingSupported":null},{"customizationsSupported":["FINE_TUNING"],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":true,"inferenceTypesSupported":["PROVISIONED","ON_DEMAND"],"inputModalities":["TEXT","IMAGE"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/amazon.titan-image-generator-v2:0","modelId":"amazon.titan-image-generator-v2:0","modelLifecycle":{"status":"ACTIVE"},"modelName":"Titan
        Image Generator G1 v2","outputModalities":["IMAGE"],"providerName":"Amazon","responseStreamingSupported":null},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":false,"inferenceTypesSupported":["ON_DEMAND"],"inputModalities":["TEXT"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/amazon.rerank-v1:0","modelId":"amazon.rerank-v1:0","modelLifecycle":{"status":"ACTIVE"},"modelName":"Rerank
        1.0","outputModalities":["TEXT"],"providerName":"Amazon","responseStreamingSupported":false},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":true,"inferenceTypesSupported":["PROVISIONED"],"inputModalities":["TEXT","IMAGE"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/stability.stable-diffusion-xl-v1:0","modelId":"stability.stable-diffusion-xl-v1:0","modelLifecycle":{"status":"LEGACY"},"modelName":"SDXL
        1.0","outputModalities":["IMAGE"],"providerName":"Stability AI","responseStreamingSupported":null},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":true,"inferenceTypesSupported":["ON_DEMAND"],"inputModalities":["TEXT","IMAGE"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/stability.stable-diffusion-xl-v1","modelId":"stability.stable-diffusion-xl-v1","modelLifecycle":{"status":"LEGACY"},"modelName":"SDXL
        1.0","outputModalities":["IMAGE"],"providerName":"Stability AI","responseStreamingSupported":null},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":true,"inferenceTypesSupported":["ON_DEMAND"],"inputModalities":["TEXT","IMAGE"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/stability.sd3-large-v1:0","modelId":"stability.sd3-large-v1:0","modelLifecycle":{"status":"LEGACY"},"modelName":"SD3
        Large 1.0","outputModalities":["IMAGE"],"providerName":"Stability AI","responseStreamingSupported":null},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":true,"inferenceTypesSupported":["ON_DEMAND"],"inputModalities":["TEXT","IMAGE"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/stability.sd3-5-large-v1:0","modelId":"stability.sd3-5-large-v1:0","modelLifecycle":{"status":"ACTIVE"},"modelName":"Stable
        Diffusion 3.5 Large","outputModalities":["IMAGE"],"providerName":"Stability
        AI","responseStreamingSupported":null},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":true,"inferenceTypesSupported":["ON_DEMAND"],"inputModalities":["TEXT"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/stability.stable-image-core-v1:0","modelId":"stability.stable-image-core-v1:0","modelLifecycle":{"status":"LEGACY"},"modelName":"Stable
        Image Core 1.0","outputModalities":["IMAGE"],"providerName":"Stability AI","responseStreamingSupported":null},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":true,"inferenceTypesSupported":["ON_DEMAND"],"inputModalities":["TEXT"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/stability.stable-image-core-v1:1","modelId":"stability.stable-image-core-v1:1","modelLifecycle":{"status":"ACTIVE"},"modelName":"Stable
        Image Core 1.0","outputModalities":["IMAGE"],"providerName":"Stability AI","responseStreamingSupported":null},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":true,"inferenceTypesSupported":["ON_DEMAND"],"inputModalities":["TEXT"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/stability.stable-image-ultra-v1:0","modelId":"stability.stable-image-ultra-v1:0","modelLifecycle":{"status":"LEGACY"},"modelName":"Stable
        Image Ultra 1.0","outputModalities":["IMAGE"],"providerName":"Stability AI","responseStreamingSupported":null},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":true,"inferenceTypesSupported":["ON_DEMAND"],"inputModalities":["TEXT"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/stability.stable-image-ultra-v1:1","modelId":"stability.stable-image-ultra-v1:1","modelLifecycle":{"status":"ACTIVE"},"modelName":"Stable
        Image Ultra 1.0","outputModalities":["IMAGE"],"providerName":"Stability AI","responseStreamingSupported":null},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":true,"inferenceTypesSupported":["PROVISIONED"],"inputModalities":["TEXT","IMAGE"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/anthropic.claude-3-5-sonnet-20241022-v2:0:18k","modelId":"anthropic.claude-3-5-sonnet-20241022-v2:0:18k","modelLifecycle":{"status":"ACTIVE"},"modelName":"Claude
        3.5 Sonnet v2","outputModalities":["TEXT"],"providerName":"Anthropic","responseStreamingSupported":true},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":true,"inferenceTypesSupported":["PROVISIONED"],"inputModalities":["TEXT","IMAGE"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/anthropic.claude-3-5-sonnet-20241022-v2:0:51k","modelId":"anthropic.claude-3-5-sonnet-20241022-v2:0:51k","modelLifecycle":{"status":"ACTIVE"},"modelName":"Claude
        3.5 Sonnet v2","outputModalities":["TEXT"],"providerName":"Anthropic","responseStreamingSupported":true},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":true,"inferenceTypesSupported":["PROVISIONED"],"inputModalities":["TEXT","IMAGE"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/anthropic.claude-3-5-sonnet-20241022-v2:0:200k","modelId":"anthropic.claude-3-5-sonnet-20241022-v2:0:200k","modelLifecycle":{"status":"ACTIVE"},"modelName":"Claude
        3.5 Sonnet v2","outputModalities":["TEXT"],"providerName":"Anthropic","responseStreamingSupported":true},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":true,"inferenceTypesSupported":["ON_DEMAND"],"inputModalities":["TEXT","IMAGE"],"intelligentPromptRouting":{"isSupported":true},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/anthropic.claude-3-5-sonnet-20241022-v2:0","modelId":"anthropic.claude-3-5-sonnet-20241022-v2:0","modelLifecycle":{"status":"ACTIVE"},"modelName":"Claude
        3.5 Sonnet v2","outputModalities":["TEXT"],"providerName":"Anthropic","responseStreamingSupported":true},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":true},"guardrailsSupported":true,"inferenceTypesSupported":["INFERENCE_PROFILE"],"inputModalities":["TEXT","IMAGE"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/anthropic.claude-3-7-sonnet-20250219-v1:0","modelId":"anthropic.claude-3-7-sonnet-20250219-v1:0","modelLifecycle":{"status":"ACTIVE"},"modelName":"Claude
        3.7 Sonnet","outputModalities":["TEXT"],"providerName":"Anthropic","responseStreamingSupported":true},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":true},"guardrailsSupported":true,"inferenceTypesSupported":["ON_DEMAND"],"inputModalities":["TEXT"],"intelligentPromptRouting":{"isSupported":true},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/anthropic.claude-3-5-haiku-20241022-v1:0","modelId":"anthropic.claude-3-5-haiku-20241022-v1:0","modelLifecycle":{"status":"ACTIVE"},"modelName":"Claude
        3.5 Haiku","outputModalities":["TEXT"],"providerName":"Anthropic","responseStreamingSupported":true},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":true,"inferenceTypesSupported":["PROVISIONED"],"inputModalities":["TEXT"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/anthropic.claude-instant-v1:2:100k","modelId":"anthropic.claude-instant-v1:2:100k","modelLifecycle":{"status":"LEGACY"},"modelName":"Claude
        Instant","outputModalities":["TEXT"],"providerName":"Anthropic","responseStreamingSupported":true},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":true,"inferenceTypesSupported":["ON_DEMAND"],"inputModalities":["TEXT"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/anthropic.claude-instant-v1","modelId":"anthropic.claude-instant-v1","modelLifecycle":{"status":"LEGACY"},"modelName":"Claude
        Instant","outputModalities":["TEXT"],"providerName":"Anthropic","responseStreamingSupported":true},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":true,"inferenceTypesSupported":["PROVISIONED"],"inputModalities":["TEXT"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/anthropic.claude-v2:0:18k","modelId":"anthropic.claude-v2:0:18k","modelLifecycle":{"status":"LEGACY"},"modelName":"Claude","outputModalities":["TEXT"],"providerName":"Anthropic","responseStreamingSupported":true},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":true,"inferenceTypesSupported":["PROVISIONED"],"inputModalities":["TEXT"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/anthropic.claude-v2:0:100k","modelId":"anthropic.claude-v2:0:100k","modelLifecycle":{"status":"LEGACY"},"modelName":"Claude","outputModalities":["TEXT"],"providerName":"Anthropic","responseStreamingSupported":true},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":true,"inferenceTypesSupported":["PROVISIONED"],"inputModalities":["TEXT"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/anthropic.claude-v2:1:18k","modelId":"anthropic.claude-v2:1:18k","modelLifecycle":{"status":"LEGACY"},"modelName":"Claude","outputModalities":["TEXT"],"providerName":"Anthropic","responseStreamingSupported":true},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":true,"inferenceTypesSupported":["PROVISIONED"],"inputModalities":["TEXT"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/anthropic.claude-v2:1:200k","modelId":"anthropic.claude-v2:1:200k","modelLifecycle":{"status":"LEGACY"},"modelName":"Claude","outputModalities":["TEXT"],"providerName":"Anthropic","responseStreamingSupported":true},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":true,"inferenceTypesSupported":["ON_DEMAND"],"inputModalities":["TEXT"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/anthropic.claude-v2:1","modelId":"anthropic.claude-v2:1","modelLifecycle":{"status":"LEGACY"},"modelName":"Claude","outputModalities":["TEXT"],"providerName":"Anthropic","responseStreamingSupported":true},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":true,"inferenceTypesSupported":["ON_DEMAND"],"inputModalities":["TEXT"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/anthropic.claude-v2","modelId":"anthropic.claude-v2","modelLifecycle":{"status":"LEGACY"},"modelName":"Claude","outputModalities":["TEXT"],"providerName":"Anthropic","responseStreamingSupported":true},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":true,"inferenceTypesSupported":["PROVISIONED"],"inputModalities":["TEXT","IMAGE"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/anthropic.claude-3-sonnet-20240229-v1:0:28k","modelId":"anthropic.claude-3-sonnet-20240229-v1:0:28k","modelLifecycle":{"status":"LEGACY"},"modelName":"Claude
        3 Sonnet","outputModalities":["TEXT"],"providerName":"Anthropic","responseStreamingSupported":true},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":true,"inferenceTypesSupported":["PROVISIONED"],"inputModalities":["TEXT","IMAGE"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/anthropic.claude-3-sonnet-20240229-v1:0:200k","modelId":"anthropic.claude-3-sonnet-20240229-v1:0:200k","modelLifecycle":{"status":"LEGACY"},"modelName":"Claude
        3 Sonnet","outputModalities":["TEXT"],"providerName":"Anthropic","responseStreamingSupported":true},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":true,"inferenceTypesSupported":["ON_DEMAND"],"inputModalities":["TEXT","IMAGE"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/anthropic.claude-3-sonnet-20240229-v1:0","modelId":"anthropic.claude-3-sonnet-20240229-v1:0","modelLifecycle":{"status":"LEGACY"},"modelName":"Claude
        3 Sonnet","outputModalities":["TEXT"],"providerName":"Anthropic","responseStreamingSupported":true},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":true,"inferenceTypesSupported":["PROVISIONED"],"inputModalities":["TEXT","IMAGE"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/anthropic.claude-3-haiku-20240307-v1:0:48k","modelId":"anthropic.claude-3-haiku-20240307-v1:0:48k","modelLifecycle":{"status":"ACTIVE"},"modelName":"Claude
        3 Haiku","outputModalities":["TEXT"],"providerName":"Anthropic","responseStreamingSupported":true},{"customizationsSupported":["FINE_TUNING","DISTILLATION"],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":true,"inferenceTypesSupported":["PROVISIONED"],"inputModalities":["TEXT","IMAGE"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/anthropic.claude-3-haiku-20240307-v1:0:200k","modelId":"anthropic.claude-3-haiku-20240307-v1:0:200k","modelLifecycle":{"status":"ACTIVE"},"modelName":"Claude
        3 Haiku","outputModalities":["TEXT"],"providerName":"Anthropic","responseStreamingSupported":true},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":true,"inferenceTypesSupported":["ON_DEMAND"],"inputModalities":["TEXT","IMAGE"],"intelligentPromptRouting":{"isSupported":true},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/anthropic.claude-3-haiku-20240307-v1:0","modelId":"anthropic.claude-3-haiku-20240307-v1:0","modelLifecycle":{"status":"ACTIVE"},"modelName":"Claude
        3 Haiku","outputModalities":["TEXT"],"providerName":"Anthropic","responseStreamingSupported":true},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":true,"inferenceTypesSupported":["PROVISIONED"],"inputModalities":["TEXT","IMAGE"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/anthropic.claude-3-opus-20240229-v1:0:12k","modelId":"anthropic.claude-3-opus-20240229-v1:0:12k","modelLifecycle":{"status":"ACTIVE"},"modelName":"Claude
        3 Opus","outputModalities":["TEXT"],"providerName":"Anthropic","responseStreamingSupported":true},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":true,"inferenceTypesSupported":["PROVISIONED"],"inputModalities":["TEXT","IMAGE"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/anthropic.claude-3-opus-20240229-v1:0:28k","modelId":"anthropic.claude-3-opus-20240229-v1:0:28k","modelLifecycle":{"status":"ACTIVE"},"modelName":"Claude
        3 Opus","outputModalities":["TEXT"],"providerName":"Anthropic","responseStreamingSupported":true},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":true,"inferenceTypesSupported":["PROVISIONED"],"inputModalities":["TEXT","IMAGE"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/anthropic.claude-3-opus-20240229-v1:0:200k","modelId":"anthropic.claude-3-opus-20240229-v1:0:200k","modelLifecycle":{"status":"ACTIVE"},"modelName":"Claude
        3 Opus","outputModalities":["TEXT"],"providerName":"Anthropic","responseStreamingSupported":true},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":true,"inferenceTypesSupported":["ON_DEMAND"],"inputModalities":["TEXT","IMAGE"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/anthropic.claude-3-opus-20240229-v1:0","modelId":"anthropic.claude-3-opus-20240229-v1:0","modelLifecycle":{"status":"ACTIVE"},"modelName":"Claude
        3 Opus","outputModalities":["TEXT"],"providerName":"Anthropic","responseStreamingSupported":true},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":true,"inferenceTypesSupported":["PROVISIONED"],"inputModalities":["TEXT","IMAGE"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/anthropic.claude-3-5-sonnet-20240620-v1:0:18k","modelId":"anthropic.claude-3-5-sonnet-20240620-v1:0:18k","modelLifecycle":{"status":"ACTIVE"},"modelName":"Claude
        3.5 Sonnet","outputModalities":["TEXT"],"providerName":"Anthropic","responseStreamingSupported":true},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":true,"inferenceTypesSupported":["PROVISIONED"],"inputModalities":["TEXT","IMAGE"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/anthropic.claude-3-5-sonnet-20240620-v1:0:51k","modelId":"anthropic.claude-3-5-sonnet-20240620-v1:0:51k","modelLifecycle":{"status":"ACTIVE"},"modelName":"Claude
        3.5 Sonnet","outputModalities":["TEXT"],"providerName":"Anthropic","responseStreamingSupported":true},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":true,"inferenceTypesSupported":["PROVISIONED"],"inputModalities":["TEXT","IMAGE"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/anthropic.claude-3-5-sonnet-20240620-v1:0:200k","modelId":"anthropic.claude-3-5-sonnet-20240620-v1:0:200k","modelLifecycle":{"status":"ACTIVE"},"modelName":"Claude
        3.5 Sonnet","outputModalities":["TEXT"],"providerName":"Anthropic","responseStreamingSupported":true},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":true,"inferenceTypesSupported":["ON_DEMAND","INFERENCE_PROFILE"],"inputModalities":["TEXT","IMAGE"],"intelligentPromptRouting":{"isSupported":true},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/anthropic.claude-3-5-sonnet-20240620-v1:0","modelId":"anthropic.claude-3-5-sonnet-20240620-v1:0","modelLifecycle":{"status":"ACTIVE"},"modelName":"Claude
        3.5 Sonnet","outputModalities":["TEXT"],"providerName":"Anthropic","responseStreamingSupported":true},{"customizationsSupported":["FINE_TUNING"],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":true,"inferenceTypesSupported":["PROVISIONED"],"inputModalities":["TEXT"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/cohere.command-text-v14:7:4k","modelId":"cohere.command-text-v14:7:4k","modelLifecycle":{"status":"ACTIVE"},"modelName":"Command","outputModalities":["TEXT"],"providerName":"Cohere","responseStreamingSupported":true},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":true,"inferenceTypesSupported":["ON_DEMAND"],"inputModalities":["TEXT"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/cohere.command-text-v14","modelId":"cohere.command-text-v14","modelLifecycle":{"status":"ACTIVE"},"modelName":"Command","outputModalities":["TEXT"],"providerName":"Cohere","responseStreamingSupported":true},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":true,"inferenceTypesSupported":["ON_DEMAND"],"inputModalities":["TEXT"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/cohere.command-r-v1:0","modelId":"cohere.command-r-v1:0","modelLifecycle":{"status":"ACTIVE"},"modelName":"Command
        R","outputModalities":["TEXT"],"providerName":"Cohere","responseStreamingSupported":true},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":true,"inferenceTypesSupported":["ON_DEMAND"],"inputModalities":["TEXT"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/cohere.command-r-plus-v1:0","modelId":"cohere.command-r-plus-v1:0","modelLifecycle":{"status":"ACTIVE"},"modelName":"Command
        R+","outputModalities":["TEXT"],"providerName":"Cohere","responseStreamingSupported":true},{"customizationsSupported":["FINE_TUNING"],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":true,"inferenceTypesSupported":["PROVISIONED"],"inputModalities":["TEXT"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/cohere.command-light-text-v14:7:4k","modelId":"cohere.command-light-text-v14:7:4k","modelLifecycle":{"status":"ACTIVE"},"modelName":"Command
        Light","outputModalities":["TEXT"],"providerName":"Cohere","responseStreamingSupported":true},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":true,"inferenceTypesSupported":["ON_DEMAND"],"inputModalities":["TEXT"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/cohere.command-light-text-v14","modelId":"cohere.command-light-text-v14","modelLifecycle":{"status":"ACTIVE"},"modelName":"Command
        Light","outputModalities":["TEXT"],"providerName":"Cohere","responseStreamingSupported":true},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":false,"inferenceTypesSupported":["PROVISIONED"],"inputModalities":["TEXT"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/cohere.embed-english-v3:0:512","modelId":"cohere.embed-english-v3:0:512","modelLifecycle":{"status":"ACTIVE"},"modelName":"Embed
        English","outputModalities":["EMBEDDING"],"providerName":"Cohere","responseStreamingSupported":false},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":false,"inferenceTypesSupported":["ON_DEMAND"],"inputModalities":["TEXT"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/cohere.embed-english-v3","modelId":"cohere.embed-english-v3","modelLifecycle":{"status":"ACTIVE"},"modelName":"Embed
        English","outputModalities":["EMBEDDING"],"providerName":"Cohere","responseStreamingSupported":false},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":false,"inferenceTypesSupported":["PROVISIONED"],"inputModalities":["TEXT"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/cohere.embed-multilingual-v3:0:512","modelId":"cohere.embed-multilingual-v3:0:512","modelLifecycle":{"status":"ACTIVE"},"modelName":"Embed
        Multilingual","outputModalities":["EMBEDDING"],"providerName":"Cohere","responseStreamingSupported":false},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":false,"inferenceTypesSupported":["ON_DEMAND"],"inputModalities":["TEXT"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/cohere.embed-multilingual-v3","modelId":"cohere.embed-multilingual-v3","modelLifecycle":{"status":"ACTIVE"},"modelName":"Embed
        Multilingual","outputModalities":["EMBEDDING"],"providerName":"Cohere","responseStreamingSupported":false},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":false,"inferenceTypesSupported":["ON_DEMAND"],"inputModalities":["TEXT"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/cohere.rerank-v3-5:0","modelId":"cohere.rerank-v3-5:0","modelLifecycle":{"status":"ACTIVE"},"modelName":"Rerank
        3.5","outputModalities":["TEXT"],"providerName":"Cohere","responseStreamingSupported":false},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":true,"inferenceTypesSupported":["INFERENCE_PROFILE"],"inputModalities":["TEXT"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/deepseek.r1-v1:0","modelId":"deepseek.r1-v1:0","modelLifecycle":{"status":"ACTIVE"},"modelName":"DeepSeek-R1","outputModalities":["TEXT"],"providerName":"DeepSeek","responseStreamingSupported":true},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":true,"inferenceTypesSupported":["ON_DEMAND"],"inputModalities":["TEXT"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/meta.llama3-8b-instruct-v1:0","modelId":"meta.llama3-8b-instruct-v1:0","modelLifecycle":{"status":"ACTIVE"},"modelName":"Llama
        3 8B Instruct","outputModalities":["TEXT"],"providerName":"Meta","responseStreamingSupported":true},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":true,"inferenceTypesSupported":["ON_DEMAND"],"inputModalities":["TEXT"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/meta.llama3-70b-instruct-v1:0","modelId":"meta.llama3-70b-instruct-v1:0","modelLifecycle":{"status":"ACTIVE"},"modelName":"Llama
        3 70B Instruct","outputModalities":["TEXT"],"providerName":"Meta","responseStreamingSupported":true},{"customizationsSupported":["FINE_TUNING","DISTILLATION"],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":true,"inferenceTypesSupported":["PROVISIONED"],"inputModalities":["TEXT"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/meta.llama3-1-8b-instruct-v1:0:128k","modelId":"meta.llama3-1-8b-instruct-v1:0:128k","modelLifecycle":{"status":"ACTIVE"},"modelName":"Llama
        3.1 8B Instruct","outputModalities":["TEXT"],"providerName":"Meta","responseStreamingSupported":true},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":true,"inferenceTypesSupported":["ON_DEMAND"],"inputModalities":["TEXT"],"intelligentPromptRouting":{"isSupported":true},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/meta.llama3-1-8b-instruct-v1:0","modelId":"meta.llama3-1-8b-instruct-v1:0","modelLifecycle":{"status":"ACTIVE"},"modelName":"Llama
        3.1 8B Instruct","outputModalities":["TEXT"],"providerName":"Meta","responseStreamingSupported":true},{"customizationsSupported":["FINE_TUNING","DISTILLATION"],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":true,"inferenceTypesSupported":["PROVISIONED"],"inputModalities":["TEXT"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/meta.llama3-1-70b-instruct-v1:0:128k","modelId":"meta.llama3-1-70b-instruct-v1:0:128k","modelLifecycle":{"status":"ACTIVE"},"modelName":"Llama
        3.1 70B Instruct","outputModalities":["TEXT"],"providerName":"Meta","responseStreamingSupported":true},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":true,"inferenceTypesSupported":["ON_DEMAND"],"inputModalities":["TEXT"],"intelligentPromptRouting":{"isSupported":true},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/meta.llama3-1-70b-instruct-v1:0","modelId":"meta.llama3-1-70b-instruct-v1:0","modelLifecycle":{"status":"ACTIVE"},"modelName":"Llama
        3.1 70B Instruct","outputModalities":["TEXT"],"providerName":"Meta","responseStreamingSupported":true},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":true,"inferenceTypesSupported":["ON_DEMAND"],"inputModalities":["TEXT"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/meta.llama3-1-405b-instruct-v1:0","modelId":"meta.llama3-1-405b-instruct-v1:0","modelLifecycle":{"status":"ACTIVE"},"modelName":"Llama
        3.1 405B Instruct","outputModalities":["TEXT"],"providerName":"Meta","responseStreamingSupported":true},{"customizationsSupported":["FINE_TUNING"],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":true,"inferenceTypesSupported":["PROVISIONED"],"inputModalities":["TEXT","IMAGE"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/meta.llama3-2-11b-instruct-v1:0:128k","modelId":"meta.llama3-2-11b-instruct-v1:0:128k","modelLifecycle":{"status":"ACTIVE"},"modelName":"Llama
        3.2 11B Instruct","outputModalities":["TEXT"],"providerName":"Meta","responseStreamingSupported":true},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":true,"inferenceTypesSupported":["INFERENCE_PROFILE"],"inputModalities":["TEXT","IMAGE"],"intelligentPromptRouting":{"isSupported":true},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/meta.llama3-2-11b-instruct-v1:0","modelId":"meta.llama3-2-11b-instruct-v1:0","modelLifecycle":{"status":"ACTIVE"},"modelName":"Llama
        3.2 11B Instruct","outputModalities":["TEXT"],"providerName":"Meta","responseStreamingSupported":true},{"customizationsSupported":["FINE_TUNING"],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":true,"inferenceTypesSupported":["PROVISIONED"],"inputModalities":["TEXT","IMAGE"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/meta.llama3-2-90b-instruct-v1:0:128k","modelId":"meta.llama3-2-90b-instruct-v1:0:128k","modelLifecycle":{"status":"ACTIVE"},"modelName":"Llama
        3.2 90B Instruct","outputModalities":["TEXT"],"providerName":"Meta","responseStreamingSupported":true},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":true,"inferenceTypesSupported":["INFERENCE_PROFILE"],"inputModalities":["TEXT","IMAGE"],"intelligentPromptRouting":{"isSupported":true},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/meta.llama3-2-90b-instruct-v1:0","modelId":"meta.llama3-2-90b-instruct-v1:0","modelLifecycle":{"status":"ACTIVE"},"modelName":"Llama
        3.2 90B Instruct","outputModalities":["TEXT"],"providerName":"Meta","responseStreamingSupported":true},{"customizationsSupported":["FINE_TUNING"],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":true,"inferenceTypesSupported":["PROVISIONED"],"inputModalities":["TEXT"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/meta.llama3-2-1b-instruct-v1:0:128k","modelId":"meta.llama3-2-1b-instruct-v1:0:128k","modelLifecycle":{"status":"ACTIVE"},"modelName":"Llama
        3.2 1B Instruct","outputModalities":["TEXT"],"providerName":"Meta","responseStreamingSupported":true},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":true,"inferenceTypesSupported":["INFERENCE_PROFILE"],"inputModalities":["TEXT"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/meta.llama3-2-1b-instruct-v1:0","modelId":"meta.llama3-2-1b-instruct-v1:0","modelLifecycle":{"status":"ACTIVE"},"modelName":"Llama
        3.2 1B Instruct","outputModalities":["TEXT"],"providerName":"Meta","responseStreamingSupported":true},{"customizationsSupported":["FINE_TUNING"],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":true,"inferenceTypesSupported":["PROVISIONED"],"inputModalities":["TEXT"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/meta.llama3-2-3b-instruct-v1:0:128k","modelId":"meta.llama3-2-3b-instruct-v1:0:128k","modelLifecycle":{"status":"ACTIVE"},"modelName":"Llama
        3.2 3B Instruct","outputModalities":["TEXT"],"providerName":"Meta","responseStreamingSupported":true},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":true,"inferenceTypesSupported":["INFERENCE_PROFILE"],"inputModalities":["TEXT"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/meta.llama3-2-3b-instruct-v1:0","modelId":"meta.llama3-2-3b-instruct-v1:0","modelLifecycle":{"status":"ACTIVE"},"modelName":"Llama
        3.2 3B Instruct","outputModalities":["TEXT"],"providerName":"Meta","responseStreamingSupported":true},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":true,"inferenceTypesSupported":["INFERENCE_PROFILE"],"inputModalities":["TEXT"],"intelligentPromptRouting":{"isSupported":true},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/meta.llama3-3-70b-instruct-v1:0","modelId":"meta.llama3-3-70b-instruct-v1:0","modelLifecycle":{"status":"ACTIVE"},"modelName":"Llama
        3.3 70B Instruct","outputModalities":["TEXT"],"providerName":"Meta","responseStreamingSupported":true},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":true,"inferenceTypesSupported":["ON_DEMAND"],"inputModalities":["TEXT"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/mistral.mistral-7b-instruct-v0:2","modelId":"mistral.mistral-7b-instruct-v0:2","modelLifecycle":{"status":"ACTIVE"},"modelName":"Mistral
        7B Instruct","outputModalities":["TEXT"],"providerName":"Mistral AI","responseStreamingSupported":true},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":true,"inferenceTypesSupported":["ON_DEMAND"],"inputModalities":["TEXT"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/mistral.mixtral-8x7b-instruct-v0:1","modelId":"mistral.mixtral-8x7b-instruct-v0:1","modelLifecycle":{"status":"ACTIVE"},"modelName":"Mixtral
        8x7B Instruct","outputModalities":["TEXT"],"providerName":"Mistral AI","responseStreamingSupported":true},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":true,"inferenceTypesSupported":["ON_DEMAND"],"inputModalities":["TEXT"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/mistral.mistral-large-2402-v1:0","modelId":"mistral.mistral-large-2402-v1:0","modelLifecycle":{"status":"ACTIVE"},"modelName":"Mistral
        Large (24.02)","outputModalities":["TEXT"],"providerName":"Mistral AI","responseStreamingSupported":true},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":true,"inferenceTypesSupported":["ON_DEMAND"],"inputModalities":["TEXT"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/mistral.mistral-large-2407-v1:0","modelId":"mistral.mistral-large-2407-v1:0","modelLifecycle":{"status":"ACTIVE"},"modelName":"Mistral
        Large (24.07)","outputModalities":["TEXT"],"providerName":"Mistral AI","responseStreamingSupported":true},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":true,"inferenceTypesSupported":["INFERENCE_PROFILE"],"inputModalities":["TEXT","IMAGE"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/mistral.pixtral-large-2502-v1:0","modelId":"mistral.pixtral-large-2502-v1:0","modelLifecycle":{"status":"ACTIVE"},"modelName":"Pixtral
        Large (25.02)","outputModalities":["TEXT"],"providerName":"Mistral AI","responseStreamingSupported":true},{"customizationsSupported":[],"explicitPromptCaching":{"isSupported":false},"guardrailsSupported":false,"inferenceTypesSupported":["ON_DEMAND"],"inputModalities":["TEXT"],"intelligentPromptRouting":{"isSupported":false},"modelArn":"arn:aws:bedrock:<AWS_REGION>::foundation-model/luma.ray-v2:0","modelId":"luma.ray-v2:0","modelLifecycle":{"status":"ACTIVE"},"modelName":"Ray
        v2","outputModalities":["VIDEO"],"providerName":"Luma AI","responseStreamingSupported":false}]}'
  recorded_at: Wed, 23 Apr 2025 11:31:55 GMT
- request:
    method: get
    uri: https://openrouter.ai/api/v1/models
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v2.13.0
      Authorization:
      - Bearer <OPENROUTER_API_KEY>
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Wed, 23 Apr 2025 11:31:55 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Allow-Origin:
      - "*"
      Cdn-Cache-Control:
      - max-age=300
      Vary:
      - Accept-Encoding
      Server:
      - cloudflare
      Cf-Ray:
      - "<CF_RAY>"
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        eyJkYXRhIjpbeyJpZCI6Im1pY3Jvc29mdC9tYWktZHMtcjE6ZnJlZSIsIm5hbWUiOiJNaWNyb3NvZnQ6IE1BSSBEUyBSMSAoZnJlZSkiLCJjcmVhdGVkIjoxNzQ1MTk0MTAwLCJkZXNjcmlwdGlvbiI6Ik1BSS1EUy1SMSBpcyBhIHBvc3QtdHJhaW5lZCB2YXJpYW50IG9mIERlZXBTZWVrLVIxIGRldmVsb3BlZCBieSB0aGUgTWljcm9zb2Z0IEFJIHRlYW0gdG8gaW1wcm92ZSB0aGUgbW9kZWzigJlzIHJlc3BvbnNpdmVuZXNzIG9uIHByZXZpb3VzbHkgYmxvY2tlZCB0b3BpY3Mgd2hpbGUgZW5oYW5jaW5nIGl0cyBzYWZldHkgcHJvZmlsZS4gQnVpbHQgb24gdG9wIG9mIERlZXBTZWVrLVIx4oCZcyByZWFzb25pbmcgZm91bmRhdGlvbiwgaXQgaW50ZWdyYXRlcyAxMTBrIGV4YW1wbGVzIGZyb20gdGhlIFR1bHUtMyBTRlQgZGF0YXNldCBhbmQgMzUwayBpbnRlcm5hbGx5IGN1cmF0ZWQgbXVsdGlsaW5ndWFsIHNhZmV0eS1hbGlnbm1lbnQgc2FtcGxlcy4gVGhlIG1vZGVsIHJldGFpbnMgc3Ryb25nIHJlYXNvbmluZywgY29kaW5nLCBhbmQgcHJvYmxlbS1zb2x2aW5nIGNhcGFiaWxpdGllcywgd2hpbGUgdW5ibG9ja2luZyBhIHdpZGUgcmFuZ2Ugb2YgcHJvbXB0cyBwcmV2aW91c2x5IHJlc3RyaWN0ZWQgaW4gUjEuXG5cbk1BSS1EUy1SMSBkZW1vbnN0cmF0ZXMgaW1wcm92ZWQgcGVyZm9ybWFuY2Ugb24gaGFybSBtaXRpZ2F0aW9uIGJlbmNobWFya3MgYW5kIG1haW50YWlucyBjb21wZXRpdGl2ZSByZXN1bHRzIGFjcm9zcyBnZW5lcmFsIHJlYXNvbmluZyB0YXNrcy4gSXQgc3VycGFzc2VzIFIxLTE3NzYgaW4gc2F0aXNmYWN0aW9uIG1ldHJpY3MgZm9yIGJsb2NrZWQgcXVlcmllcyBhbmQgcmVkdWNlcyBsZWFrYWdlIGluIGhhcm1mdWwgY29udGVudCBjYXRlZ29yaWVzLiBUaGUgbW9kZWwgaXMgYmFzZWQgb24gYSB0cmFuc2Zvcm1lciBNb0UgYXJjaGl0ZWN0dXJlIGFuZCBpcyBzdWl0YWJsZSBmb3IgZ2VuZXJhbC1wdXJwb3NlIHVzZSBjYXNlcywgZXhjbHVkaW5nIGhpZ2gtc3Rha2VzIGRvbWFpbnMgc3VjaCBhcyBsZWdhbCwgbWVkaWNhbCwgb3IgYXV0b25vbW91cyBzeXN0ZW1zLiIsImNvbnRleHRfbGVuZ3RoIjoxNjM4NDAsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJEZWVwU2VlayIsImluc3RydWN0X3R5cGUiOiJkZWVwc2Vlay1yMSJ9LCJwcmljaW5nIjp7InByb21wdCI6IjAiLCJjb21wbGV0aW9uIjoiMCIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6MTYzODQwLCJtYXhfY29tcGxldGlvbl90b2tlbnMiOm51bGwsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJnb29nbGUvZ2VtaW5pLTIuNS1wcm8tcHJldmlldy0wMy0yNSIsIm5hbWUiOiJHb29nbGU6IEdlbWluaSAyLjUgUHJvIFByZXZpZXciLCJjcmVhdGVkIjoxNzQ0OTI0MjA2LCJkZXNjcmlwdGlvbiI6IkdlbWluaSAyLjUgUHJvIGlzIEdvb2dsZeKAmXMgc3RhdGUtb2YtdGhlLWFydCBBSSBtb2RlbCBkZXNpZ25lZCBmb3IgYWR2YW5jZWQgcmVhc29uaW5nLCBjb2RpbmcsIG1hdGhlbWF0aWNzLCBhbmQgc2NpZW50aWZpYyB0YXNrcy4gSXQgZW1wbG95cyDigJx0aGlua2luZ+KAnSBjYXBhYmlsaXRpZXMsIGVuYWJsaW5nIGl0IHRvIHJlYXNvbiB0aHJvdWdoIHJlc3BvbnNlcyB3aXRoIGVuaGFuY2VkIGFjY3VyYWN5IGFuZCBudWFuY2VkIGNvbnRleHQgaGFuZGxpbmcuIEdlbWluaSAyLjUgUHJvIGFjaGlldmVzIHRvcC10aWVyIHBlcmZvcm1hbmNlIG9uIG11bHRpcGxlIGJlbmNobWFya3MsIGluY2x1ZGluZyBmaXJzdC1wbGFjZSBwb3NpdGlvbmluZyBvbiB0aGUgTE1BcmVuYSBsZWFkZXJib2FyZCwgcmVmbGVjdGluZyBzdXBlcmlvciBodW1hbi1wcmVmZXJlbmNlIGFsaWdubWVudCBhbmQgY29tcGxleCBwcm9ibGVtLXNvbHZpbmcgYWJpbGl0aWVzLiIsImNvbnRleHRfbGVuZ3RoIjoxMDQ4NTc2LCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0K2ltYWdlLT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0IiwiaW1hZ2UiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJHZW1pbmkiLCJpbnN0cnVjdF90eXBlIjpudWxsfSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMTI1IiwiY29tcGxldGlvbiI6IjAuMDAwMDEiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMC4wMDUxNiIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCIsImlucHV0X2NhY2hlX3JlYWQiOiIwLjAwMDAwMDYyNSIsImlucHV0X2NhY2hlX3dyaXRlIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjEwNDg1NzYsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6NjU1MzUsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJ0aHVkbS9nbG0tejEtMzJiOmZyZWUiLCJuYW1lIjoiVEhVRE06IEdMTSBaMSAzMkIgKGZyZWUpIiwiY3JlYXRlZCI6MTc0NDkyNDE0OCwiZGVzY3JpcHRpb24iOiJHTE0tWjEtMzJCLTA0MTQgaXMgYW4gZW5oYW5jZWQgcmVhc29uaW5nIHZhcmlhbnQgb2YgR0xNLTQtMzJCLCBidWlsdCBmb3IgZGVlcCBtYXRoZW1hdGljYWwsIGxvZ2ljYWwsIGFuZCBjb2RlLW9yaWVudGVkIHByb2JsZW0gc29sdmluZy4gSXQgYXBwbGllcyBleHRlbmRlZCByZWluZm9yY2VtZW50IGxlYXJuaW5n4oCUYm90aCB0YXNrLXNwZWNpZmljIGFuZCBnZW5lcmFsIHBhaXJ3aXNlIHByZWZlcmVuY2UtYmFzZWTigJR0byBpbXByb3ZlIHBlcmZvcm1hbmNlIG9uIGNvbXBsZXggbXVsdGktc3RlcCB0YXNrcy4gQ29tcGFyZWQgdG8gdGhlIGJhc2UgR0xNLTQtMzJCIG1vZGVsLCBaMSBzaWduaWZpY2FudGx5IGJvb3N0cyBjYXBhYmlsaXRpZXMgaW4gc3RydWN0dXJlZCByZWFzb25pbmcgYW5kIGZvcm1hbCBkb21haW5zLlxuXG5UaGUgbW9kZWwgc3VwcG9ydHMgZW5mb3JjZWQg4oCcdGhpbmtpbmfigJ0gc3RlcHMgdmlhIHByb21wdCBlbmdpbmVlcmluZyBhbmQgb2ZmZXJzIGltcHJvdmVkIGNvaGVyZW5jZSBmb3IgbG9uZy1mb3JtIG91dHB1dHMuIEl04oCZcyBvcHRpbWl6ZWQgZm9yIHVzZSBpbiBhZ2VudGljIHdvcmtmbG93cywgYW5kIGluY2x1ZGVzIHN1cHBvcnQgZm9yIGxvbmcgY29udGV4dCAodmlhIFlhUk4pLCBKU09OIHRvb2wgY2FsbGluZywgYW5kIGZpbmUtZ3JhaW5lZCBzYW1wbGluZyBjb25maWd1cmF0aW9uIGZvciBzdGFibGUgaW5mZXJlbmNlLiBJZGVhbCBmb3IgdXNlIGNhc2VzIHJlcXVpcmluZyBkZWxpYmVyYXRlLCBtdWx0aS1zdGVwIHJlYXNvbmluZyBvciBmb3JtYWwgZGVyaXZhdGlvbnMuIiwiY29udGV4dF9sZW5ndGgiOjMyNzY4LCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiT3RoZXIiLCJpbnN0cnVjdF90eXBlIjoiZGVlcHNlZWstcjEifSwicHJpY2luZyI6eyJwcm9tcHQiOiIwIiwiY29tcGxldGlvbiI6IjAiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjMyNzY4LCJtYXhfY29tcGxldGlvbl90b2tlbnMiOm51bGwsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJ0aHVkbS9nbG0tNC0zMmI6ZnJlZSIsIm5hbWUiOiJUSFVETTogR0xNIDQgMzJCIChmcmVlKSIsImNyZWF0ZWQiOjE3NDQ5MjA5MTUsImRlc2NyaXB0aW9uIjoiR0xNLTQtMzJCLTA0MTQgaXMgYSAzMkIgYmlsaW5ndWFsIChDaGluZXNlLUVuZ2xpc2gpIG9wZW4td2VpZ2h0IGxhbmd1YWdlIG1vZGVsIG9wdGltaXplZCBmb3IgY29kZSBnZW5lcmF0aW9uLCBmdW5jdGlvbiBjYWxsaW5nLCBhbmQgYWdlbnQtc3R5bGUgdGFza3MuIFByZXRyYWluZWQgb24gMTVUIG9mIGhpZ2gtcXVhbGl0eSBhbmQgcmVhc29uaW5nLWhlYXZ5IGRhdGEsIGl0IHdhcyBmdXJ0aGVyIHJlZmluZWQgdXNpbmcgaHVtYW4gcHJlZmVyZW5jZSBhbGlnbm1lbnQsIHJlamVjdGlvbiBzYW1wbGluZywgYW5kIHJlaW5mb3JjZW1lbnQgbGVhcm5pbmcuIFRoZSBtb2RlbCBleGNlbHMgaW4gY29tcGxleCByZWFzb25pbmcsIGFydGlmYWN0IGdlbmVyYXRpb24sIGFuZCBzdHJ1Y3R1cmVkIG91dHB1dCB0YXNrcywgYWNoaWV2aW5nIHBlcmZvcm1hbmNlIGNvbXBhcmFibGUgdG8gR1BULTRvIGFuZCBEZWVwU2Vlay1WMy0wMzI0IGFjcm9zcyBzZXZlcmFsIGJlbmNobWFya3MuIiwiY29udGV4dF9sZW5ndGgiOjMyNzY4LCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiT3RoZXIiLCJpbnN0cnVjdF90eXBlIjpudWxsfSwicHJpY2luZyI6eyJwcm9tcHQiOiIwIiwiY29tcGxldGlvbiI6IjAiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjMyNzY4LCJtYXhfY29tcGxldGlvbl90b2tlbnMiOm51bGwsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJnb29nbGUvZ2VtaW5pLTIuNS1mbGFzaC1wcmV2aWV3IiwibmFtZSI6Ikdvb2dsZTogR2VtaW5pIDIuNSBGbGFzaCBQcmV2aWV3IiwiY3JlYXRlZCI6MTc0NDkxNDY2NywiZGVzY3JpcHRpb24iOiJHZW1pbmkgMi41IEZsYXNoIGlzIEdvb2dsZSdzIHN0YXRlLW9mLXRoZS1hcnQgd29ya2hvcnNlIG1vZGVsLCBzcGVjaWZpY2FsbHkgZGVzaWduZWQgZm9yIGFkdmFuY2VkIHJlYXNvbmluZywgY29kaW5nLCBtYXRoZW1hdGljcywgYW5kIHNjaWVudGlmaWMgdGFza3MuIEl0IGluY2x1ZGVzIGJ1aWx0LWluIFwidGhpbmtpbmdcIiBjYXBhYmlsaXRpZXMsIGVuYWJsaW5nIGl0IHRvIHByb3ZpZGUgcmVzcG9uc2VzIHdpdGggZ3JlYXRlciBhY2N1cmFjeSBhbmQgbnVhbmNlZCBjb250ZXh0IGhhbmRsaW5nLiBcblxuTm90ZTogVGhpcyBtb2RlbCBpcyBhdmFpbGFibGUgaW4gdHdvIHZhcmlhbnRzOiB0aGlua2luZyBhbmQgbm9uLXRoaW5raW5nLiBUaGUgb3V0cHV0IHByaWNpbmcgdmFyaWVzIHNpZ25pZmljYW50bHkgZGVwZW5kaW5nIG9uIHdoZXRoZXIgdGhlIHRoaW5raW5nIGNhcGFiaWxpdHkgaXMgYWN0aXZlLiBJZiB5b3Ugc2VsZWN0IHRoZSBzdGFuZGFyZCB2YXJpYW50ICh3aXRob3V0IHRoZSBcIjp0aGlua2luZ1wiIHN1ZmZpeCksIHRoZSBtb2RlbCB3aWxsIGV4cGxpY2l0bHkgYXZvaWQgZ2VuZXJhdGluZyB0aGlua2luZyB0b2tlbnMuIFxuXG5UbyB1dGlsaXplIHRoZSB0aGlua2luZyBjYXBhYmlsaXR5IGFuZCByZWNlaXZlIHRoaW5raW5nIHRva2VucywgeW91IG11c3QgY2hvb3NlIHRoZSBcIjp0aGlua2luZ1wiIHZhcmlhbnQsIHdoaWNoIHdpbGwgdGhlbiBpbmN1ciB0aGUgaGlnaGVyIHRoaW5raW5nLW91dHB1dCBwcmljaW5nLiBcblxuQWRkaXRpb25hbGx5LCBHZW1pbmkgMi41IEZsYXNoIGlzIGNvbmZpZ3VyYWJsZSB0aHJvdWdoIHRoZSBcIm1heCB0b2tlbnMgZm9yIHJlYXNvbmluZ1wiIHBhcmFtZXRlciwgYXMgZGVzY3JpYmVkIGluIHRoZSBkb2N1bWVudGF0aW9uIChodHRwczovL29wZW5yb3V0ZXIuYWkvZG9jcy91c2UtY2FzZXMvcmVhc29uaW5nLXRva2VucyNtYXgtdG9rZW5zLWZvci1yZWFzb25pbmcpLiIsImNvbnRleHRfbGVuZ3RoIjoxMDQ4NTc2LCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0K2ltYWdlLT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJpbWFnZSIsInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJHZW1pbmkiLCJpbnN0cnVjdF90eXBlIjpudWxsfSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMDE1IiwiY29tcGxldGlvbiI6IjAuMDAwMDAwNiIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwLjAwMDYxOTIiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoxMDQ4NTc2LCJtYXhfY29tcGxldGlvbl90b2tlbnMiOjY1NTM1LCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoiZ29vZ2xlL2dlbWluaS0yLjUtZmxhc2gtcHJldmlldzp0aGlua2luZyIsIm5hbWUiOiJHb29nbGU6IEdlbWluaSAyLjUgRmxhc2ggUHJldmlldyAodGhpbmtpbmcpIiwiY3JlYXRlZCI6MTc0NDkxNDY2NywiZGVzY3JpcHRpb24iOiJHZW1pbmkgMi41IEZsYXNoIGlzIEdvb2dsZSdzIHN0YXRlLW9mLXRoZS1hcnQgd29ya2hvcnNlIG1vZGVsLCBzcGVjaWZpY2FsbHkgZGVzaWduZWQgZm9yIGFkdmFuY2VkIHJlYXNvbmluZywgY29kaW5nLCBtYXRoZW1hdGljcywgYW5kIHNjaWVudGlmaWMgdGFza3MuIEl0IGluY2x1ZGVzIGJ1aWx0LWluIFwidGhpbmtpbmdcIiBjYXBhYmlsaXRpZXMsIGVuYWJsaW5nIGl0IHRvIHByb3ZpZGUgcmVzcG9uc2VzIHdpdGggZ3JlYXRlciBhY2N1cmFjeSBhbmQgbnVhbmNlZCBjb250ZXh0IGhhbmRsaW5nLiBcblxuTm90ZTogVGhpcyBtb2RlbCBpcyBhdmFpbGFibGUgaW4gdHdvIHZhcmlhbnRzOiB0aGlua2luZyBhbmQgbm9uLXRoaW5raW5nLiBUaGUgb3V0cHV0IHByaWNpbmcgdmFyaWVzIHNpZ25pZmljYW50bHkgZGVwZW5kaW5nIG9uIHdoZXRoZXIgdGhlIHRoaW5raW5nIGNhcGFiaWxpdHkgaXMgYWN0aXZlLiBJZiB5b3Ugc2VsZWN0IHRoZSBzdGFuZGFyZCB2YXJpYW50ICh3aXRob3V0IHRoZSBcIjp0aGlua2luZ1wiIHN1ZmZpeCksIHRoZSBtb2RlbCB3aWxsIGV4cGxpY2l0bHkgYXZvaWQgZ2VuZXJhdGluZyB0aGlua2luZyB0b2tlbnMuIFxuXG5UbyB1dGlsaXplIHRoZSB0aGlua2luZyBjYXBhYmlsaXR5IGFuZCByZWNlaXZlIHRoaW5raW5nIHRva2VucywgeW91IG11c3QgY2hvb3NlIHRoZSBcIjp0aGlua2luZ1wiIHZhcmlhbnQsIHdoaWNoIHdpbGwgdGhlbiBpbmN1ciB0aGUgaGlnaGVyIHRoaW5raW5nLW91dHB1dCBwcmljaW5nLiBcblxuQWRkaXRpb25hbGx5LCBHZW1pbmkgMi41IEZsYXNoIGlzIGNvbmZpZ3VyYWJsZSB0aHJvdWdoIHRoZSBcIm1heCB0b2tlbnMgZm9yIHJlYXNvbmluZ1wiIHBhcmFtZXRlciwgYXMgZGVzY3JpYmVkIGluIHRoZSBkb2N1bWVudGF0aW9uIChodHRwczovL29wZW5yb3V0ZXIuYWkvZG9jcy91c2UtY2FzZXMvcmVhc29uaW5nLXRva2VucyNtYXgtdG9rZW5zLWZvci1yZWFzb25pbmcpLiIsImNvbnRleHRfbGVuZ3RoIjoxMDQ4NTc2LCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0K2ltYWdlLT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJpbWFnZSIsInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJHZW1pbmkiLCJpbnN0cnVjdF90eXBlIjpudWxsfSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMDE1IiwiY29tcGxldGlvbiI6IjAuMDAwMDAzNSIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwLjAwMDYxOTIiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoxMDQ4NTc2LCJtYXhfY29tcGxldGlvbl90b2tlbnMiOjY1NTM1LCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoib3BlbmFpL280LW1pbmktaGlnaCIsIm5hbWUiOiJPcGVuQUk6IG80IE1pbmkgSGlnaCIsImNyZWF0ZWQiOjE3NDQ4MjQyMTIsImRlc2NyaXB0aW9uIjoiT3BlbkFJIG80LW1pbmktaGlnaCBpcyB0aGUgc2FtZSBtb2RlbCBhcyBbbzQtbWluaV0oL29wZW5haS9vNC1taW5pKSB3aXRoIHJlYXNvbmluZ19lZmZvcnQgc2V0IHRvIGhpZ2guIFxuXG5PcGVuQUkgbzQtbWluaSBpcyBhIGNvbXBhY3QgcmVhc29uaW5nIG1vZGVsIGluIHRoZSBvLXNlcmllcywgb3B0aW1pemVkIGZvciBmYXN0LCBjb3N0LWVmZmljaWVudCBwZXJmb3JtYW5jZSB3aGlsZSByZXRhaW5pbmcgc3Ryb25nIG11bHRpbW9kYWwgYW5kIGFnZW50aWMgY2FwYWJpbGl0aWVzLiBJdCBzdXBwb3J0cyB0b29sIHVzZSBhbmQgZGVtb25zdHJhdGVzIGNvbXBldGl0aXZlIHJlYXNvbmluZyBhbmQgY29kaW5nIHBlcmZvcm1hbmNlIGFjcm9zcyBiZW5jaG1hcmtzIGxpa2UgQUlNRSAoOTkuNSUgd2l0aCBQeXRob24pIGFuZCBTV0UtYmVuY2gsIG91dHBlcmZvcm1pbmcgaXRzIHByZWRlY2Vzc29yIG8zLW1pbmkgYW5kIGV2ZW4gYXBwcm9hY2hpbmcgbzMgaW4gc29tZSBkb21haW5zLlxuXG5EZXNwaXRlIGl0cyBzbWFsbGVyIHNpemUsIG80LW1pbmkgZXhoaWJpdHMgaGlnaCBhY2N1cmFjeSBpbiBTVEVNIHRhc2tzLCB2aXN1YWwgcHJvYmxlbSBzb2x2aW5nIChlLmcuLCBNYXRoVmlzdGEsIE1NTVUpLCBhbmQgY29kZSBlZGl0aW5nLiBJdCBpcyBlc3BlY2lhbGx5IHdlbGwtc3VpdGVkIGZvciBoaWdoLXRocm91Z2hwdXQgc2NlbmFyaW9zIHdoZXJlIGxhdGVuY3kgb3IgY29zdCBpcyBjcml0aWNhbC4gVGhhbmtzIHRvIGl0cyBlZmZpY2llbnQgYXJjaGl0ZWN0dXJlIGFuZCByZWZpbmVkIHJlaW5mb3JjZW1lbnQgbGVhcm5pbmcgdHJhaW5pbmcsIG80LW1pbmkgY2FuIGNoYWluIHRvb2xzLCBnZW5lcmF0ZSBzdHJ1Y3R1cmVkIG91dHB1dHMsIGFuZCBzb2x2ZSBtdWx0aS1zdGVwIHRhc2tzIHdpdGggbWluaW1hbCBkZWxheeKAlG9mdGVuIGluIHVuZGVyIGEgbWludXRlLiIsImNvbnRleHRfbGVuZ3RoIjoyMDAwMDAsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQraW1hZ2UtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbImltYWdlIiwidGV4dCJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6Ik90aGVyIiwiaW5zdHJ1Y3RfdHlwZSI6bnVsbH0sInByaWNpbmciOnsicHJvbXB0IjoiMC4wMDAwMDExIiwiY29tcGxldGlvbiI6IjAuMDAwMDA0NCIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwLjAwMDg0MTUiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAiLCJpbnB1dF9jYWNoZV9yZWFkIjoiMC4wMDAwMDAyNzUifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoyMDAwMDAsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6MTAwMDAwLCJpc19tb2RlcmF0ZWQiOnRydWV9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJvcGVuYWkvbzMiLCJuYW1lIjoiT3BlbkFJOiBvMyIsImNyZWF0ZWQiOjE3NDQ4MjM0NTcsImRlc2NyaXB0aW9uIjoibzMgaXMgYSB3ZWxsLXJvdW5kZWQgYW5kIHBvd2VyZnVsIG1vZGVsIGFjcm9zcyBkb21haW5zLiBJdCBzZXRzIGEgbmV3IHN0YW5kYXJkIGZvciBtYXRoLCBzY2llbmNlLCBjb2RpbmcsIGFuZCB2aXN1YWwgcmVhc29uaW5nIHRhc2tzLiBJdCBhbHNvIGV4Y2VscyBhdCB0ZWNobmljYWwgd3JpdGluZyBhbmQgaW5zdHJ1Y3Rpb24tZm9sbG93aW5nLiBVc2UgaXQgdG8gdGhpbmsgdGhyb3VnaCBtdWx0aS1zdGVwIHByb2JsZW1zIHRoYXQgaW52b2x2ZSBhbmFseXNpcyBhY3Jvc3MgdGV4dCwgY29kZSwgYW5kIGltYWdlcy4gTm90ZSB0aGF0IEJZT0sgaXMgcmVxdWlyZWQgZm9yIHRoaXMgbW9kZWwuIFNldCB1cCBoZXJlOiBodHRwczovL29wZW5yb3V0ZXIuYWkvc2V0dGluZ3MvaW50ZWdyYXRpb25zIiwiY29udGV4dF9sZW5ndGgiOjIwMDAwMCwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dCtpbWFnZS0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsiaW1hZ2UiLCJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiT3RoZXIiLCJpbnN0cnVjdF90eXBlIjpudWxsfSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAxIiwiY29tcGxldGlvbiI6IjAuMDAwMDQiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMC4wMDc2NSIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCIsImlucHV0X2NhY2hlX3JlYWQiOiIwLjAwMDAwMjUifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoyMDAwMDAsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6MTAwMDAwLCJpc19tb2RlcmF0ZWQiOnRydWV9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJvcGVuYWkvbzQtbWluaSIsIm5hbWUiOiJPcGVuQUk6IG80IE1pbmkiLCJjcmVhdGVkIjoxNzQ0ODIwOTQyLCJkZXNjcmlwdGlvbiI6Ik9wZW5BSSBvNC1taW5pIGlzIGEgY29tcGFjdCByZWFzb25pbmcgbW9kZWwgaW4gdGhlIG8tc2VyaWVzLCBvcHRpbWl6ZWQgZm9yIGZhc3QsIGNvc3QtZWZmaWNpZW50IHBlcmZvcm1hbmNlIHdoaWxlIHJldGFpbmluZyBzdHJvbmcgbXVsdGltb2RhbCBhbmQgYWdlbnRpYyBjYXBhYmlsaXRpZXMuIEl0IHN1cHBvcnRzIHRvb2wgdXNlIGFuZCBkZW1vbnN0cmF0ZXMgY29tcGV0aXRpdmUgcmVhc29uaW5nIGFuZCBjb2RpbmcgcGVyZm9ybWFuY2UgYWNyb3NzIGJlbmNobWFya3MgbGlrZSBBSU1FICg5OS41JSB3aXRoIFB5dGhvbikgYW5kIFNXRS1iZW5jaCwgb3V0cGVyZm9ybWluZyBpdHMgcHJlZGVjZXNzb3IgbzMtbWluaSBhbmQgZXZlbiBhcHByb2FjaGluZyBvMyBpbiBzb21lIGRvbWFpbnMuXG5cbkRlc3BpdGUgaXRzIHNtYWxsZXIgc2l6ZSwgbzQtbWluaSBleGhpYml0cyBoaWdoIGFjY3VyYWN5IGluIFNURU0gdGFza3MsIHZpc3VhbCBwcm9ibGVtIHNvbHZpbmcgKGUuZy4sIE1hdGhWaXN0YSwgTU1NVSksIGFuZCBjb2RlIGVkaXRpbmcuIEl0IGlzIGVzcGVjaWFsbHkgd2VsbC1zdWl0ZWQgZm9yIGhpZ2gtdGhyb3VnaHB1dCBzY2VuYXJpb3Mgd2hlcmUgbGF0ZW5jeSBvciBjb3N0IGlzIGNyaXRpY2FsLiBUaGFua3MgdG8gaXRzIGVmZmljaWVudCBhcmNoaXRlY3R1cmUgYW5kIHJlZmluZWQgcmVpbmZvcmNlbWVudCBsZWFybmluZyB0cmFpbmluZywgbzQtbWluaSBjYW4gY2hhaW4gdG9vbHMsIGdlbmVyYXRlIHN0cnVjdHVyZWQgb3V0cHV0cywgYW5kIHNvbHZlIG11bHRpLXN0ZXAgdGFza3Mgd2l0aCBtaW5pbWFsIGRlbGF54oCUb2Z0ZW4gaW4gdW5kZXIgYSBtaW51dGUuIiwiY29udGV4dF9sZW5ndGgiOjIwMDAwMCwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dCtpbWFnZS0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsiaW1hZ2UiLCJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiT3RoZXIiLCJpbnN0cnVjdF90eXBlIjpudWxsfSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMTEiLCJjb21wbGV0aW9uIjoiMC4wMDAwMDQ0IiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAuMDAwODQxNSIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCIsImlucHV0X2NhY2hlX3JlYWQiOiIwLjAwMDAwMDI3NSJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjIwMDAwMCwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjoxMDAwMDAsImlzX21vZGVyYXRlZCI6dHJ1ZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6InNoaXNhLWFpL3NoaXNhLXYyLWxsYW1hMy4zLTcwYjpmcmVlIiwibmFtZSI6IlNoaXNhIEFJOiBTaGlzYSBWMiBMbGFtYSAzLjMgNzBCICAoZnJlZSkiLCJjcmVhdGVkIjoxNzQ0NzU0ODU4LCJkZXNjcmlwdGlvbiI6IlNoaXNhIFYyIExsYW1hIDMuMyA3MEIgaXMgYSBiaWxpbmd1YWwgSmFwYW5lc2UtRW5nbGlzaCBjaGF0IG1vZGVsIGZpbmUtdHVuZWQgYnkgU2hpc2EuQUkgb24gTWV0YeKAmXMgTGxhbWEtMy4zLTcwQi1JbnN0cnVjdCBiYXNlLiBJdCBwcmlvcml0aXplcyBKYXBhbmVzZSBsYW5ndWFnZSBwZXJmb3JtYW5jZSB3aGlsZSByZXRhaW5pbmcgc3Ryb25nIEVuZ2xpc2ggY2FwYWJpbGl0aWVzLiBUaGUgbW9kZWwgd2FzIG9wdGltaXplZCBlbnRpcmVseSB0aHJvdWdoIHBvc3QtdHJhaW5pbmcsIHVzaW5nIGEgcmVmaW5lZCBtaXggb2Ygc3VwZXJ2aXNlZCBmaW5lLXR1bmluZyAoU0ZUKSBhbmQgRFBPIGRhdGFzZXRzIGluY2x1ZGluZyByZWdlbmVyYXRlZCBTaGFyZUdQVC1zdHlsZSBkYXRhLCB0cmFuc2xhdGlvbiB0YXNrcywgcm9sZXBsYXlpbmcgY29udmVyc2F0aW9ucywgYW5kIGluc3RydWN0aW9uLWZvbGxvd2luZyBwcm9tcHRzLiBVbmxpa2UgZWFybGllciBTaGlzYSByZWxlYXNlcywgdGhpcyB2ZXJzaW9uIGF2b2lkcyB0b2tlbml6ZXIgbW9kaWZpY2F0aW9ucyBvciBleHRlbmRlZCBwcmV0cmFpbmluZy5cblxuU2hpc2EgVjIgNzBCIGFjaGlldmVzIGxlYWRpbmcgSmFwYW5lc2UgdGFzayBwZXJmb3JtYW5jZSBhY3Jvc3MgYSB3aWRlIHJhbmdlIG9mIGN1c3RvbSBhbmQgcHVibGljIGJlbmNobWFya3MsIGluY2x1ZGluZyBKQSBNVCBCZW5jaCwgRUxZWkEgMTAwLCBhbmQgUmFrdWRhLiBJdCBzdXBwb3J0cyBhIDEyOEsgdG9rZW4gY29udGV4dCBsZW5ndGggYW5kIGludGVncmF0ZXMgc21vb3RobHkgd2l0aCBpbmZlcmVuY2UgZnJhbWV3b3JrcyBsaWtlIHZMTE0gYW5kIFNHTGFuZy4gV2hpbGUgaXQgaW5oZXJpdHMgc2FmZXR5IGNoYXJhY3RlcmlzdGljcyBmcm9tIGl0cyBiYXNlIG1vZGVsLCBubyBhZGRpdGlvbmFsIGFsaWdubWVudCB3YXMgYXBwbGllZC4gVGhlIG1vZGVsIGlzIGludGVuZGVkIGZvciBoaWdoLXBlcmZvcm1hbmNlIGJpbGluZ3VhbCBjaGF0LCBpbnN0cnVjdGlvbiBmb2xsb3dpbmcsIGFuZCB0cmFuc2xhdGlvbiB0YXNrcyBhY3Jvc3MgSkEvRU4uIiwiY29udGV4dF9sZW5ndGgiOjMyNzY4LCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiTGxhbWEzIiwiaW5zdHJ1Y3RfdHlwZSI6bnVsbH0sInByaWNpbmciOnsicHJvbXB0IjoiMCIsImNvbXBsZXRpb24iOiIwIiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjozMjc2OCwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjpudWxsLCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoicXdlbi9xd2VuMi41LWNvZGVyLTdiLWluc3RydWN0IiwibmFtZSI6IlF3ZW46IFF3ZW4yLjUgQ29kZXIgN0IgSW5zdHJ1Y3QiLCJjcmVhdGVkIjoxNzQ0NzM0ODg3LCJkZXNjcmlwdGlvbiI6IlF3ZW4yLjUtQ29kZXItN0ItSW5zdHJ1Y3QgaXMgYSA3QiBwYXJhbWV0ZXIgaW5zdHJ1Y3Rpb24tdHVuZWQgbGFuZ3VhZ2UgbW9kZWwgb3B0aW1pemVkIGZvciBjb2RlLXJlbGF0ZWQgdGFza3Mgc3VjaCBhcyBjb2RlIGdlbmVyYXRpb24sIHJlYXNvbmluZywgYW5kIGJ1ZyBmaXhpbmcuIEJhc2VkIG9uIHRoZSBRd2VuMi41IGFyY2hpdGVjdHVyZSwgaXQgaW5jb3Jwb3JhdGVzIGVuaGFuY2VtZW50cyBsaWtlIFJvUEUsIFN3aUdMVSwgUk1TTm9ybSwgYW5kIEdRQSBhdHRlbnRpb24gd2l0aCBzdXBwb3J0IGZvciB1cCB0byAxMjhLIHRva2VucyB1c2luZyBZYVJOLWJhc2VkIGV4dHJhcG9sYXRpb24uIEl0IGlzIHRyYWluZWQgb24gYSBsYXJnZSBjb3JwdXMgb2Ygc291cmNlIGNvZGUsIHN5bnRoZXRpYyBkYXRhLCBhbmQgdGV4dC1jb2RlIGdyb3VuZGluZywgcHJvdmlkaW5nIHJvYnVzdCBwZXJmb3JtYW5jZSBhY3Jvc3MgcHJvZ3JhbW1pbmcgbGFuZ3VhZ2VzIGFuZCBhZ2VudGljIGNvZGluZyB3b3JrZmxvd3MuXG5cblRoaXMgbW9kZWwgaXMgcGFydCBvZiB0aGUgUXdlbjIuNS1Db2RlciBmYW1pbHkgYW5kIG9mZmVycyBzdHJvbmcgY29tcGF0aWJpbGl0eSB3aXRoIHRvb2xzIGxpa2UgdkxMTSBmb3IgZWZmaWNpZW50IGRlcGxveW1lbnQuIFJlbGVhc2VkIHVuZGVyIHRoZSBBcGFjaGUgMi4wIGxpY2Vuc2UuIiwiY29udGV4dF9sZW5ndGgiOjMyNzY4LCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiUXdlbiIsImluc3RydWN0X3R5cGUiOm51bGx9LCJwcmljaW5nIjp7InByb21wdCI6IjAuMDAwMDAwMiIsImNvbXBsZXRpb24iOiIwLjAwMDAwMDIiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjMyNzY4LCJtYXhfY29tcGxldGlvbl90b2tlbnMiOjMyNzY4LCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoib3BlbmFpL2dwdC00LjEiLCJuYW1lIjoiT3BlbkFJOiBHUFQtNC4xIiwiY3JlYXRlZCI6MTc0NDY1MTM4NSwiZGVzY3JpcHRpb24iOiJHUFQtNC4xIGlzIGEgZmxhZ3NoaXAgbGFyZ2UgbGFuZ3VhZ2UgbW9kZWwgb3B0aW1pemVkIGZvciBhZHZhbmNlZCBpbnN0cnVjdGlvbiBmb2xsb3dpbmcsIHJlYWwtd29ybGQgc29mdHdhcmUgZW5naW5lZXJpbmcsIGFuZCBsb25nLWNvbnRleHQgcmVhc29uaW5nLiBJdCBzdXBwb3J0cyBhIDEgbWlsbGlvbiB0b2tlbiBjb250ZXh0IHdpbmRvdyBhbmQgb3V0cGVyZm9ybXMgR1BULTRvIGFuZCBHUFQtNC41IGFjcm9zcyBjb2RpbmcgKDU0LjYlIFNXRS1iZW5jaCBWZXJpZmllZCksIGluc3RydWN0aW9uIGNvbXBsaWFuY2UgKDg3LjQlIElGRXZhbCksIGFuZCBtdWx0aW1vZGFsIHVuZGVyc3RhbmRpbmcgYmVuY2htYXJrcy4gSXQgaXMgdHVuZWQgZm9yIHByZWNpc2UgY29kZSBkaWZmcywgYWdlbnQgcmVsaWFiaWxpdHksIGFuZCBoaWdoIHJlY2FsbCBpbiBsYXJnZSBkb2N1bWVudCBjb250ZXh0cywgbWFraW5nIGl0IGlkZWFsIGZvciBhZ2VudHMsIElERSB0b29saW5nLCBhbmQgZW50ZXJwcmlzZSBrbm93bGVkZ2UgcmV0cmlldmFsLiIsImNvbnRleHRfbGVuZ3RoIjoxMDQ3NTc2LCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0K2ltYWdlLT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJpbWFnZSIsInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJHUFQiLCJpbnN0cnVjdF90eXBlIjpudWxsfSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMiIsImNvbXBsZXRpb24iOiIwLjAwMDAwOCIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIiwiaW5wdXRfY2FjaGVfcmVhZCI6IjAuMDAwMDAwNSJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjEwNDc1NzYsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6MzI3NjgsImlzX21vZGVyYXRlZCI6dHJ1ZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6Im9wZW5haS9ncHQtNC4xLW1pbmkiLCJuYW1lIjoiT3BlbkFJOiBHUFQtNC4xIE1pbmkiLCJjcmVhdGVkIjoxNzQ0NjUxMzgxLCJkZXNjcmlwdGlvbiI6IkdQVC00LjEgTWluaSBpcyBhIG1pZC1zaXplZCBtb2RlbCBkZWxpdmVyaW5nIHBlcmZvcm1hbmNlIGNvbXBldGl0aXZlIHdpdGggR1BULTRvIGF0IHN1YnN0YW50aWFsbHkgbG93ZXIgbGF0ZW5jeSBhbmQgY29zdC4gSXQgcmV0YWlucyBhIDEgbWlsbGlvbiB0b2tlbiBjb250ZXh0IHdpbmRvdyBhbmQgc2NvcmVzIDQ1LjElIG9uIGhhcmQgaW5zdHJ1Y3Rpb24gZXZhbHMsIDM1LjglIG9uIE11bHRpQ2hhbGxlbmdlLCBhbmQgODQuMSUgb24gSUZFdmFsLiBNaW5pIGFsc28gc2hvd3Mgc3Ryb25nIGNvZGluZyBhYmlsaXR5IChlLmcuLCAzMS42JSBvbiBBaWRlcuKAmXMgcG9seWdsb3QgZGlmZiBiZW5jaG1hcmspIGFuZCB2aXNpb24gdW5kZXJzdGFuZGluZywgbWFraW5nIGl0IHN1aXRhYmxlIGZvciBpbnRlcmFjdGl2ZSBhcHBsaWNhdGlvbnMgd2l0aCB0aWdodCBwZXJmb3JtYW5jZSBjb25zdHJhaW50cy4iLCJjb250ZXh0X2xlbmd0aCI6MTA0NzU3NiwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dCtpbWFnZS0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsiaW1hZ2UiLCJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiR1BUIiwiaW5zdHJ1Y3RfdHlwZSI6bnVsbH0sInByaWNpbmciOnsicHJvbXB0IjoiMC4wMDAwMDA0IiwiY29tcGxldGlvbiI6IjAuMDAwMDAxNiIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIiwiaW5wdXRfY2FjaGVfcmVhZCI6IjAuMDAwMDAwMSJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjEwNDc1NzYsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6MzI3NjgsImlzX21vZGVyYXRlZCI6dHJ1ZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6Im9wZW5haS9ncHQtNC4xLW5hbm8iLCJuYW1lIjoiT3BlbkFJOiBHUFQtNC4xIE5hbm8iLCJjcmVhdGVkIjoxNzQ0NjUxMzY5LCJkZXNjcmlwdGlvbiI6IkZvciB0YXNrcyB0aGF0IGRlbWFuZCBsb3cgbGF0ZW5jeSwgR1BU4oCRNC4xIG5hbm8gaXMgdGhlIGZhc3Rlc3QgYW5kIGNoZWFwZXN0IG1vZGVsIGluIHRoZSBHUFQtNC4xIHNlcmllcy4gSXQgZGVsaXZlcnMgZXhjZXB0aW9uYWwgcGVyZm9ybWFuY2UgYXQgYSBzbWFsbCBzaXplIHdpdGggaXRzIDEgbWlsbGlvbiB0b2tlbiBjb250ZXh0IHdpbmRvdywgYW5kIHNjb3JlcyA4MC4xJSBvbiBNTUxVLCA1MC4zJSBvbiBHUFFBLCBhbmQgOS44JSBvbiBBaWRlciBwb2x5Z2xvdCBjb2Rpbmcg4oCTIGV2ZW4gaGlnaGVyIHRoYW4gR1BU4oCRNG8gbWluaS4gSXTigJlzIGlkZWFsIGZvciB0YXNrcyBsaWtlIGNsYXNzaWZpY2F0aW9uIG9yIGF1dG9jb21wbGV0aW9uLiIsImNvbnRleHRfbGVuZ3RoIjoxMDQ3NTc2LCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0K2ltYWdlLT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJpbWFnZSIsInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJHUFQiLCJpbnN0cnVjdF90eXBlIjpudWxsfSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMDEiLCJjb21wbGV0aW9uIjoiMC4wMDAwMDA0IiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAiLCJpbnB1dF9jYWNoZV9yZWFkIjoiMC4wMDAwMDAwMjUifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoxMDQ3NTc2LCJtYXhfY29tcGxldGlvbl90b2tlbnMiOjMyNzY4LCJpc19tb2RlcmF0ZWQiOnRydWV9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJlbGV1dGhlcmFpL2xsZW1tYV83YiIsIm5hbWUiOiJFbGV1dGhlckFJOiBMbGVtbWEgN2IiLCJjcmVhdGVkIjoxNzQ0NjQzMjI1LCJkZXNjcmlwdGlvbiI6IkxsZW1tYSA3QiBpcyBhIGxhbmd1YWdlIG1vZGVsIGZvciBtYXRoZW1hdGljcy4gSXQgd2FzIGluaXRpYWxpemVkIHdpdGggQ29kZSBMbGFtYSA3QiB3ZWlnaHRzLCBhbmQgdHJhaW5lZCBvbiB0aGUgUHJvb2YtUGlsZS0yIGZvciAyMDBCIHRva2Vucy4gTGxlbW1hIG1vZGVscyBhcmUgcGFydGljdWxhcmx5IHN0cm9uZyBhdCBjaGFpbi1vZi10aG91Z2h0IG1hdGhlbWF0aWNhbCByZWFzb25pbmcgYW5kIHVzaW5nIGNvbXB1dGF0aW9uYWwgdG9vbHMgZm9yIG1hdGhlbWF0aWNzLCBzdWNoIGFzIFB5dGhvbiBhbmQgZm9ybWFsIHRoZW9yZW0gcHJvdmVycy4iLCJjb250ZXh0X2xlbmd0aCI6NDA5NiwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dC0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6Ik90aGVyIiwiaW5zdHJ1Y3RfdHlwZSI6bnVsbH0sInByaWNpbmciOnsicHJvbXB0IjoiMC4wMDAwMDA4IiwiY29tcGxldGlvbiI6IjAuMDAwMDAxMiIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6NDA5NiwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjo0MDk2LCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoiYWxmcmVkcHJvcy9jb2RlbGxhbWEtN2ItaW5zdHJ1Y3Qtc29saWRpdHkiLCJuYW1lIjoiQWxmcmVkUHJvczogQ29kZUxMYU1hIDdCIEluc3RydWN0IFNvbGlkaXR5IiwiY3JlYXRlZCI6MTc0NDY0MTg3NCwiZGVzY3JpcHRpb24iOiJBIGZpbmV0dW5lZCA3IGJpbGxpb24gcGFyYW1ldGVycyBDb2RlIExMYU1BIC0gSW5zdHJ1Y3QgbW9kZWwgdG8gZ2VuZXJhdGUgU29saWRpdHkgc21hcnQgY29udHJhY3QgdXNpbmcgNC1iaXQgUUxvUkEgZmluZXR1bmluZyBwcm92aWRlZCBieSBQRUZUIGxpYnJhcnkuIiwiY29udGV4dF9sZW5ndGgiOjQwOTYsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJPdGhlciIsImluc3RydWN0X3R5cGUiOm51bGx9LCJwcmljaW5nIjp7InByb21wdCI6IjAuMDAwMDAwOCIsImNvbXBsZXRpb24iOiIwLjAwMDAwMTIiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjQwOTYsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6NDA5NiwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6ImFybGlhaS9xd3EtMzJiLWFybGlhaS1ycHItdjE6ZnJlZSIsIm5hbWUiOiJBcmxpQUk6IFF3USAzMkIgUnBSIHYxIChmcmVlKSIsImNyZWF0ZWQiOjE3NDQ1NTU5ODIsImRlc2NyaXB0aW9uIjoiUXdRLTMyQi1BcmxpQUktUnBSLXYxIGlzIGEgMzJCIHBhcmFtZXRlciBtb2RlbCBmaW5lLXR1bmVkIGZyb20gUXdlbi9Rd1EtMzJCIHVzaW5nIGEgY3VyYXRlZCBjcmVhdGl2ZSB3cml0aW5nIGFuZCByb2xlcGxheSBkYXRhc2V0IG9yaWdpbmFsbHkgZGV2ZWxvcGVkIGZvciB0aGUgUlBNYXggc2VyaWVzLiBJdCBpcyBkZXNpZ25lZCB0byBtYWludGFpbiBjb2hlcmVuY2UgYW5kIHJlYXNvbmluZyBhY3Jvc3MgbG9uZyBtdWx0aS10dXJuIGNvbnZlcnNhdGlvbnMgYnkgaW50cm9kdWNpbmcgZXhwbGljaXQgcmVhc29uaW5nIHN0ZXBzIHBlciBkaWFsb2d1ZSB0dXJuLCBnZW5lcmF0ZWQgYW5kIHJlZmluZWQgdXNpbmcgdGhlIGJhc2UgbW9kZWwgaXRzZWxmLlxuXG5UaGUgbW9kZWwgd2FzIHRyYWluZWQgdXNpbmcgUlMtUUxPUkErIG9uIDhLIHNlcXVlbmNlIGxlbmd0aHMgYW5kIHN1cHBvcnRzIHVwIHRvIDEyOEsgY29udGV4dCB3aW5kb3dzICh3aXRoIHByYWN0aWNhbCBwZXJmb3JtYW5jZSBhcm91bmQgMzJLKS4gSXQgaXMgb3B0aW1pemVkIGZvciBjcmVhdGl2ZSByb2xlcGxheSBhbmQgZGlhbG9ndWUgZ2VuZXJhdGlvbiwgd2l0aCBhbiBlbXBoYXNpcyBvbiBtaW5pbWl6aW5nIGNyb3NzLWNvbnRleHQgcmVwZXRpdGlvbiB3aGlsZSBwcmVzZXJ2aW5nIHN0eWxpc3RpYyBkaXZlcnNpdHkuIiwiY29udGV4dF9sZW5ndGgiOjMyNzY4LCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiT3RoZXIiLCJpbnN0cnVjdF90eXBlIjoiZGVlcHNlZWstcjEifSwicHJpY2luZyI6eyJwcm9tcHQiOiIwIiwiY29tcGxldGlvbiI6IjAiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjMyNzY4LCJtYXhfY29tcGxldGlvbl90b2tlbnMiOm51bGwsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJhZ2VudGljYS1vcmcvZGVlcGNvZGVyLTE0Yi1wcmV2aWV3OmZyZWUiLCJuYW1lIjoiQWdlbnRpY2E6IERlZXBjb2RlciAxNEIgUHJldmlldyAoZnJlZSkiLCJjcmVhdGVkIjoxNzQ0NTU1Mzk1LCJkZXNjcmlwdGlvbiI6IkRlZXBDb2Rlci0xNEItUHJldmlldyBpcyBhIDE0QiBwYXJhbWV0ZXIgY29kZSBnZW5lcmF0aW9uIG1vZGVsIGZpbmUtdHVuZWQgZnJvbSBEZWVwU2Vlay1SMS1EaXN0aWxsLVF3ZW4tMTRCIHVzaW5nIHJlaW5mb3JjZW1lbnQgbGVhcm5pbmcgd2l0aCBHUlBPKyBhbmQgaXRlcmF0aXZlIGNvbnRleHQgbGVuZ3RoZW5pbmcuIEl0IGlzIG9wdGltaXplZCBmb3IgbG9uZy1jb250ZXh0IHByb2dyYW0gc3ludGhlc2lzIGFuZCBhY2hpZXZlcyBzdHJvbmcgcGVyZm9ybWFuY2UgYWNyb3NzIGNvZGluZyBiZW5jaG1hcmtzLCBpbmNsdWRpbmcgNjAuNiUgb24gTGl2ZUNvZGVCZW5jaCB2NSwgY29tcGV0aXRpdmUgd2l0aCBtb2RlbHMgbGlrZSBvMy1NaW5pIiwiY29udGV4dF9sZW5ndGgiOjk2MDAwLCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiT3RoZXIiLCJpbnN0cnVjdF90eXBlIjoiZGVlcHNlZWstcjEifSwicHJpY2luZyI6eyJwcm9tcHQiOiIwIiwiY29tcGxldGlvbiI6IjAiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjk2MDAwLCJtYXhfY29tcGxldGlvbl90b2tlbnMiOm51bGwsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJtb29uc2hvdGFpL2tpbWktdmwtYTNiLXRoaW5raW5nOmZyZWUiLCJuYW1lIjoiTW9vbnNob3QgQUk6IEtpbWkgVkwgQTNCIFRoaW5raW5nIChmcmVlKSIsImNyZWF0ZWQiOjE3NDQzMDQ4NDEsImRlc2NyaXB0aW9uIjoiS2ltaS1WTCBpcyBhIGxpZ2h0d2VpZ2h0IE1peHR1cmUtb2YtRXhwZXJ0cyB2aXNpb24tbGFuZ3VhZ2UgbW9kZWwgdGhhdCBhY3RpdmF0ZXMgb25seSAyLjhCIHBhcmFtZXRlcnMgcGVyIHN0ZXAgd2hpbGUgZGVsaXZlcmluZyBzdHJvbmcgcGVyZm9ybWFuY2Ugb24gbXVsdGltb2RhbCByZWFzb25pbmcgYW5kIGxvbmctY29udGV4dCB0YXNrcy4gVGhlIEtpbWktVkwtQTNCLVRoaW5raW5nIHZhcmlhbnQsIGZpbmUtdHVuZWQgd2l0aCBjaGFpbi1vZi10aG91Z2h0IGFuZCByZWluZm9yY2VtZW50IGxlYXJuaW5nLCBleGNlbHMgaW4gbWF0aCBhbmQgdmlzdWFsIHJlYXNvbmluZyBiZW5jaG1hcmtzIGxpa2UgTWF0aFZpc2lvbiwgTU1NVSwgYW5kIE1hdGhWaXN0YSwgcml2YWxpbmcgbXVjaCBsYXJnZXIgbW9kZWxzIHN1Y2ggYXMgUXdlbjIuNS1WTC03QiBhbmQgR2VtbWEtMy0xMkIuIEl0IHN1cHBvcnRzIDEyOEsgY29udGV4dCBhbmQgaGlnaC1yZXNvbHV0aW9uIGlucHV0IHZpYSBpdHMgTW9vblZpVCBlbmNvZGVyLiIsImNvbnRleHRfbGVuZ3RoIjoxMzEwNzIsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQraW1hZ2UtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbImltYWdlIiwidGV4dCJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6Ik90aGVyIiwiaW5zdHJ1Y3RfdHlwZSI6bnVsbH0sInByaWNpbmciOnsicHJvbXB0IjoiMCIsImNvbXBsZXRpb24iOiIwIiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoxMzEwNzIsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6bnVsbCwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6IngtYWkvZ3Jvay0zLW1pbmktYmV0YSIsIm5hbWUiOiJ4QUk6IEdyb2sgMyBNaW5pIEJldGEiLCJjcmVhdGVkIjoxNzQ0MjQwMTk1LCJkZXNjcmlwdGlvbiI6Ikdyb2sgMyBNaW5pIGlzIGEgbGlnaHR3ZWlnaHQsIHNtYWxsZXIgdGhpbmtpbmcgbW9kZWwuIFVubGlrZSB0cmFkaXRpb25hbCBtb2RlbHMgdGhhdCBnZW5lcmF0ZSBhbnN3ZXJzIGltbWVkaWF0ZWx5LCBHcm9rIDMgTWluaSB0aGlua3MgYmVmb3JlIHJlc3BvbmRpbmcuIEl04oCZcyBpZGVhbCBmb3IgcmVhc29uaW5nLWhlYXZ5IHRhc2tzIHRoYXQgZG9u4oCZdCBkZW1hbmQgZXh0ZW5zaXZlIGRvbWFpbiBrbm93bGVkZ2UsIGFuZCBzaGluZXMgaW4gbWF0aC1zcGVjaWZpYyBhbmQgcXVhbnRpdGF0aXZlIHVzZSBjYXNlcywgc3VjaCBhcyBzb2x2aW5nIGNoYWxsZW5naW5nIHB1enpsZXMgb3IgbWF0aCBwcm9ibGVtcy5cblxuVHJhbnNwYXJlbnQgXCJ0aGlua2luZ1wiIHRyYWNlcyBhY2Nlc3NpYmxlLiBEZWZhdWx0cyB0byBsb3cgcmVhc29uaW5nLCBjYW4gYm9vc3Qgd2l0aCBzZXR0aW5nIGByZWFzb25pbmc6IHsgZWZmb3J0OiBcImhpZ2hcIiB9YFxuXG5Ob3RlOiBUaGF0IHRoZXJlIGFyZSB0d28geEFJIGVuZHBvaW50cyBmb3IgdGhpcyBtb2RlbC4gQnkgZGVmYXVsdCB3aGVuIHVzaW5nIHRoaXMgbW9kZWwgd2Ugd2lsbCBhbHdheXMgcm91dGUgeW91IHRvIHRoZSBiYXNlIGVuZHBvaW50LiBJZiB5b3Ugd2FudCB0aGUgZmFzdCBlbmRwb2ludCB5b3UgY2FuIGFkZCBgcHJvdmlkZXI6IHsgc29ydDogdGhyb3VnaHB1dH1gLCB0byBzb3J0IGJ5IHRocm91Z2hwdXQgaW5zdGVhZC4gXG4iLCJjb250ZXh0X2xlbmd0aCI6MTMxMDcyLCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiR3JvayIsImluc3RydWN0X3R5cGUiOm51bGx9LCJwcmljaW5nIjp7InByb21wdCI6IjAuMDAwMDAwMyIsImNvbXBsZXRpb24iOiIwLjAwMDAwMDUiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjEzMTA3MiwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjpudWxsLCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoieC1haS9ncm9rLTMtYmV0YSIsIm5hbWUiOiJ4QUk6IEdyb2sgMyBCZXRhIiwiY3JlYXRlZCI6MTc0NDI0MDA2OCwiZGVzY3JpcHRpb24iOiJHcm9rIDMgaXMgdGhlIGxhdGVzdCBtb2RlbCBmcm9tIHhBSS4gSXQncyB0aGVpciBmbGFnc2hpcCBtb2RlbCB0aGF0IGV4Y2VscyBhdCBlbnRlcnByaXNlIHVzZSBjYXNlcyBsaWtlIGRhdGEgZXh0cmFjdGlvbiwgY29kaW5nLCBhbmQgdGV4dCBzdW1tYXJpemF0aW9uLiBQb3NzZXNzZXMgZGVlcCBkb21haW4ga25vd2xlZGdlIGluIGZpbmFuY2UsIGhlYWx0aGNhcmUsIGxhdywgYW5kIHNjaWVuY2UuXG5cbkV4Y2VscyBpbiBzdHJ1Y3R1cmVkIHRhc2tzIGFuZCBiZW5jaG1hcmtzIGxpa2UgR1BRQSwgTENCLCBhbmQgTU1MVS1Qcm8gd2hlcmUgaXQgb3V0cGVyZm9ybXMgR3JvayAzIE1pbmkgZXZlbiBvbiBoaWdoIHRoaW5raW5nLiBcblxuTm90ZTogVGhhdCB0aGVyZSBhcmUgdHdvIHhBSSBlbmRwb2ludHMgZm9yIHRoaXMgbW9kZWwuIEJ5IGRlZmF1bHQgd2hlbiB1c2luZyB0aGlzIG1vZGVsIHdlIHdpbGwgYWx3YXlzIHJvdXRlIHlvdSB0byB0aGUgYmFzZSBlbmRwb2ludC4gSWYgeW91IHdhbnQgdGhlIGZhc3QgZW5kcG9pbnQgeW91IGNhbiBhZGQgYHByb3ZpZGVyOiB7IHNvcnQ6IHRocm91Z2hwdXR9YCwgdG8gc29ydCBieSB0aHJvdWdocHV0IGluc3RlYWQuIFxuIiwiY29udGV4dF9sZW5ndGgiOjEzMTA3MiwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dC0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6Ikdyb2siLCJpbnN0cnVjdF90eXBlIjpudWxsfSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMyIsImNvbXBsZXRpb24iOiIwLjAwMDAxNSIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6MTMxMDcyLCJtYXhfY29tcGxldGlvbl90b2tlbnMiOm51bGwsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJudmlkaWEvbGxhbWEtMy4xLW5lbW90cm9uLW5hbm8tOGItdjE6ZnJlZSIsIm5hbWUiOiJOVklESUE6IExsYW1hIDMuMSBOZW1vdHJvbiBOYW5vIDhCIHYxIChmcmVlKSIsImNyZWF0ZWQiOjE3NDQxMjM4NzMsImRlc2NyaXB0aW9uIjoiTGxhbWEtMy4xLU5lbW90cm9uLU5hbm8tOEItdjEgaXMgYSBjb21wYWN0IGxhcmdlIGxhbmd1YWdlIG1vZGVsIChMTE0pIGRlcml2ZWQgZnJvbSBNZXRhJ3MgTGxhbWEtMy4xLThCLUluc3RydWN0LCBzcGVjaWZpY2FsbHkgb3B0aW1pemVkIGZvciByZWFzb25pbmcgdGFza3MsIGNvbnZlcnNhdGlvbmFsIGludGVyYWN0aW9ucywgcmV0cmlldmFsLWF1Z21lbnRlZCBnZW5lcmF0aW9uIChSQUcpLCBhbmQgdG9vbC1jYWxsaW5nIGFwcGxpY2F0aW9ucy4gSXQgYmFsYW5jZXMgYWNjdXJhY3kgYW5kIGVmZmljaWVuY3ksIGZpdHRpbmcgY29tZm9ydGFibHkgb250byBhIHNpbmdsZSBjb25zdW1lci1ncmFkZSBSVFggR1BVIGZvciBsb2NhbCBkZXBsb3ltZW50LiBUaGUgbW9kZWwgc3VwcG9ydHMgZXh0ZW5kZWQgY29udGV4dCBsZW5ndGhzIG9mIHVwIHRvIDEyOEsgdG9rZW5zLlxuXG5Ob3RlOiB5b3UgbXVzdCBpbmNsdWRlIGBkZXRhaWxlZCB0aGlua2luZyBvbmAgaW4gdGhlIHN5c3RlbSBwcm9tcHQgdG8gZW5hYmxlIHJlYXNvbmluZy4gUGxlYXNlIHNlZSBbVXNhZ2UgUmVjb21tZW5kYXRpb25zXShodHRwczovL2h1Z2dpbmdmYWNlLmNvL252aWRpYS9MbGFtYS0zXzEtTmVtb3Ryb24tVWx0cmEtMjUzQi12MSNxdWljay1zdGFydC1hbmQtdXNhZ2UtcmVjb21tZW5kYXRpb25zKSBmb3IgbW9yZS4iLCJjb250ZXh0X2xlbmd0aCI6MTMxMDcyLCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiT3RoZXIiLCJpbnN0cnVjdF90eXBlIjpudWxsfSwicHJpY2luZyI6eyJwcm9tcHQiOiIwIiwiY29tcGxldGlvbiI6IjAiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjEzMTA3MiwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjpudWxsLCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoibnZpZGlhL2xsYW1hLTMuMy1uZW1vdHJvbi1zdXBlci00OWItdjE6ZnJlZSIsIm5hbWUiOiJOVklESUE6IExsYW1hIDMuMyBOZW1vdHJvbiBTdXBlciA0OUIgdjEgKGZyZWUpIiwiY3JlYXRlZCI6MTc0NDExOTQ5NCwiZGVzY3JpcHRpb24iOiJMbGFtYS0zLjMtTmVtb3Ryb24tU3VwZXItNDlCLXYxIGlzIGEgbGFyZ2UgbGFuZ3VhZ2UgbW9kZWwgKExMTSkgb3B0aW1pemVkIGZvciBhZHZhbmNlZCByZWFzb25pbmcsIGNvbnZlcnNhdGlvbmFsIGludGVyYWN0aW9ucywgcmV0cmlldmFsLWF1Z21lbnRlZCBnZW5lcmF0aW9uIChSQUcpLCBhbmQgdG9vbC1jYWxsaW5nIHRhc2tzLiBEZXJpdmVkIGZyb20gTWV0YSdzIExsYW1hLTMuMy03MEItSW5zdHJ1Y3QsIGl0IGVtcGxveXMgYSBOZXVyYWwgQXJjaGl0ZWN0dXJlIFNlYXJjaCAoTkFTKSBhcHByb2FjaCwgc2lnbmlmaWNhbnRseSBlbmhhbmNpbmcgZWZmaWNpZW5jeSBhbmQgcmVkdWNpbmcgbWVtb3J5IHJlcXVpcmVtZW50cy4gVGhpcyBhbGxvd3MgdGhlIG1vZGVsIHRvIHN1cHBvcnQgYSBjb250ZXh0IGxlbmd0aCBvZiB1cCB0byAxMjhLIHRva2VucyBhbmQgZml0IGVmZmljaWVudGx5IG9uIHNpbmdsZSBoaWdoLXBlcmZvcm1hbmNlIEdQVXMsIHN1Y2ggYXMgTlZJRElBIEgyMDAuXG5cbk5vdGU6IHlvdSBtdXN0IGluY2x1ZGUgYGRldGFpbGVkIHRoaW5raW5nIG9uYCBpbiB0aGUgc3lzdGVtIHByb21wdCB0byBlbmFibGUgcmVhc29uaW5nLiBQbGVhc2Ugc2VlIFtVc2FnZSBSZWNvbW1lbmRhdGlvbnNdKGh0dHBzOi8vaHVnZ2luZ2ZhY2UuY28vbnZpZGlhL0xsYW1hLTNfMS1OZW1vdHJvbi1VbHRyYS0yNTNCLXYxI3F1aWNrLXN0YXJ0LWFuZC11c2FnZS1yZWNvbW1lbmRhdGlvbnMpIGZvciBtb3JlLiIsImNvbnRleHRfbGVuZ3RoIjoxMzEwNzIsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJPdGhlciIsImluc3RydWN0X3R5cGUiOm51bGx9LCJwcmljaW5nIjp7InByb21wdCI6IjAiLCJjb21wbGV0aW9uIjoiMCIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6MTMxMDcyLCJtYXhfY29tcGxldGlvbl90b2tlbnMiOm51bGwsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJudmlkaWEvbGxhbWEtMy4xLW5lbW90cm9uLXVsdHJhLTI1M2ItdjE6ZnJlZSIsIm5hbWUiOiJOVklESUE6IExsYW1hIDMuMSBOZW1vdHJvbiBVbHRyYSAyNTNCIHYxIChmcmVlKSIsImNyZWF0ZWQiOjE3NDQxMTUwNTksImRlc2NyaXB0aW9uIjoiTGxhbWEtMy4xLU5lbW90cm9uLVVsdHJhLTI1M0ItdjEgaXMgYSBsYXJnZSBsYW5ndWFnZSBtb2RlbCAoTExNKSBvcHRpbWl6ZWQgZm9yIGFkdmFuY2VkIHJlYXNvbmluZywgaHVtYW4taW50ZXJhY3RpdmUgY2hhdCwgcmV0cmlldmFsLWF1Z21lbnRlZCBnZW5lcmF0aW9uIChSQUcpLCBhbmQgdG9vbC1jYWxsaW5nIHRhc2tzLiBEZXJpdmVkIGZyb20gTWV0YeKAmXMgTGxhbWEtMy4xLTQwNUItSW5zdHJ1Y3QsIGl0IGhhcyBiZWVuIHNpZ25pZmljYW50bHkgY3VzdG9taXplZCB1c2luZyBOZXVyYWwgQXJjaGl0ZWN0dXJlIFNlYXJjaCAoTkFTKSwgcmVzdWx0aW5nIGluIGVuaGFuY2VkIGVmZmljaWVuY3ksIHJlZHVjZWQgbWVtb3J5IHVzYWdlLCBhbmQgaW1wcm92ZWQgaW5mZXJlbmNlIGxhdGVuY3kuIFRoZSBtb2RlbCBzdXBwb3J0cyBhIGNvbnRleHQgbGVuZ3RoIG9mIHVwIHRvIDEyOEsgdG9rZW5zIGFuZCBjYW4gb3BlcmF0ZSBlZmZpY2llbnRseSBvbiBhbiA4eCBOVklESUEgSDEwMCBub2RlLlxuXG5Ob3RlOiB5b3UgbXVzdCBpbmNsdWRlIGBkZXRhaWxlZCB0aGlua2luZyBvbmAgaW4gdGhlIHN5c3RlbSBwcm9tcHQgdG8gZW5hYmxlIHJlYXNvbmluZy4gUGxlYXNlIHNlZSBbVXNhZ2UgUmVjb21tZW5kYXRpb25zXShodHRwczovL2h1Z2dpbmdmYWNlLmNvL252aWRpYS9MbGFtYS0zXzEtTmVtb3Ryb24tVWx0cmEtMjUzQi12MSNxdWljay1zdGFydC1hbmQtdXNhZ2UtcmVjb21tZW5kYXRpb25zKSBmb3IgbW9yZS4iLCJjb250ZXh0X2xlbmd0aCI6MTMxMDcyLCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiTGxhbWEzIiwiaW5zdHJ1Y3RfdHlwZSI6bnVsbH0sInByaWNpbmciOnsicHJvbXB0IjoiMCIsImNvbXBsZXRpb24iOiIwIiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoxMzEwNzIsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6bnVsbCwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6Im1ldGEtbGxhbWEvbGxhbWEtNC1tYXZlcmljazpmcmVlIiwibmFtZSI6Ik1ldGE6IExsYW1hIDQgTWF2ZXJpY2sgKGZyZWUpIiwiY3JlYXRlZCI6MTc0Mzg4MTgyMiwiZGVzY3JpcHRpb24iOiJMbGFtYSA0IE1hdmVyaWNrIDE3QiBJbnN0cnVjdCAoMTI4RSkgaXMgYSBoaWdoLWNhcGFjaXR5IG11bHRpbW9kYWwgbGFuZ3VhZ2UgbW9kZWwgZnJvbSBNZXRhLCBidWlsdCBvbiBhIG1peHR1cmUtb2YtZXhwZXJ0cyAoTW9FKSBhcmNoaXRlY3R1cmUgd2l0aCAxMjggZXhwZXJ0cyBhbmQgMTcgYmlsbGlvbiBhY3RpdmUgcGFyYW1ldGVycyBwZXIgZm9yd2FyZCBwYXNzICg0MDBCIHRvdGFsKS4gSXQgc3VwcG9ydHMgbXVsdGlsaW5ndWFsIHRleHQgYW5kIGltYWdlIGlucHV0LCBhbmQgcHJvZHVjZXMgbXVsdGlsaW5ndWFsIHRleHQgYW5kIGNvZGUgb3V0cHV0IGFjcm9zcyAxMiBzdXBwb3J0ZWQgbGFuZ3VhZ2VzLiBPcHRpbWl6ZWQgZm9yIHZpc2lvbi1sYW5ndWFnZSB0YXNrcywgTWF2ZXJpY2sgaXMgaW5zdHJ1Y3Rpb24tdHVuZWQgZm9yIGFzc2lzdGFudC1saWtlIGJlaGF2aW9yLCBpbWFnZSByZWFzb25pbmcsIGFuZCBnZW5lcmFsLXB1cnBvc2UgbXVsdGltb2RhbCBpbnRlcmFjdGlvbi5cblxuTWF2ZXJpY2sgZmVhdHVyZXMgZWFybHkgZnVzaW9uIGZvciBuYXRpdmUgbXVsdGltb2RhbGl0eSBhbmQgYSAxIG1pbGxpb24gdG9rZW4gY29udGV4dCB3aW5kb3cuIEl0IHdhcyB0cmFpbmVkIG9uIGEgY3VyYXRlZCBtaXh0dXJlIG9mIHB1YmxpYywgbGljZW5zZWQsIGFuZCBNZXRhLXBsYXRmb3JtIGRhdGEsIGNvdmVyaW5nIH4yMiB0cmlsbGlvbiB0b2tlbnMsIHdpdGggYSBrbm93bGVkZ2UgY3V0b2ZmIGluIEF1Z3VzdCAyMDI0LiBSZWxlYXNlZCBvbiBBcHJpbCA1LCAyMDI1IHVuZGVyIHRoZSBMbGFtYSA0IENvbW11bml0eSBMaWNlbnNlLCBNYXZlcmljayBpcyBzdWl0ZWQgZm9yIHJlc2VhcmNoIGFuZCBjb21tZXJjaWFsIGFwcGxpY2F0aW9ucyByZXF1aXJpbmcgYWR2YW5jZWQgbXVsdGltb2RhbCB1bmRlcnN0YW5kaW5nIGFuZCBoaWdoIG1vZGVsIHRocm91Z2hwdXQuIiwiY29udGV4dF9sZW5ndGgiOjI1NjAwMCwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dCtpbWFnZS0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCIsImltYWdlIl0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiT3RoZXIiLCJpbnN0cnVjdF90eXBlIjpudWxsfSwicHJpY2luZyI6eyJwcm9tcHQiOiIwIiwiY29tcGxldGlvbiI6IjAiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjI1NjAwMCwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjpudWxsLCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoibWV0YS1sbGFtYS9sbGFtYS00LW1hdmVyaWNrIiwibmFtZSI6Ik1ldGE6IExsYW1hIDQgTWF2ZXJpY2siLCJjcmVhdGVkIjoxNzQzODgxODIyLCJkZXNjcmlwdGlvbiI6IkxsYW1hIDQgTWF2ZXJpY2sgMTdCIEluc3RydWN0ICgxMjhFKSBpcyBhIGhpZ2gtY2FwYWNpdHkgbXVsdGltb2RhbCBsYW5ndWFnZSBtb2RlbCBmcm9tIE1ldGEsIGJ1aWx0IG9uIGEgbWl4dHVyZS1vZi1leHBlcnRzIChNb0UpIGFyY2hpdGVjdHVyZSB3aXRoIDEyOCBleHBlcnRzIGFuZCAxNyBiaWxsaW9uIGFjdGl2ZSBwYXJhbWV0ZXJzIHBlciBmb3J3YXJkIHBhc3MgKDQwMEIgdG90YWwpLiBJdCBzdXBwb3J0cyBtdWx0aWxpbmd1YWwgdGV4dCBhbmQgaW1hZ2UgaW5wdXQsIGFuZCBwcm9kdWNlcyBtdWx0aWxpbmd1YWwgdGV4dCBhbmQgY29kZSBvdXRwdXQgYWNyb3NzIDEyIHN1cHBvcnRlZCBsYW5ndWFnZXMuIE9wdGltaXplZCBmb3IgdmlzaW9uLWxhbmd1YWdlIHRhc2tzLCBNYXZlcmljayBpcyBpbnN0cnVjdGlvbi10dW5lZCBmb3IgYXNzaXN0YW50LWxpa2UgYmVoYXZpb3IsIGltYWdlIHJlYXNvbmluZywgYW5kIGdlbmVyYWwtcHVycG9zZSBtdWx0aW1vZGFsIGludGVyYWN0aW9uLlxuXG5NYXZlcmljayBmZWF0dXJlcyBlYXJseSBmdXNpb24gZm9yIG5hdGl2ZSBtdWx0aW1vZGFsaXR5IGFuZCBhIDEgbWlsbGlvbiB0b2tlbiBjb250ZXh0IHdpbmRvdy4gSXQgd2FzIHRyYWluZWQgb24gYSBjdXJhdGVkIG1peHR1cmUgb2YgcHVibGljLCBsaWNlbnNlZCwgYW5kIE1ldGEtcGxhdGZvcm0gZGF0YSwgY292ZXJpbmcgfjIyIHRyaWxsaW9uIHRva2Vucywgd2l0aCBhIGtub3dsZWRnZSBjdXRvZmYgaW4gQXVndXN0IDIwMjQuIFJlbGVhc2VkIG9uIEFwcmlsIDUsIDIwMjUgdW5kZXIgdGhlIExsYW1hIDQgQ29tbXVuaXR5IExpY2Vuc2UsIE1hdmVyaWNrIGlzIHN1aXRlZCBmb3IgcmVzZWFyY2ggYW5kIGNvbW1lcmNpYWwgYXBwbGljYXRpb25zIHJlcXVpcmluZyBhZHZhbmNlZCBtdWx0aW1vZGFsIHVuZGVyc3RhbmRpbmcgYW5kIGhpZ2ggbW9kZWwgdGhyb3VnaHB1dC4iLCJjb250ZXh0X2xlbmd0aCI6MTA0ODU3NiwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dCtpbWFnZS0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCIsImltYWdlIl0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiT3RoZXIiLCJpbnN0cnVjdF90eXBlIjpudWxsfSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMDE3IiwiY29tcGxldGlvbiI6IjAuMDAwMDAwNiIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwLjAwMDY2ODQiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoxMDQ4NTc2LCJtYXhfY29tcGxldGlvbl90b2tlbnMiOjE2Mzg0LCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoibWV0YS1sbGFtYS9sbGFtYS00LXNjb3V0OmZyZWUiLCJuYW1lIjoiTWV0YTogTGxhbWEgNCBTY291dCAoZnJlZSkiLCJjcmVhdGVkIjoxNzQzODgxNTE5LCJkZXNjcmlwdGlvbiI6IkxsYW1hIDQgU2NvdXQgMTdCIEluc3RydWN0ICgxNkUpIGlzIGEgbWl4dHVyZS1vZi1leHBlcnRzIChNb0UpIGxhbmd1YWdlIG1vZGVsIGRldmVsb3BlZCBieSBNZXRhLCBhY3RpdmF0aW5nIDE3IGJpbGxpb24gcGFyYW1ldGVycyBvdXQgb2YgYSB0b3RhbCBvZiAxMDlCLiBJdCBzdXBwb3J0cyBuYXRpdmUgbXVsdGltb2RhbCBpbnB1dCAodGV4dCBhbmQgaW1hZ2UpIGFuZCBtdWx0aWxpbmd1YWwgb3V0cHV0ICh0ZXh0IGFuZCBjb2RlKSBhY3Jvc3MgMTIgc3VwcG9ydGVkIGxhbmd1YWdlcy4gRGVzaWduZWQgZm9yIGFzc2lzdGFudC1zdHlsZSBpbnRlcmFjdGlvbiBhbmQgdmlzdWFsIHJlYXNvbmluZywgU2NvdXQgdXNlcyAxNiBleHBlcnRzIHBlciBmb3J3YXJkIHBhc3MgYW5kIGZlYXR1cmVzIGEgY29udGV4dCBsZW5ndGggb2YgMTAgbWlsbGlvbiB0b2tlbnMsIHdpdGggYSB0cmFpbmluZyBjb3JwdXMgb2YgfjQwIHRyaWxsaW9uIHRva2Vucy5cblxuQnVpbHQgZm9yIGhpZ2ggZWZmaWNpZW5jeSBhbmQgbG9jYWwgb3IgY29tbWVyY2lhbCBkZXBsb3ltZW50LCBMbGFtYSA0IFNjb3V0IGluY29ycG9yYXRlcyBlYXJseSBmdXNpb24gZm9yIHNlYW1sZXNzIG1vZGFsaXR5IGludGVncmF0aW9uLiBJdCBpcyBpbnN0cnVjdGlvbi10dW5lZCBmb3IgdXNlIGluIG11bHRpbGluZ3VhbCBjaGF0LCBjYXB0aW9uaW5nLCBhbmQgaW1hZ2UgdW5kZXJzdGFuZGluZyB0YXNrcy4gUmVsZWFzZWQgdW5kZXIgdGhlIExsYW1hIDQgQ29tbXVuaXR5IExpY2Vuc2UsIGl0IHdhcyBsYXN0IHRyYWluZWQgb24gZGF0YSB1cCB0byBBdWd1c3QgMjAyNCBhbmQgbGF1bmNoZWQgcHVibGljbHkgb24gQXByaWwgNSwgMjAyNS4iLCJjb250ZXh0X2xlbmd0aCI6NTEyMDAwLCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0K2ltYWdlLT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0IiwiaW1hZ2UiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJPdGhlciIsImluc3RydWN0X3R5cGUiOm51bGx9LCJwcmljaW5nIjp7InByb21wdCI6IjAiLCJjb21wbGV0aW9uIjoiMCIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6NTEyMDAwLCJtYXhfY29tcGxldGlvbl90b2tlbnMiOm51bGwsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJtZXRhLWxsYW1hL2xsYW1hLTQtc2NvdXQiLCJuYW1lIjoiTWV0YTogTGxhbWEgNCBTY291dCIsImNyZWF0ZWQiOjE3NDM4ODE1MTksImRlc2NyaXB0aW9uIjoiTGxhbWEgNCBTY291dCAxN0IgSW5zdHJ1Y3QgKDE2RSkgaXMgYSBtaXh0dXJlLW9mLWV4cGVydHMgKE1vRSkgbGFuZ3VhZ2UgbW9kZWwgZGV2ZWxvcGVkIGJ5IE1ldGEsIGFjdGl2YXRpbmcgMTcgYmlsbGlvbiBwYXJhbWV0ZXJzIG91dCBvZiBhIHRvdGFsIG9mIDEwOUIuIEl0IHN1cHBvcnRzIG5hdGl2ZSBtdWx0aW1vZGFsIGlucHV0ICh0ZXh0IGFuZCBpbWFnZSkgYW5kIG11bHRpbGluZ3VhbCBvdXRwdXQgKHRleHQgYW5kIGNvZGUpIGFjcm9zcyAxMiBzdXBwb3J0ZWQgbGFuZ3VhZ2VzLiBEZXNpZ25lZCBmb3IgYXNzaXN0YW50LXN0eWxlIGludGVyYWN0aW9uIGFuZCB2aXN1YWwgcmVhc29uaW5nLCBTY291dCB1c2VzIDE2IGV4cGVydHMgcGVyIGZvcndhcmQgcGFzcyBhbmQgZmVhdHVyZXMgYSBjb250ZXh0IGxlbmd0aCBvZiAxMCBtaWxsaW9uIHRva2Vucywgd2l0aCBhIHRyYWluaW5nIGNvcnB1cyBvZiB+NDAgdHJpbGxpb24gdG9rZW5zLlxuXG5CdWlsdCBmb3IgaGlnaCBlZmZpY2llbmN5IGFuZCBsb2NhbCBvciBjb21tZXJjaWFsIGRlcGxveW1lbnQsIExsYW1hIDQgU2NvdXQgaW5jb3Jwb3JhdGVzIGVhcmx5IGZ1c2lvbiBmb3Igc2VhbWxlc3MgbW9kYWxpdHkgaW50ZWdyYXRpb24uIEl0IGlzIGluc3RydWN0aW9uLXR1bmVkIGZvciB1c2UgaW4gbXVsdGlsaW5ndWFsIGNoYXQsIGNhcHRpb25pbmcsIGFuZCBpbWFnZSB1bmRlcnN0YW5kaW5nIHRhc2tzLiBSZWxlYXNlZCB1bmRlciB0aGUgTGxhbWEgNCBDb21tdW5pdHkgTGljZW5zZSwgaXQgd2FzIGxhc3QgdHJhaW5lZCBvbiBkYXRhIHVwIHRvIEF1Z3VzdCAyMDI0IGFuZCBsYXVuY2hlZCBwdWJsaWNseSBvbiBBcHJpbCA1LCAyMDI1LiIsImNvbnRleHRfbGVuZ3RoIjoxMDQ4NTc2LCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0K2ltYWdlLT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0IiwiaW1hZ2UiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJPdGhlciIsImluc3RydWN0X3R5cGUiOm51bGx9LCJwcmljaW5nIjp7InByb21wdCI6IjAuMDAwMDAwMDgiLCJjb21wbGV0aW9uIjoiMC4wMDAwMDAzIiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoxMDQ4NTc2LCJtYXhfY29tcGxldGlvbl90b2tlbnMiOjEwNDg1NzYsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJhbGwtaGFuZHMvb3BlbmhhbmRzLWxtLTMyYi12MC4xIiwibmFtZSI6Ik9wZW5IYW5kcyBMTSAzMkIgVjAuMSIsImNyZWF0ZWQiOjE3NDM2MTMwMTMsImRlc2NyaXB0aW9uIjoiT3BlbkhhbmRzIExNIHYwLjEgaXMgYSAzMkIgb3Blbi1zb3VyY2UgY29kaW5nIG1vZGVsIGZpbmUtdHVuZWQgZnJvbSBRd2VuMi41LUNvZGVyLTMyQi1JbnN0cnVjdCB1c2luZyByZWluZm9yY2VtZW50IGxlYXJuaW5nIHRlY2huaXF1ZXMgb3V0bGluZWQgaW4gU1dFLUd5bS4gSXQgaXMgb3B0aW1pemVkIGZvciBhdXRvbm9tb3VzIHNvZnR3YXJlIGRldmVsb3BtZW50IGFnZW50cyBhbmQgYWNoaWV2ZXMgc3Ryb25nIHBlcmZvcm1hbmNlIG9uIFNXRS1CZW5jaCBWZXJpZmllZCwgd2l0aCBhIDM3LjIlIHJlc29sdmUgcmF0ZS4gVGhlIG1vZGVsIHN1cHBvcnRzIGEgMTI4SyB0b2tlbiBjb250ZXh0IHdpbmRvdywgbWFraW5nIGl0IHdlbGwtc3VpdGVkIGZvciBsb25nLWhvcml6b24gY29kZSByZWFzb25pbmcgYW5kIGxhcmdlIGNvZGViYXNlIHRhc2tzLlxuXG5PcGVuSGFuZHMgTE0gaXMgZGVzaWduZWQgZm9yIGxvY2FsIGRlcGxveW1lbnQgYW5kIHJ1bnMgb24gY29uc3VtZXItZ3JhZGUgR1BVcyBzdWNoIGFzIGEgc2luZ2xlIDMwOTAuIEl0IGVuYWJsZXMgZnVsbHkgb2ZmbGluZSBhZ2VudCB3b3JrZmxvd3Mgd2l0aG91dCBkZXBlbmRlbmN5IG9uIHByb3ByaWV0YXJ5IEFQSXMuIFRoaXMgcmVsZWFzZSBpcyBpbnRlbmRlZCBhcyBhIHJlc2VhcmNoIHByZXZpZXcsIGFuZCBmdXR1cmUgdXBkYXRlcyBhaW0gdG8gaW1wcm92ZSBnZW5lcmFsaXphYmlsaXR5LCByZWR1Y2UgcmVwZXRpdGlvbiwgYW5kIG9mZmVyIHNtYWxsZXIgdmFyaWFudHMuIiwiY29udGV4dF9sZW5ndGgiOjE2Mzg0LCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiT3RoZXIiLCJpbnN0cnVjdF90eXBlIjpudWxsfSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMjYiLCJjb21wbGV0aW9uIjoiMC4wMDAwMDM0IiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoxNjM4NCwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjo0MDk2LCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoibWlzdHJhbC9taW5pc3RyYWwtOGIiLCJuYW1lIjoiTWlzdHJhbDogTWluaXN0cmFsIDhCIiwiY3JlYXRlZCI6MTc0MzQzMDAyMSwiZGVzY3JpcHRpb24iOiJNaW5pc3RyYWwgOEIgaXMgYSBzdGF0ZS1vZi10aGUtYXJ0IGxhbmd1YWdlIG1vZGVsIG9wdGltaXplZCBmb3Igb24tZGV2aWNlIGFuZCBlZGdlIGNvbXB1dGluZy4gRGVzaWduZWQgZm9yIGVmZmljaWVuY3kgaW4ga25vd2xlZGdlLWludGVuc2l2ZSB0YXNrcywgY29tbW9uc2Vuc2UgcmVhc29uaW5nLCBhbmQgZnVuY3Rpb24tY2FsbGluZywgaXQgZmVhdHVyZXMgYSBzcGVjaWFsaXplZCBpbnRlcmxlYXZlZCBzbGlkaW5nLXdpbmRvdyBhdHRlbnRpb24gbWVjaGFuaXNtLCBlbmFibGluZyBmYXN0ZXIgYW5kIG1vcmUgbWVtb3J5LWVmZmljaWVudCBpbmZlcmVuY2UuIE1pbmlzdHJhbCA4QiBleGNlbHMgaW4gbG9jYWwsIGxvdy1sYXRlbmN5IGFwcGxpY2F0aW9ucyBzdWNoIGFzIG9mZmxpbmUgdHJhbnNsYXRpb24sIHNtYXJ0IGFzc2lzdGFudHMsIGF1dG9ub21vdXMgcm9ib3RpY3MsIGFuZCBsb2NhbCBhbmFseXRpY3MuXG5cblRoZSBtb2RlbCBzdXBwb3J0cyB1cCB0byAxMjhrIGNvbnRleHQgbGVuZ3RoIGFuZCBjYW4gZnVuY3Rpb24gYXMgYSBwZXJmb3JtYW50IGludGVybWVkaWFyeSBpbiBtdWx0aS1zdGVwIGFnZW50aWMgd29ya2Zsb3dzLCBlZmZpY2llbnRseSBoYW5kbGluZyB0YXNrcyBsaWtlIGlucHV0IHBhcnNpbmcsIEFQSSBjYWxscywgYW5kIHRhc2sgcm91dGluZy4gSXQgY29uc2lzdGVudGx5IG91dHBlcmZvcm1zIGNvbXBhcmFibGUgbW9kZWxzIGxpa2UgTWlzdHJhbCA3QiBhY3Jvc3MgYmVuY2htYXJrcywgbWFraW5nIGl0IHBhcnRpY3VsYXJseSBzdWl0YWJsZSBmb3IgY29tcHV0ZS1lZmZpY2llbnQsIHByaXZhY3ktZm9jdXNlZCBzY2VuYXJpb3MuIiwiY29udGV4dF9sZW5ndGgiOjEzMTA3MiwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dC0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6Ik1pc3RyYWwiLCJpbnN0cnVjdF90eXBlIjpudWxsfSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMDEiLCJjb21wbGV0aW9uIjoiMC4wMDAwMDAxIiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoxMzEwNzIsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6bnVsbCwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6ImRlZXBzZWVrL2RlZXBzZWVrLXYzLWJhc2U6ZnJlZSIsIm5hbWUiOiJEZWVwU2VlazogRGVlcFNlZWsgVjMgQmFzZSAoZnJlZSkiLCJjcmVhdGVkIjoxNzQzMjcyMDIzLCJkZXNjcmlwdGlvbiI6Ik5vdGUgdGhhdCB0aGlzIGlzIGEgYmFzZSBtb2RlbCBtb3N0bHkgbWVhbnQgZm9yIHRlc3RpbmcsIHlvdSBuZWVkIHRvIHByb3ZpZGUgZGV0YWlsZWQgcHJvbXB0cyBmb3IgdGhlIG1vZGVsIHRvIHJldHVybiB1c2VmdWwgcmVzcG9uc2VzLiBcblxuRGVlcFNlZWstVjMgQmFzZSBpcyBhIDY3MUIgcGFyYW1ldGVyIG9wZW4gTWl4dHVyZS1vZi1FeHBlcnRzIChNb0UpIGxhbmd1YWdlIG1vZGVsIHdpdGggMzdCIGFjdGl2ZSBwYXJhbWV0ZXJzIHBlciBmb3J3YXJkIHBhc3MgYW5kIGEgY29udGV4dCBsZW5ndGggb2YgMTI4SyB0b2tlbnMuIFRyYWluZWQgb24gMTQuOFQgdG9rZW5zIHVzaW5nIEZQOCBtaXhlZCBwcmVjaXNpb24sIGl0IGFjaGlldmVzIGhpZ2ggdHJhaW5pbmcgZWZmaWNpZW5jeSBhbmQgc3RhYmlsaXR5LCB3aXRoIHN0cm9uZyBwZXJmb3JtYW5jZSBhY3Jvc3MgbGFuZ3VhZ2UsIHJlYXNvbmluZywgbWF0aCwgYW5kIGNvZGluZyB0YXNrcy4gXG5cbkRlZXBTZWVrLVYzIEJhc2UgaXMgdGhlIHByZS10cmFpbmVkIG1vZGVsIGJlaGluZCBbRGVlcFNlZWsgVjNdKC9kZWVwc2Vlay9kZWVwc2Vlay1jaGF0LXYzKSIsImNvbnRleHRfbGVuZ3RoIjoxNjM4NDAsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJEZWVwU2VlayIsImluc3RydWN0X3R5cGUiOm51bGx9LCJwcmljaW5nIjp7InByb21wdCI6IjAiLCJjb21wbGV0aW9uIjoiMCIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6MTYzODQwLCJtYXhfY29tcGxldGlvbl90b2tlbnMiOm51bGwsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJzY2IxMHgvbGxhbWEzLjEtdHlwaG9vbjItOGItaW5zdHJ1Y3QiLCJuYW1lIjoiVHlwaG9vbjIgOEIgSW5zdHJ1Y3QiLCJjcmVhdGVkIjoxNzQzMTk2NTExLCJkZXNjcmlwdGlvbiI6IkxsYW1hMy4xLVR5cGhvb24yLThCLUluc3RydWN0IGlzIGEgVGhhaS1FbmdsaXNoIGluc3RydWN0aW9uLXR1bmVkIG1vZGVsIHdpdGggOCBiaWxsaW9uIHBhcmFtZXRlcnMsIGJ1aWx0IG9uIExsYW1hIDMuMS4gSXQgc2lnbmlmaWNhbnRseSBpbXByb3ZlcyBvdmVyIGl0cyBiYXNlIG1vZGVsIGluIFRoYWkgcmVhc29uaW5nLCBpbnN0cnVjdGlvbi1mb2xsb3dpbmcsIGFuZCBmdW5jdGlvbi1jYWxsaW5nIHRhc2tzLCB3aGlsZSBtYWludGFpbmluZyBjb21wZXRpdGl2ZSBFbmdsaXNoIHBlcmZvcm1hbmNlLiBUaGUgbW9kZWwgaXMgb3B0aW1pemVkIGZvciBiaWxpbmd1YWwgaW50ZXJhY3Rpb24gYW5kIHBlcmZvcm1zIHdlbGwgb24gVGhhaS1FbmdsaXNoIGNvZGUtc3dpdGNoaW5nLCBNVC1CZW5jaCwgSUZFdmFsLCBhbmQgdG9vbC11c2UgYmVuY2htYXJrcy5cblxuRGVzcGl0ZSBpdHMgc21hbGxlciBzaXplLCBpdCBkZW1vbnN0cmF0ZXMgc3Ryb25nIGdlbmVyYWxpemF0aW9uIGFjcm9zcyBtYXRoLCBjb2RpbmcsIGFuZCBtdWx0aWxpbmd1YWwgYmVuY2htYXJrcywgb3V0cGVyZm9ybWluZyBjb21wYXJhYmxlIDhCIG1vZGVscyBhY3Jvc3MgbW9zdCBUaGFpLXNwZWNpZmljIHRhc2tzLiBGdWxsIGJlbmNobWFyayByZXN1bHRzIGFuZCBtZXRob2RvbG9neSBhcmUgYXZhaWxhYmxlIGluIHRoZSBbdGVjaG5pY2FsIHJlcG9ydC5dKGh0dHBzOi8vYXJ4aXYub3JnL2Ficy8yNDEyLjEzNzAyKSIsImNvbnRleHRfbGVuZ3RoIjo4MTkyLCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiTGxhbWEzIiwiaW5zdHJ1Y3RfdHlwZSI6ImxsYW1hMyJ9LCJwcmljaW5nIjp7InByb21wdCI6IjAuMDAwMDAwMTgiLCJjb21wbGV0aW9uIjoiMC4wMDAwMDAxOCIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6ODE5MiwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjpudWxsLCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoic2NiMTB4L2xsYW1hMy4xLXR5cGhvb24yLTcwYi1pbnN0cnVjdCIsIm5hbWUiOiJUeXBob29uMiA3MEIgSW5zdHJ1Y3QiLCJjcmVhdGVkIjoxNzQzMTk2MTcwLCJkZXNjcmlwdGlvbiI6IkxsYW1hMy4xLVR5cGhvb24yLTcwQi1JbnN0cnVjdCBpcyBhIFRoYWktRW5nbGlzaCBpbnN0cnVjdGlvbi10dW5lZCBsYW5ndWFnZSBtb2RlbCB3aXRoIDcwIGJpbGxpb24gcGFyYW1ldGVycywgYnVpbHQgb24gTGxhbWEgMy4xLiBJdCBkZW1vbnN0cmF0ZXMgc3Ryb25nIHBlcmZvcm1hbmNlIGFjcm9zcyBnZW5lcmFsIGluc3RydWN0aW9uLWZvbGxvd2luZywgbWF0aCwgY29kaW5nLCBhbmQgdG9vbC11c2UgdGFza3MsIHdpdGggc3RhdGUtb2YtdGhlLWFydCByZXN1bHRzIGluIFRoYWktc3BlY2lmaWMgYmVuY2htYXJrcyBzdWNoIGFzIElGRXZhbCwgTVQtQmVuY2gsIGFuZCBUaGFpLUVuZ2xpc2ggY29kZS1zd2l0Y2hpbmcuXG5cblRoZSBtb2RlbCBleGNlbHMgaW4gYmlsaW5ndWFsIHJlYXNvbmluZyBhbmQgZnVuY3Rpb24tY2FsbGluZyBzY2VuYXJpb3MsIG9mZmVyaW5nIGhpZ2ggYWNjdXJhY3kgYWNyb3NzIGRpdmVyc2UgZG9tYWlucy4gQ29tcGFyYXRpdmUgZXZhbHVhdGlvbnMgc2hvdyBjb25zaXN0ZW50IGltcHJvdmVtZW50cyBvdmVyIHByaW9yIFRoYWkgTExNcyBhbmQgb3RoZXIgTGxhbWEtYmFzZWQgYmFzZWxpbmVzLiBGdWxsIHJlc3VsdHMgYW5kIG1ldGhvZG9sb2d5IGFyZSBhdmFpbGFibGUgaW4gdGhlIFt0ZWNobmljYWwgcmVwb3J0Ll0oaHR0cHM6Ly9hcnhpdi5vcmcvYWJzLzI0MTIuMTM3MDIpIiwiY29udGV4dF9sZW5ndGgiOjgxOTIsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJMbGFtYTMiLCJpbnN0cnVjdF90eXBlIjoibGxhbWEzIn0sInByaWNpbmciOnsicHJvbXB0IjoiMC4wMDAwMDA4OCIsImNvbXBsZXRpb24iOiIwLjAwMDAwMDg4IiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjo4MTkyLCJtYXhfY29tcGxldGlvbl90b2tlbnMiOm51bGwsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJhbGxlbmFpL21vbG1vLTdiLWQ6ZnJlZSIsIm5hbWUiOiJBbGxlbkFJOiBNb2xtbyA3QiBEIChmcmVlKSIsImNyZWF0ZWQiOjE3NDMwMjMyNDcsImRlc2NyaXB0aW9uIjoiTW9sbW8gaXMgYSBmYW1pbHkgb2Ygb3BlbiB2aXNpb24tbGFuZ3VhZ2UgbW9kZWxzIGRldmVsb3BlZCBieSB0aGUgQWxsZW4gSW5zdGl0dXRlIGZvciBBSS4gTW9sbW8gbW9kZWxzIGFyZSB0cmFpbmVkIG9uIFBpeE1vLCBhIGRhdGFzZXQgb2YgMSBtaWxsaW9uLCBoaWdobHktY3VyYXRlZCBpbWFnZS10ZXh0IHBhaXJzLiBJdCBoYXMgc3RhdGUtb2YtdGhlLWFydCBwZXJmb3JtYW5jZSBhbW9uZyBtdWx0aW1vZGFsIG1vZGVscyB3aXRoIGEgc2ltaWxhciBzaXplIHdoaWxlIGJlaW5nIGZ1bGx5IG9wZW4tc291cmNlLiBZb3UgY2FuIGZpbmQgYWxsIG1vZGVscyBpbiB0aGUgTW9sbW8gZmFtaWx5IFtoZXJlXShodHRwczovL2h1Z2dpbmdmYWNlLmNvL2NvbGxlY3Rpb25zL2FsbGVuYWkvbW9sbW8tNjZmMzc5ZTZmZTNiOGVmMDkwYThjYTE5KS4gTGVhcm4gbW9yZSBhYm91dCB0aGUgTW9sbW8gZmFtaWx5IFtpbiB0aGUgYW5ub3VuY2VtZW50IGJsb2cgcG9zdF0oaHR0cHM6Ly9tb2xtby5hbGxlbmFpLm9yZy9ibG9nKSBvciB0aGUgW3BhcGVyXShodHRwczovL2h1Z2dpbmdmYWNlLmNvL3BhcGVycy8yNDA5LjE3MTQ2KS5cblxuTW9sbW8gN0ItRCBpcyBiYXNlZCBvbiBbUXdlbjItN0JdKGh0dHBzOi8vaHVnZ2luZ2ZhY2UuY28vUXdlbi9Rd2VuMi03QikgYW5kIHVzZXMgW09wZW5BSSBDTElQXShodHRwczovL2h1Z2dpbmdmYWNlLmNvL29wZW5haS9jbGlwLXZpdC1sYXJnZS1wYXRjaDE0LTMzNikgYXMgdmlzaW9uIGJhY2tib25lLiBJdCBwZXJmb3JtcyBjb21mb3J0YWJseSBiZXR3ZWVuIEdQVC00ViBhbmQgR1BULTRvIG9uIGJvdGggYWNhZGVtaWMgYmVuY2htYXJrcyBhbmQgaHVtYW4gZXZhbHVhdGlvbi5cblxuVGhpcyBjaGVja3BvaW50IGlzIGEgcHJldmlldyBvZiB0aGUgTW9sbW8gcmVsZWFzZS4gQWxsIGFydGlmYWN0cyB1c2VkIGluIGNyZWF0aW5nIE1vbG1vIChQaXhNbyBkYXRhc2V0LCB0cmFpbmluZyBjb2RlLCBldmFsdWF0aW9ucywgaW50ZXJtZWRpYXRlIGNoZWNrcG9pbnRzKSB3aWxsIGJlIG1hZGUgYXZhaWxhYmxlIGF0IGEgbGF0ZXIgZGF0ZSwgZnVydGhlcmluZyBvdXIgY29tbWl0bWVudCB0byBvcGVuLXNvdXJjZSBBSSBkZXZlbG9wbWVudCBhbmQgcmVwcm9kdWNpYmlsaXR5LiIsImNvbnRleHRfbGVuZ3RoIjo0MDk2LCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0K2ltYWdlLT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0IiwiaW1hZ2UiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJPdGhlciIsImluc3RydWN0X3R5cGUiOm51bGx9LCJwcmljaW5nIjp7InByb21wdCI6IjAiLCJjb21wbGV0aW9uIjoiMCIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6NDA5NiwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjpudWxsLCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoiYnl0ZWRhbmNlLXJlc2VhcmNoL3VpLXRhcnMtNzJiOmZyZWUiLCJuYW1lIjoiQnl0ZWRhbmNlOiBVSS1UQVJTIDcyQiAgKGZyZWUpIiwiY3JlYXRlZCI6MTc0MzAyMDA2NSwiZGVzY3JpcHRpb24iOiJVSS1UQVJTIDcyQiBpcyBhbiBvcGVuLXNvdXJjZSBtdWx0aW1vZGFsIEFJIG1vZGVsIGRlc2lnbmVkIHNwZWNpZmljYWxseSBmb3IgYXV0b21hdGluZyBicm93c2VyIGFuZCBkZXNrdG9wIHRhc2tzIHRocm91Z2ggdmlzdWFsIGludGVyYWN0aW9uIGFuZCBjb250cm9sLiBUaGUgbW9kZWwgaXMgYnVpbHQgd2l0aCBhIHNwZWNpYWxpemVkIHZpc2lvbiBhcmNoaXRlY3R1cmUgZW5hYmxpbmcgYWNjdXJhdGUgaW50ZXJwcmV0YXRpb24gYW5kIG1hbmlwdWxhdGlvbiBvZiBvbi1zY3JlZW4gdmlzdWFsIGRhdGEuIEl0IHN1cHBvcnRzIGF1dG9tYXRpb24gdGFza3Mgd2l0aGluIHdlYiBicm93c2VycyBhcyB3ZWxsIGFzIGRlc2t0b3AgYXBwbGljYXRpb25zLCBpbmNsdWRpbmcgTWljcm9zb2Z0IE9mZmljZSBhbmQgVlMgQ29kZS5cblxuQ29yZSBjYXBhYmlsaXRpZXMgaW5jbHVkZSBpbnRlbGxpZ2VudCBzY3JlZW4gZGV0ZWN0aW9uLCBwcmVkaWN0aXZlIGFjdGlvbiBtb2RlbGluZywgYW5kIGVmZmljaWVudCBoYW5kbGluZyBvZiByZXBldGl0aXZlIGludGVyYWN0aW9ucy4gVUktVEFSUyBlbXBsb3lzIHN1cGVydmlzZWQgZmluZS10dW5pbmcgKFNGVCkgdGFpbG9yZWQgZXhwbGljaXRseSBmb3IgY29tcHV0ZXIgY29udHJvbCBzY2VuYXJpb3MuIEl0IGNhbiBiZSBkZXBsb3llZCBsb2NhbGx5IG9yIGFjY2Vzc2VkIHZpYSBIdWdnaW5nIEZhY2UgZm9yIGRlbW9uc3RyYXRpb24gcHVycG9zZXMuIEludGVuZGVkIHVzZSBjYXNlcyBlbmNvbXBhc3Mgd29ya2Zsb3cgYXV0b21hdGlvbiwgdGFzayBzY3JpcHRpbmcsIGFuZCBpbnRlcmFjdGl2ZSBkZXNrdG9wIGNvbnRyb2wgYXBwbGljYXRpb25zLiIsImNvbnRleHRfbGVuZ3RoIjozMjc2OCwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dCtpbWFnZS0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCIsImltYWdlIl0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiT3RoZXIiLCJpbnN0cnVjdF90eXBlIjpudWxsfSwicHJpY2luZyI6eyJwcm9tcHQiOiIwIiwiY29tcGxldGlvbiI6IjAiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjMyNzY4LCJtYXhfY29tcGxldGlvbl90b2tlbnMiOm51bGwsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJxd2VuL3F3ZW4yLjUtdmwtM2ItaW5zdHJ1Y3Q6ZnJlZSIsIm5hbWUiOiJRd2VuOiBRd2VuMi41IFZMIDNCIEluc3RydWN0IChmcmVlKSIsImNyZWF0ZWQiOjE3NDMwMTQ1NzMsImRlc2NyaXB0aW9uIjoiUXdlbjIuNSBWTCAzQiBpcyBhIG11bHRpbW9kYWwgTExNIGZyb20gdGhlIFF3ZW4gVGVhbSB3aXRoIHRoZSBmb2xsb3dpbmcga2V5IGVuaGFuY2VtZW50czpcblxuLSBTb1RBIHVuZGVyc3RhbmRpbmcgb2YgaW1hZ2VzIG9mIHZhcmlvdXMgcmVzb2x1dGlvbiAmIHJhdGlvOiBRd2VuMi41LVZMIGFjaGlldmVzIHN0YXRlLW9mLXRoZS1hcnQgcGVyZm9ybWFuY2Ugb24gdmlzdWFsIHVuZGVyc3RhbmRpbmcgYmVuY2htYXJrcywgaW5jbHVkaW5nIE1hdGhWaXN0YSwgRG9jVlFBLCBSZWFsV29ybGRRQSwgTVRWUUEsIGV0Yy5cblxuLSBBZ2VudCB0aGF0IGNhbiBvcGVyYXRlIHlvdXIgbW9iaWxlcywgcm9ib3RzLCBldGMuOiB3aXRoIHRoZSBhYmlsaXRpZXMgb2YgY29tcGxleCByZWFzb25pbmcgYW5kIGRlY2lzaW9uIG1ha2luZywgUXdlbjIuNS1WTCBjYW4gYmUgaW50ZWdyYXRlZCB3aXRoIGRldmljZXMgbGlrZSBtb2JpbGUgcGhvbmVzLCByb2JvdHMsIGV0Yy4sIGZvciBhdXRvbWF0aWMgb3BlcmF0aW9uIGJhc2VkIG9uIHZpc3VhbCBlbnZpcm9ubWVudCBhbmQgdGV4dCBpbnN0cnVjdGlvbnMuXG5cbi0gTXVsdGlsaW5ndWFsIFN1cHBvcnQ6IHRvIHNlcnZlIGdsb2JhbCB1c2VycywgYmVzaWRlcyBFbmdsaXNoIGFuZCBDaGluZXNlLCBRd2VuMi41LVZMIG5vdyBzdXBwb3J0cyB0aGUgdW5kZXJzdGFuZGluZyBvZiB0ZXh0cyBpbiBkaWZmZXJlbnQgbGFuZ3VhZ2VzIGluc2lkZSBpbWFnZXMsIGluY2x1ZGluZyBtb3N0IEV1cm9wZWFuIGxhbmd1YWdlcywgSmFwYW5lc2UsIEtvcmVhbiwgQXJhYmljLCBWaWV0bmFtZXNlLCBldGMuXG5cbkZvciBtb3JlIGRldGFpbHMsIHNlZSB0aGlzIFtibG9nIHBvc3RdKGh0dHBzOi8vcXdlbmxtLmdpdGh1Yi5pby9ibG9nL3F3ZW4yLXZsLykgYW5kIFtHaXRIdWIgcmVwb10oaHR0cHM6Ly9naXRodWIuY29tL1F3ZW5MTS9Rd2VuMi1WTCkuXG5cblVzYWdlIG9mIHRoaXMgbW9kZWwgaXMgc3ViamVjdCB0byBbVG9uZ3lpIFFpYW53ZW4gTElDRU5TRSBBR1JFRU1FTlRdKGh0dHBzOi8vaHVnZ2luZ2ZhY2UuY28vUXdlbi9Rd2VuMS41LTExMEItQ2hhdC9ibG9iL21haW4vTElDRU5TRSkuIiwiY29udGV4dF9sZW5ndGgiOjY0MDAwLCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0K2ltYWdlLT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0IiwiaW1hZ2UiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJRd2VuIiwiaW5zdHJ1Y3RfdHlwZSI6bnVsbH0sInByaWNpbmciOnsicHJvbXB0IjoiMCIsImNvbXBsZXRpb24iOiIwIiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjo2NDAwMCwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjpudWxsLCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoiZ29vZ2xlL2dlbWluaS0yLjUtcHJvLWV4cC0wMy0yNTpmcmVlIiwibmFtZSI6Ikdvb2dsZTogR2VtaW5pIDIuNSBQcm8gRXhwZXJpbWVudGFsIChmcmVlKSIsImNyZWF0ZWQiOjE3NDI5MjIwOTksImRlc2NyaXB0aW9uIjoiR2VtaW5pIDIuNSBQcm8gaXMgR29vZ2xl4oCZcyBzdGF0ZS1vZi10aGUtYXJ0IEFJIG1vZGVsIGRlc2lnbmVkIGZvciBhZHZhbmNlZCByZWFzb25pbmcsIGNvZGluZywgbWF0aGVtYXRpY3MsIGFuZCBzY2llbnRpZmljIHRhc2tzLiBJdCBlbXBsb3lzIOKAnHRoaW5raW5n4oCdIGNhcGFiaWxpdGllcywgZW5hYmxpbmcgaXQgdG8gcmVhc29uIHRocm91Z2ggcmVzcG9uc2VzIHdpdGggZW5oYW5jZWQgYWNjdXJhY3kgYW5kIG51YW5jZWQgY29udGV4dCBoYW5kbGluZy4gR2VtaW5pIDIuNSBQcm8gYWNoaWV2ZXMgdG9wLXRpZXIgcGVyZm9ybWFuY2Ugb24gbXVsdGlwbGUgYmVuY2htYXJrcywgaW5jbHVkaW5nIGZpcnN0LXBsYWNlIHBvc2l0aW9uaW5nIG9uIHRoZSBMTUFyZW5hIGxlYWRlcmJvYXJkLCByZWZsZWN0aW5nIHN1cGVyaW9yIGh1bWFuLXByZWZlcmVuY2UgYWxpZ25tZW50IGFuZCBjb21wbGV4IHByb2JsZW0tc29sdmluZyBhYmlsaXRpZXMuIiwiY29udGV4dF9sZW5ndGgiOjEwMDAwMDAsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQraW1hZ2UtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiLCJpbWFnZSJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6IkdlbWluaSIsImluc3RydWN0X3R5cGUiOm51bGx9LCJwcmljaW5nIjp7InByb21wdCI6IjAiLCJjb21wbGV0aW9uIjoiMCIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6MTAwMDAwMCwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjo2NTUzNSwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6InF3ZW4vcXdlbjIuNS12bC0zMmItaW5zdHJ1Y3Q6ZnJlZSIsIm5hbWUiOiJRd2VuOiBRd2VuMi41IFZMIDMyQiBJbnN0cnVjdCAoZnJlZSkiLCJjcmVhdGVkIjoxNzQyODM5ODM4LCJkZXNjcmlwdGlvbiI6IlF3ZW4yLjUtVkwtMzJCIGlzIGEgbXVsdGltb2RhbCB2aXNpb24tbGFuZ3VhZ2UgbW9kZWwgZmluZS10dW5lZCB0aHJvdWdoIHJlaW5mb3JjZW1lbnQgbGVhcm5pbmcgZm9yIGVuaGFuY2VkIG1hdGhlbWF0aWNhbCByZWFzb25pbmcsIHN0cnVjdHVyZWQgb3V0cHV0cywgYW5kIHZpc3VhbCBwcm9ibGVtLXNvbHZpbmcgY2FwYWJpbGl0aWVzLiBJdCBleGNlbHMgYXQgdmlzdWFsIGFuYWx5c2lzIHRhc2tzLCBpbmNsdWRpbmcgb2JqZWN0IHJlY29nbml0aW9uLCB0ZXh0dWFsIGludGVycHJldGF0aW9uIHdpdGhpbiBpbWFnZXMsIGFuZCBwcmVjaXNlIGV2ZW50IGxvY2FsaXphdGlvbiBpbiBleHRlbmRlZCB2aWRlb3MuIFF3ZW4yLjUtVkwtMzJCIGRlbW9uc3RyYXRlcyBzdGF0ZS1vZi10aGUtYXJ0IHBlcmZvcm1hbmNlIGFjcm9zcyBtdWx0aW1vZGFsIGJlbmNobWFya3Mgc3VjaCBhcyBNTU1VLCBNYXRoVmlzdGEsIGFuZCBWaWRlb01NRSwgd2hpbGUgbWFpbnRhaW5pbmcgc3Ryb25nIHJlYXNvbmluZyBhbmQgY2xhcml0eSBpbiB0ZXh0LWJhc2VkIHRhc2tzIGxpa2UgTU1MVSwgbWF0aGVtYXRpY2FsIHByb2JsZW0tc29sdmluZywgYW5kIGNvZGUgZ2VuZXJhdGlvbi4iLCJjb250ZXh0X2xlbmd0aCI6ODE5MiwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dCtpbWFnZS0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCIsImltYWdlIl0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiUXdlbiIsImluc3RydWN0X3R5cGUiOm51bGx9LCJwcmljaW5nIjp7InByb21wdCI6IjAiLCJjb21wbGV0aW9uIjoiMCIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6ODE5MiwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjpudWxsLCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoicXdlbi9xd2VuMi41LXZsLTMyYi1pbnN0cnVjdCIsIm5hbWUiOiJRd2VuOiBRd2VuMi41IFZMIDMyQiBJbnN0cnVjdCIsImNyZWF0ZWQiOjE3NDI4Mzk4MzgsImRlc2NyaXB0aW9uIjoiUXdlbjIuNS1WTC0zMkIgaXMgYSBtdWx0aW1vZGFsIHZpc2lvbi1sYW5ndWFnZSBtb2RlbCBmaW5lLXR1bmVkIHRocm91Z2ggcmVpbmZvcmNlbWVudCBsZWFybmluZyBmb3IgZW5oYW5jZWQgbWF0aGVtYXRpY2FsIHJlYXNvbmluZywgc3RydWN0dXJlZCBvdXRwdXRzLCBhbmQgdmlzdWFsIHByb2JsZW0tc29sdmluZyBjYXBhYmlsaXRpZXMuIEl0IGV4Y2VscyBhdCB2aXN1YWwgYW5hbHlzaXMgdGFza3MsIGluY2x1ZGluZyBvYmplY3QgcmVjb2duaXRpb24sIHRleHR1YWwgaW50ZXJwcmV0YXRpb24gd2l0aGluIGltYWdlcywgYW5kIHByZWNpc2UgZXZlbnQgbG9jYWxpemF0aW9uIGluIGV4dGVuZGVkIHZpZGVvcy4gUXdlbjIuNS1WTC0zMkIgZGVtb25zdHJhdGVzIHN0YXRlLW9mLXRoZS1hcnQgcGVyZm9ybWFuY2UgYWNyb3NzIG11bHRpbW9kYWwgYmVuY2htYXJrcyBzdWNoIGFzIE1NTVUsIE1hdGhWaXN0YSwgYW5kIFZpZGVvTU1FLCB3aGlsZSBtYWludGFpbmluZyBzdHJvbmcgcmVhc29uaW5nIGFuZCBjbGFyaXR5IGluIHRleHQtYmFzZWQgdGFza3MgbGlrZSBNTUxVLCBtYXRoZW1hdGljYWwgcHJvYmxlbS1zb2x2aW5nLCBhbmQgY29kZSBnZW5lcmF0aW9uLiIsImNvbnRleHRfbGVuZ3RoIjoxMjgwMDAsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQraW1hZ2UtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiLCJpbWFnZSJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6IlF3ZW4iLCJpbnN0cnVjdF90eXBlIjpudWxsfSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMDkiLCJjb21wbGV0aW9uIjoiMC4wMDAwMDA5IiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoxMjgwMDAsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6bnVsbCwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6ImRlZXBzZWVrL2RlZXBzZWVrLWNoYXQtdjMtMDMyNDpmcmVlIiwibmFtZSI6IkRlZXBTZWVrOiBEZWVwU2VlayBWMyAwMzI0IChmcmVlKSIsImNyZWF0ZWQiOjE3NDI4MjQ3NTUsImRlc2NyaXB0aW9uIjoiRGVlcFNlZWsgVjMsIGEgNjg1Qi1wYXJhbWV0ZXIsIG1peHR1cmUtb2YtZXhwZXJ0cyBtb2RlbCwgaXMgdGhlIGxhdGVzdCBpdGVyYXRpb24gb2YgdGhlIGZsYWdzaGlwIGNoYXQgbW9kZWwgZmFtaWx5IGZyb20gdGhlIERlZXBTZWVrIHRlYW0uXG5cbkl0IHN1Y2NlZWRzIHRoZSBbRGVlcFNlZWsgVjNdKC9kZWVwc2Vlay9kZWVwc2Vlay1jaGF0LXYzKSBtb2RlbCBhbmQgcGVyZm9ybXMgcmVhbGx5IHdlbGwgb24gYSB2YXJpZXR5IG9mIHRhc2tzLiIsImNvbnRleHRfbGVuZ3RoIjoxNjM4NDAsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJEZWVwU2VlayIsImluc3RydWN0X3R5cGUiOm51bGx9LCJwcmljaW5nIjp7InByb21wdCI6IjAiLCJjb21wbGV0aW9uIjoiMCIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6MTYzODQwLCJtYXhfY29tcGxldGlvbl90b2tlbnMiOm51bGwsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJkZWVwc2Vlay9kZWVwc2Vlay1jaGF0LXYzLTAzMjQiLCJuYW1lIjoiRGVlcFNlZWs6IERlZXBTZWVrIFYzIDAzMjQiLCJjcmVhdGVkIjoxNzQyODI0NzU1LCJkZXNjcmlwdGlvbiI6IkRlZXBTZWVrIFYzLCBhIDY4NUItcGFyYW1ldGVyLCBtaXh0dXJlLW9mLWV4cGVydHMgbW9kZWwsIGlzIHRoZSBsYXRlc3QgaXRlcmF0aW9uIG9mIHRoZSBmbGFnc2hpcCBjaGF0IG1vZGVsIGZhbWlseSBmcm9tIHRoZSBEZWVwU2VlayB0ZWFtLlxuXG5JdCBzdWNjZWVkcyB0aGUgW0RlZXBTZWVrIFYzXSgvZGVlcHNlZWsvZGVlcHNlZWstY2hhdC12MykgbW9kZWwgYW5kIHBlcmZvcm1zIHJlYWxseSB3ZWxsIG9uIGEgdmFyaWV0eSBvZiB0YXNrcy4iLCJjb250ZXh0X2xlbmd0aCI6NjQwMDAsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJEZWVwU2VlayIsImluc3RydWN0X3R5cGUiOm51bGx9LCJwcmljaW5nIjp7InByb21wdCI6IjAuMDAwMDAwMjciLCJjb21wbGV0aW9uIjoiMC4wMDAwMDExIiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAiLCJpbnB1dF9jYWNoZV9yZWFkIjoiMC4wMDAwMDAwNyJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjY0MDAwLCJtYXhfY29tcGxldGlvbl90b2tlbnMiOjgxOTIsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJmZWF0aGVybGVzcy9xd2Vya3ktNzJiOmZyZWUiLCJuYW1lIjoiUXdlcmt5IDcyQiAoZnJlZSkiLCJjcmVhdGVkIjoxNzQyNDgxNTk3LCJkZXNjcmlwdGlvbiI6IlF3ZXJreS03MkIgaXMgYSBsaW5lYXItYXR0ZW50aW9uIFJXS1YgdmFyaWFudCBvZiB0aGUgUXdlbiAyLjUgNzJCIG1vZGVsLCBvcHRpbWl6ZWQgdG8gc2lnbmlmaWNhbnRseSByZWR1Y2UgY29tcHV0YXRpb25hbCBjb3N0IGF0IHNjYWxlLiBMZXZlcmFnaW5nIGxpbmVhciBhdHRlbnRpb24sIGl0IGFjaGlldmVzIHN1YnN0YW50aWFsIGluZmVyZW5jZSBzcGVlZHVwcyAoPjEwMDB4KSB3aGlsZSByZXRhaW5pbmcgY29tcGV0aXRpdmUgYWNjdXJhY3kgb24gY29tbW9uIGJlbmNobWFya3MgbGlrZSBBUkMsIEhlbGxhU3dhZywgTGFtYmFkYSwgYW5kIE1NTFUuIEl0IGluaGVyaXRzIGtub3dsZWRnZSBhbmQgbGFuZ3VhZ2Ugc3VwcG9ydCBmcm9tIFF3ZW4gMi41LCBzdXBwb3J0aW5nIGFwcHJveGltYXRlbHkgMzAgbGFuZ3VhZ2VzLCBtYWtpbmcgaXQgc3VpdGFibGUgZm9yIGVmZmljaWVudCBpbmZlcmVuY2UgaW4gbGFyZ2UtY29udGV4dCBhcHBsaWNhdGlvbnMuIiwiY29udGV4dF9sZW5ndGgiOjMyNzY4LCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiT3RoZXIiLCJpbnN0cnVjdF90eXBlIjpudWxsfSwicHJpY2luZyI6eyJwcm9tcHQiOiIwIiwiY29tcGxldGlvbiI6IjAiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjMyNzY4LCJtYXhfY29tcGxldGlvbl90b2tlbnMiOjQwOTYsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJvcGVuYWkvbzEtcHJvIiwibmFtZSI6Ik9wZW5BSTogbzEtcHJvIiwiY3JlYXRlZCI6MTc0MjQyMzIxMSwiZGVzY3JpcHRpb24iOiJUaGUgbzEgc2VyaWVzIG9mIG1vZGVscyBhcmUgdHJhaW5lZCB3aXRoIHJlaW5mb3JjZW1lbnQgbGVhcm5pbmcgdG8gdGhpbmsgYmVmb3JlIHRoZXkgYW5zd2VyIGFuZCBwZXJmb3JtIGNvbXBsZXggcmVhc29uaW5nLiBUaGUgbzEtcHJvIG1vZGVsIHVzZXMgbW9yZSBjb21wdXRlIHRvIHRoaW5rIGhhcmRlciBhbmQgcHJvdmlkZSBjb25zaXN0ZW50bHkgYmV0dGVyIGFuc3dlcnMuIiwiY29udGV4dF9sZW5ndGgiOjIwMDAwMCwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dCtpbWFnZS0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCIsImltYWdlIl0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiR1BUIiwiaW5zdHJ1Y3RfdHlwZSI6bnVsbH0sInByaWNpbmciOnsicHJvbXB0IjoiMC4wMDAxNSIsImNvbXBsZXRpb24iOiIwLjAwMDYiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMC4yMTY3NSIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjIwMDAwMCwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjoxMDAwMDAsImlzX21vZGVyYXRlZCI6dHJ1ZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6Im1pc3RyYWxhaS9taXN0cmFsLXNtYWxsLTMuMS0yNGItaW5zdHJ1Y3Q6ZnJlZSIsIm5hbWUiOiJNaXN0cmFsOiBNaXN0cmFsIFNtYWxsIDMuMSAyNEIgKGZyZWUpIiwiY3JlYXRlZCI6MTc0MjIzODkzNywiZGVzY3JpcHRpb24iOiJNaXN0cmFsIFNtYWxsIDMuMSAyNEIgSW5zdHJ1Y3QgaXMgYW4gdXBncmFkZWQgdmFyaWFudCBvZiBNaXN0cmFsIFNtYWxsIDMgKDI1MDEpLCBmZWF0dXJpbmcgMjQgYmlsbGlvbiBwYXJhbWV0ZXJzIHdpdGggYWR2YW5jZWQgbXVsdGltb2RhbCBjYXBhYmlsaXRpZXMuIEl0IHByb3ZpZGVzIHN0YXRlLW9mLXRoZS1hcnQgcGVyZm9ybWFuY2UgaW4gdGV4dC1iYXNlZCByZWFzb25pbmcgYW5kIHZpc2lvbiB0YXNrcywgaW5jbHVkaW5nIGltYWdlIGFuYWx5c2lzLCBwcm9ncmFtbWluZywgbWF0aGVtYXRpY2FsIHJlYXNvbmluZywgYW5kIG11bHRpbGluZ3VhbCBzdXBwb3J0IGFjcm9zcyBkb3plbnMgb2YgbGFuZ3VhZ2VzLiBFcXVpcHBlZCB3aXRoIGFuIGV4dGVuc2l2ZSAxMjhrIHRva2VuIGNvbnRleHQgd2luZG93IGFuZCBvcHRpbWl6ZWQgZm9yIGVmZmljaWVudCBsb2NhbCBpbmZlcmVuY2UsIGl0IHN1cHBvcnRzIHVzZSBjYXNlcyBzdWNoIGFzIGNvbnZlcnNhdGlvbmFsIGFnZW50cywgZnVuY3Rpb24gY2FsbGluZywgbG9uZy1kb2N1bWVudCBjb21wcmVoZW5zaW9uLCBhbmQgcHJpdmFjeS1zZW5zaXRpdmUgZGVwbG95bWVudHMuIiwiY29udGV4dF9sZW5ndGgiOjk2MDAwLCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0K2ltYWdlLT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0IiwiaW1hZ2UiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJNaXN0cmFsIiwiaW5zdHJ1Y3RfdHlwZSI6bnVsbH0sInByaWNpbmciOnsicHJvbXB0IjoiMCIsImNvbXBsZXRpb24iOiIwIiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjo5NjAwMCwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjo5NjAwMCwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6Im1pc3RyYWxhaS9taXN0cmFsLXNtYWxsLTMuMS0yNGItaW5zdHJ1Y3QiLCJuYW1lIjoiTWlzdHJhbDogTWlzdHJhbCBTbWFsbCAzLjEgMjRCIiwiY3JlYXRlZCI6MTc0MjIzODkzNywiZGVzY3JpcHRpb24iOiJNaXN0cmFsIFNtYWxsIDMuMSAyNEIgSW5zdHJ1Y3QgaXMgYW4gdXBncmFkZWQgdmFyaWFudCBvZiBNaXN0cmFsIFNtYWxsIDMgKDI1MDEpLCBmZWF0dXJpbmcgMjQgYmlsbGlvbiBwYXJhbWV0ZXJzIHdpdGggYWR2YW5jZWQgbXVsdGltb2RhbCBjYXBhYmlsaXRpZXMuIEl0IHByb3ZpZGVzIHN0YXRlLW9mLXRoZS1hcnQgcGVyZm9ybWFuY2UgaW4gdGV4dC1iYXNlZCByZWFzb25pbmcgYW5kIHZpc2lvbiB0YXNrcywgaW5jbHVkaW5nIGltYWdlIGFuYWx5c2lzLCBwcm9ncmFtbWluZywgbWF0aGVtYXRpY2FsIHJlYXNvbmluZywgYW5kIG11bHRpbGluZ3VhbCBzdXBwb3J0IGFjcm9zcyBkb3plbnMgb2YgbGFuZ3VhZ2VzLiBFcXVpcHBlZCB3aXRoIGFuIGV4dGVuc2l2ZSAxMjhrIHRva2VuIGNvbnRleHQgd2luZG93IGFuZCBvcHRpbWl6ZWQgZm9yIGVmZmljaWVudCBsb2NhbCBpbmZlcmVuY2UsIGl0IHN1cHBvcnRzIHVzZSBjYXNlcyBzdWNoIGFzIGNvbnZlcnNhdGlvbmFsIGFnZW50cywgZnVuY3Rpb24gY2FsbGluZywgbG9uZy1kb2N1bWVudCBjb21wcmVoZW5zaW9uLCBhbmQgcHJpdmFjeS1zZW5zaXRpdmUgZGVwbG95bWVudHMuIiwiY29udGV4dF9sZW5ndGgiOjEyODAwMCwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dCtpbWFnZS0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCIsImltYWdlIl0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiTWlzdHJhbCIsImluc3RydWN0X3R5cGUiOm51bGx9LCJwcmljaW5nIjp7InByb21wdCI6IjAuMDAwMDAwMSIsImNvbXBsZXRpb24iOiIwLjAwMDAwMDMiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMC4wMDA5MjYiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoxMjgwMDAsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6MTI4MDAwLCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoib3Blbi1yMS9vbHltcGljY29kZXItN2I6ZnJlZSIsIm5hbWUiOiJPbHltcGljQ29kZXIgN0IgKGZyZWUpIiwiY3JlYXRlZCI6MTc0MjA3ODI2NSwiZGVzY3JpcHRpb24iOiJPbHltcGljQ29kZXItN0IgaXMgYW4gb3Blbi1zb3VyY2UgbGFuZ3VhZ2UgbW9kZWwgZmluZS10dW5lZCBvbiB0aGUgQ29kZUZvcmNlcy1Db1RzIGRhdGFzZXQsIGNvbnNpc3Rpbmcgb2YgbmVhcmx5IDEwMCwwMDAgaGlnaC1xdWFsaXR5IGNoYWluLW9mLXRob3VnaHQgZXhhbXBsZXMgZnJvbSBjb21wZXRpdGl2ZSBwcm9ncmFtbWluZyBjb250ZXh0cy4gT3B0aW1pemVkIHNwZWNpZmljYWxseSBmb3Igb2x5bXBpYWQtbGV2ZWwgY29kaW5nIHByb2JsZW1zLCB0aGlzIG1vZGVsIGRlbW9uc3RyYXRlcyBzdHJvbmcgY2hhaW4tb2YtdGhvdWdodCByZWFzb25pbmcgYW5kIGNvbXBldGl0aXZlIGNvZGUgZ2VuZXJhdGlvbiBjYXBhYmlsaXRpZXMsIGFjaGlldmluZyBwZXJmb3JtYW5jZSBjb21wZXRpdGl2ZSB3aXRoIGZyb250aWVyIGNsb3NlZC1zb3VyY2UgbW9kZWxzIG9uIHRhc2tzIGZyb20gdGhlIElPSSAyMDI0IGFuZCBzaW1pbGFyIGNvZGluZyBjb250ZXN0cy4iLCJjb250ZXh0X2xlbmd0aCI6MzI3NjgsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJPdGhlciIsImluc3RydWN0X3R5cGUiOiJkZWVwc2Vlay1yMSJ9LCJwcmljaW5nIjp7InByb21wdCI6IjAiLCJjb21wbGV0aW9uIjoiMCIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6MzI3NjgsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6bnVsbCwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6Im9wZW4tcjEvb2x5bXBpY2NvZGVyLTMyYjpmcmVlIiwibmFtZSI6Ik9seW1waWNDb2RlciAzMkIgKGZyZWUpIiwiY3JlYXRlZCI6MTc0MjA3NzIyOCwiZGVzY3JpcHRpb24iOiJPbHltcGljQ29kZXItMzJCIGlzIGEgaGlnaC1wZXJmb3JtaW5nIG9wZW4tc291cmNlIG1vZGVsIGZpbmUtdHVuZWQgdXNpbmcgdGhlIENvZGVGb3JjZXMtQ29UcyBkYXRhc2V0LCBjb250YWluaW5nIGFwcHJveGltYXRlbHkgMTAwLDAwMCBjaGFpbi1vZi10aG91Z2h0IHByb2dyYW1taW5nIHNhbXBsZXMuIEl0IGV4Y2VscyBhdCBjb21wbGV4IGNvbXBldGl0aXZlIHByb2dyYW1taW5nIGJlbmNobWFya3MsIHN1Y2ggYXMgSU9JIDIwMjQgYW5kIENvZGVmb3JjZXMtc3R5bGUgY2hhbGxlbmdlcywgZnJlcXVlbnRseSBzdXJwYXNzaW5nIHN0YXRlLW9mLXRoZS1hcnQgY2xvc2VkLXNvdXJjZSBtb2RlbHMuIE9seW1waWNDb2Rlci0zMkIgcHJvdmlkZXMgYWR2YW5jZWQgcmVhc29uaW5nLCBjb2hlcmVudCBtdWx0aS1zdGVwIHByb2JsZW0tc29sdmluZywgYW5kIHJvYnVzdCBjb2RlIGdlbmVyYXRpb24gY2FwYWJpbGl0aWVzLCBkZW1vbnN0cmF0aW5nIHNpZ25pZmljYW50IHBvdGVudGlhbCBmb3Igb2x5bXBpYWQtbGV2ZWwgY29tcGV0aXRpdmUgcHJvZ3JhbW1pbmcgYXBwbGljYXRpb25zLiIsImNvbnRleHRfbGVuZ3RoIjozMjc2OCwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dC0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6Ik90aGVyIiwiaW5zdHJ1Y3RfdHlwZSI6ImRlZXBzZWVrLXIxIn0sInByaWNpbmciOnsicHJvbXB0IjoiMCIsImNvbXBsZXRpb24iOiIwIiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjozMjc2OCwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjpudWxsLCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoic3RlZWxza3VsbC9sMy4zLWVsZWN0cmEtcjEtNzBiIiwibmFtZSI6IlN0ZWVsU2t1bGw6IEwzLjMgRWxlY3RyYSBSMSA3MEIiLCJjcmVhdGVkIjoxNzQyMDY3NjExLCJkZXNjcmlwdGlvbiI6IkwzLjMtRWxlY3RyYS1SMS03MCBpcyB0aGUgbmV3ZXN0IHJlbGVhc2Ugb2YgdGhlIFVubmFtZWQgc2VyaWVzLiBCdWlsdCBvbiBhIERlZXBTZWVrIFIxIERpc3RpbGwgYmFzZSwgRWxlY3RyYS1SMSBpbnRlZ3JhdGVzIHZhcmlvdXMgbW9kZWxzIHRvZ2V0aGVyIHRvIHByb3ZpZGUgYW4gaW50ZWxsaWdlbnQgYW5kIGNvaGVyZW50IG1vZGVsIGNhcGFibGUgb2YgcHJvdmlkaW5nIGRlZXAgY2hhcmFjdGVyIGluc2lnaHRzLiBUaHJvdWdoIHByb3BlciBwcm9tcHRpbmcsIHRoZSBtb2RlbCBkZW1vbnN0cmF0ZXMgYWR2YW5jZWQgcmVhc29uaW5nIGNhcGFiaWxpdGllcyBhbmQgdW5wcm9tcHRlZCBleHBsb3JhdGlvbiBvZiBjaGFyYWN0ZXIgaW5uZXIgdGhvdWdodHMgYW5kIG1vdGl2YXRpb25zLiBSZWFkIG1vcmUgYWJvdXQgdGhlIG1vZGVsIGFuZCBbcHJvbXB0aW5nIGhlcmVdKGh0dHBzOi8vaHVnZ2luZ2ZhY2UuY28vU3RlZWxza3VsbC9MMy4zLUVsZWN0cmEtUjEtNzBiKSIsImNvbnRleHRfbGVuZ3RoIjoxMzEwNzIsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJPdGhlciIsImluc3RydWN0X3R5cGUiOiJkZWVwc2Vlay1yMSJ9LCJwcmljaW5nIjp7InByb21wdCI6IjAuMDAwMDAwNyIsImNvbXBsZXRpb24iOiIwLjAwMDAwMDk1IiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoxMzEwNzIsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6MTMxMDcyLCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoiZ29vZ2xlL2dlbW1hLTMtMWItaXQ6ZnJlZSIsIm5hbWUiOiJHb29nbGU6IEdlbW1hIDMgMUIgKGZyZWUpIiwiY3JlYXRlZCI6MTc0MTk2MzU1NiwiZGVzY3JpcHRpb24iOiJHZW1tYSAzIDFCIGlzIHRoZSBzbWFsbGVzdCBvZiB0aGUgbmV3IEdlbW1hIDMgZmFtaWx5LiBJdCBoYW5kbGVzIGNvbnRleHQgd2luZG93cyB1cCB0byAzMmsgdG9rZW5zLCB1bmRlcnN0YW5kcyBvdmVyIDE0MCBsYW5ndWFnZXMsIGFuZCBvZmZlcnMgaW1wcm92ZWQgbWF0aCwgcmVhc29uaW5nLCBhbmQgY2hhdCBjYXBhYmlsaXRpZXMsIGluY2x1ZGluZyBzdHJ1Y3R1cmVkIG91dHB1dHMgYW5kIGZ1bmN0aW9uIGNhbGxpbmcuIE5vdGU6IEdlbW1hIDMgMUIgaXMgbm90IG11bHRpbW9kYWwuIEZvciB0aGUgc21hbGxlc3QgbXVsdGltb2RhbCBHZW1tYSAzIG1vZGVsLCBwbGVhc2Ugc2VlIFtHZW1tYSAzIDRCXShnb29nbGUvZ2VtbWEtMy00Yi1pdCkiLCJjb250ZXh0X2xlbmd0aCI6MzI3NjgsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQraW1hZ2UtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiLCJpbWFnZSJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6IkdlbWluaSIsImluc3RydWN0X3R5cGUiOiJnZW1tYSJ9LCJwcmljaW5nIjp7InByb21wdCI6IjAiLCJjb21wbGV0aW9uIjoiMCIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6MzI3NjgsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6ODE5MiwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6Imdvb2dsZS9nZW1tYS0zLTRiLWl0OmZyZWUiLCJuYW1lIjoiR29vZ2xlOiBHZW1tYSAzIDRCIChmcmVlKSIsImNyZWF0ZWQiOjE3NDE5MDU1MTAsImRlc2NyaXB0aW9uIjoiR2VtbWEgMyBpbnRyb2R1Y2VzIG11bHRpbW9kYWxpdHksIHN1cHBvcnRpbmcgdmlzaW9uLWxhbmd1YWdlIGlucHV0IGFuZCB0ZXh0IG91dHB1dHMuIEl0IGhhbmRsZXMgY29udGV4dCB3aW5kb3dzIHVwIHRvIDEyOGsgdG9rZW5zLCB1bmRlcnN0YW5kcyBvdmVyIDE0MCBsYW5ndWFnZXMsIGFuZCBvZmZlcnMgaW1wcm92ZWQgbWF0aCwgcmVhc29uaW5nLCBhbmQgY2hhdCBjYXBhYmlsaXRpZXMsIGluY2x1ZGluZyBzdHJ1Y3R1cmVkIG91dHB1dHMgYW5kIGZ1bmN0aW9uIGNhbGxpbmcuIiwiY29udGV4dF9sZW5ndGgiOjEzMTA3MiwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dCtpbWFnZS0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCIsImltYWdlIl0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiR2VtaW5pIiwiaW5zdHJ1Y3RfdHlwZSI6ImdlbW1hIn0sInByaWNpbmciOnsicHJvbXB0IjoiMCIsImNvbXBsZXRpb24iOiIwIiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoxMzEwNzIsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6ODE5MiwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6Imdvb2dsZS9nZW1tYS0zLTRiLWl0IiwibmFtZSI6Ikdvb2dsZTogR2VtbWEgMyA0QiIsImNyZWF0ZWQiOjE3NDE5MDU1MTAsImRlc2NyaXB0aW9uIjoiR2VtbWEgMyBpbnRyb2R1Y2VzIG11bHRpbW9kYWxpdHksIHN1cHBvcnRpbmcgdmlzaW9uLWxhbmd1YWdlIGlucHV0IGFuZCB0ZXh0IG91dHB1dHMuIEl0IGhhbmRsZXMgY29udGV4dCB3aW5kb3dzIHVwIHRvIDEyOGsgdG9rZW5zLCB1bmRlcnN0YW5kcyBvdmVyIDE0MCBsYW5ndWFnZXMsIGFuZCBvZmZlcnMgaW1wcm92ZWQgbWF0aCwgcmVhc29uaW5nLCBhbmQgY2hhdCBjYXBhYmlsaXRpZXMsIGluY2x1ZGluZyBzdHJ1Y3R1cmVkIG91dHB1dHMgYW5kIGZ1bmN0aW9uIGNhbGxpbmcuIiwiY29udGV4dF9sZW5ndGgiOjEzMTA3MiwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dCtpbWFnZS0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCIsImltYWdlIl0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiR2VtaW5pIiwiaW5zdHJ1Y3RfdHlwZSI6ImdlbW1hIn0sInByaWNpbmciOnsicHJvbXB0IjoiMC4wMDAwMDAwMiIsImNvbXBsZXRpb24iOiIwLjAwMDAwMDA0IiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoxMzEwNzIsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6bnVsbCwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6ImFpMjEvamFtYmEtMS42LWxhcmdlIiwibmFtZSI6IkFJMjE6IEphbWJhIDEuNiBMYXJnZSIsImNyZWF0ZWQiOjE3NDE5MDUxNzMsImRlc2NyaXB0aW9uIjoiQUkyMSBKYW1iYSBMYXJnZSAxLjYgaXMgYSBoaWdoLXBlcmZvcm1hbmNlIGh5YnJpZCBmb3VuZGF0aW9uIG1vZGVsIGNvbWJpbmluZyBTdGF0ZSBTcGFjZSBNb2RlbHMgKE1hbWJhKSB3aXRoIFRyYW5zZm9ybWVyIGF0dGVudGlvbiBtZWNoYW5pc21zLiBEZXZlbG9wZWQgYnkgQUkyMSwgaXQgZXhjZWxzIGluIGV4dHJlbWVseSBsb25nLWNvbnRleHQgaGFuZGxpbmcgKDI1NksgdG9rZW5zKSwgZGVtb25zdHJhdGVzIHN1cGVyaW9yIGluZmVyZW5jZSBlZmZpY2llbmN5ICh1cCB0byAyLjV4IGZhc3RlciB0aGFuIGNvbXBhcmFibGUgbW9kZWxzKSwgYW5kIHN1cHBvcnRzIHN0cnVjdHVyZWQgSlNPTiBvdXRwdXQgYW5kIHRvb2wtdXNlIGNhcGFiaWxpdGllcy4gSXQgaGFzIDk0IGJpbGxpb24gYWN0aXZlIHBhcmFtZXRlcnMgKDM5OCBiaWxsaW9uIHRvdGFsKSwgb3B0aW1pemVkIHF1YW50aXphdGlvbiBzdXBwb3J0IChFeHBlcnRzSW50OCksIGFuZCBtdWx0aWxpbmd1YWwgcHJvZmljaWVuY3kgaW4gbGFuZ3VhZ2VzIHN1Y2ggYXMgRW5nbGlzaCwgU3BhbmlzaCwgRnJlbmNoLCBQb3J0dWd1ZXNlLCBJdGFsaWFuLCBEdXRjaCwgR2VybWFuLCBBcmFiaWMsIGFuZCBIZWJyZXcuXG5cblVzYWdlIG9mIHRoaXMgbW9kZWwgaXMgc3ViamVjdCB0byB0aGUgW0phbWJhIE9wZW4gTW9kZWwgTGljZW5zZV0oaHR0cHM6Ly93d3cuYWkyMS5jb20vbGljZW5zZXMvamFtYmEtb3Blbi1tb2RlbC1saWNlbnNlKS4iLCJjb250ZXh0X2xlbmd0aCI6MjU2MDAwLCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiT3RoZXIiLCJpbnN0cnVjdF90eXBlIjpudWxsfSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMiIsImNvbXBsZXRpb24iOiIwLjAwMDAwOCIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6MjU2MDAwLCJtYXhfY29tcGxldGlvbl90b2tlbnMiOjQwOTYsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJhaTIxL2phbWJhLTEuNi1taW5pIiwibmFtZSI6IkFJMjE6IEphbWJhIE1pbmkgMS42IiwiY3JlYXRlZCI6MTc0MTkwNTE3MSwiZGVzY3JpcHRpb24iOiJBSTIxIEphbWJhIE1pbmkgMS42IGlzIGEgaHlicmlkIGZvdW5kYXRpb24gbW9kZWwgY29tYmluaW5nIFN0YXRlIFNwYWNlIE1vZGVscyAoTWFtYmEpIHdpdGggVHJhbnNmb3JtZXIgYXR0ZW50aW9uIG1lY2hhbmlzbXMuIFdpdGggMTIgYmlsbGlvbiBhY3RpdmUgcGFyYW1ldGVycyAoNTIgYmlsbGlvbiB0b3RhbCksIHRoaXMgbW9kZWwgZXhjZWxzIGluIGV4dHJlbWVseSBsb25nLWNvbnRleHQgdGFza3MgKHVwIHRvIDI1NksgdG9rZW5zKSBhbmQgYWNoaWV2ZXMgc3VwZXJpb3IgaW5mZXJlbmNlIGVmZmljaWVuY3ksIG91dHBlcmZvcm1pbmcgY29tcGFyYWJsZSBvcGVuIG1vZGVscyBvbiB0YXNrcyBzdWNoIGFzIHJldHJpZXZhbC1hdWdtZW50ZWQgZ2VuZXJhdGlvbiAoUkFHKSBhbmQgZ3JvdW5kZWQgcXVlc3Rpb24gYW5zd2VyaW5nLiBKYW1iYSBNaW5pIDEuNiBzdXBwb3J0cyBtdWx0aWxpbmd1YWwgdGFza3MgYWNyb3NzIEVuZ2xpc2gsIFNwYW5pc2gsIEZyZW5jaCwgUG9ydHVndWVzZSwgSXRhbGlhbiwgRHV0Y2gsIEdlcm1hbiwgQXJhYmljLCBhbmQgSGVicmV3LCBhbG9uZyB3aXRoIHN0cnVjdHVyZWQgSlNPTiBvdXRwdXQgYW5kIHRvb2wtdXNlIGNhcGFiaWxpdGllcy5cblxuVXNhZ2Ugb2YgdGhpcyBtb2RlbCBpcyBzdWJqZWN0IHRvIHRoZSBbSmFtYmEgT3BlbiBNb2RlbCBMaWNlbnNlXShodHRwczovL3d3dy5haTIxLmNvbS9saWNlbnNlcy9qYW1iYS1vcGVuLW1vZGVsLWxpY2Vuc2UpLiIsImNvbnRleHRfbGVuZ3RoIjoyNTYwMDAsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJPdGhlciIsImluc3RydWN0X3R5cGUiOm51bGx9LCJwcmljaW5nIjp7InByb21wdCI6IjAuMDAwMDAwMiIsImNvbXBsZXRpb24iOiIwLjAwMDAwMDQiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjI1NjAwMCwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjo0MDk2LCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoiZ29vZ2xlL2dlbW1hLTMtMTJiLWl0OmZyZWUiLCJuYW1lIjoiR29vZ2xlOiBHZW1tYSAzIDEyQiAoZnJlZSkiLCJjcmVhdGVkIjoxNzQxOTAyNjI1LCJkZXNjcmlwdGlvbiI6IkdlbW1hIDMgaW50cm9kdWNlcyBtdWx0aW1vZGFsaXR5LCBzdXBwb3J0aW5nIHZpc2lvbi1sYW5ndWFnZSBpbnB1dCBhbmQgdGV4dCBvdXRwdXRzLiBJdCBoYW5kbGVzIGNvbnRleHQgd2luZG93cyB1cCB0byAxMjhrIHRva2VucywgdW5kZXJzdGFuZHMgb3ZlciAxNDAgbGFuZ3VhZ2VzLCBhbmQgb2ZmZXJzIGltcHJvdmVkIG1hdGgsIHJlYXNvbmluZywgYW5kIGNoYXQgY2FwYWJpbGl0aWVzLCBpbmNsdWRpbmcgc3RydWN0dXJlZCBvdXRwdXRzIGFuZCBmdW5jdGlvbiBjYWxsaW5nLiBHZW1tYSAzIDEyQiBpcyB0aGUgc2Vjb25kIGxhcmdlc3QgaW4gdGhlIGZhbWlseSBvZiBHZW1tYSAzIG1vZGVscyBhZnRlciBbR2VtbWEgMyAyN0JdKGdvb2dsZS9nZW1tYS0zLTI3Yi1pdCkiLCJjb250ZXh0X2xlbmd0aCI6MTMxMDcyLCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0K2ltYWdlLT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0IiwiaW1hZ2UiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJHZW1pbmkiLCJpbnN0cnVjdF90eXBlIjoiZ2VtbWEifSwicHJpY2luZyI6eyJwcm9tcHQiOiIwIiwiY29tcGxldGlvbiI6IjAiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjEzMTA3MiwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjo4MTkyLCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoiZ29vZ2xlL2dlbW1hLTMtMTJiLWl0IiwibmFtZSI6Ikdvb2dsZTogR2VtbWEgMyAxMkIiLCJjcmVhdGVkIjoxNzQxOTAyNjI1LCJkZXNjcmlwdGlvbiI6IkdlbW1hIDMgaW50cm9kdWNlcyBtdWx0aW1vZGFsaXR5LCBzdXBwb3J0aW5nIHZpc2lvbi1sYW5ndWFnZSBpbnB1dCBhbmQgdGV4dCBvdXRwdXRzLiBJdCBoYW5kbGVzIGNvbnRleHQgd2luZG93cyB1cCB0byAxMjhrIHRva2VucywgdW5kZXJzdGFuZHMgb3ZlciAxNDAgbGFuZ3VhZ2VzLCBhbmQgb2ZmZXJzIGltcHJvdmVkIG1hdGgsIHJlYXNvbmluZywgYW5kIGNoYXQgY2FwYWJpbGl0aWVzLCBpbmNsdWRpbmcgc3RydWN0dXJlZCBvdXRwdXRzIGFuZCBmdW5jdGlvbiBjYWxsaW5nLiBHZW1tYSAzIDEyQiBpcyB0aGUgc2Vjb25kIGxhcmdlc3QgaW4gdGhlIGZhbWlseSBvZiBHZW1tYSAzIG1vZGVscyBhZnRlciBbR2VtbWEgMyAyN0JdKGdvb2dsZS9nZW1tYS0zLTI3Yi1pdCkiLCJjb250ZXh0X2xlbmd0aCI6MTMxMDcyLCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0K2ltYWdlLT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0IiwiaW1hZ2UiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJHZW1pbmkiLCJpbnN0cnVjdF90eXBlIjoiZ2VtbWEifSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMDA1IiwiY29tcGxldGlvbiI6IjAuMDAwMDAwMSIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6MTMxMDcyLCJtYXhfY29tcGxldGlvbl90b2tlbnMiOm51bGwsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJjb2hlcmUvY29tbWFuZC1hIiwibmFtZSI6IkNvaGVyZTogQ29tbWFuZCBBIiwiY3JlYXRlZCI6MTc0MTg5NDM0MiwiZGVzY3JpcHRpb24iOiJDb21tYW5kIEEgaXMgYW4gb3Blbi13ZWlnaHRzIDExMUIgcGFyYW1ldGVyIG1vZGVsIHdpdGggYSAyNTZrIGNvbnRleHQgd2luZG93IGZvY3VzZWQgb24gZGVsaXZlcmluZyBncmVhdCBwZXJmb3JtYW5jZSBhY3Jvc3MgYWdlbnRpYywgbXVsdGlsaW5ndWFsLCBhbmQgY29kaW5nIHVzZSBjYXNlcy5cbkNvbXBhcmVkIHRvIG90aGVyIGxlYWRpbmcgcHJvcHJpZXRhcnkgYW5kIG9wZW4td2VpZ2h0cyBtb2RlbHMgQ29tbWFuZCBBIGRlbGl2ZXJzIG1heGltdW0gcGVyZm9ybWFuY2Ugd2l0aCBtaW5pbXVtIGhhcmR3YXJlIGNvc3RzLCBleGNlbGxpbmcgb24gYnVzaW5lc3MtY3JpdGljYWwgYWdlbnRpYyBhbmQgbXVsdGlsaW5ndWFsIHRhc2tzLiIsImNvbnRleHRfbGVuZ3RoIjoyNTYwMDAsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJPdGhlciIsImluc3RydWN0X3R5cGUiOm51bGx9LCJwcmljaW5nIjp7InByb21wdCI6IjAuMDAwMDAyNSIsImNvbXBsZXRpb24iOiIwLjAwMDAxIiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoyNTYwMDAsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6ODE5MiwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6Im9wZW5haS9ncHQtNG8tbWluaS1zZWFyY2gtcHJldmlldyIsIm5hbWUiOiJPcGVuQUk6IEdQVC00by1taW5pIFNlYXJjaCBQcmV2aWV3IiwiY3JlYXRlZCI6MTc0MTgxODEyMiwiZGVzY3JpcHRpb24iOiJHUFQtNG8gbWluaSBTZWFyY2ggUHJldmlldyBpcyBhIHNwZWNpYWxpemVkIG1vZGVsIGZvciB3ZWIgc2VhcmNoIGluIENoYXQgQ29tcGxldGlvbnMuIEl0IGlzIHRyYWluZWQgdG8gdW5kZXJzdGFuZCBhbmQgZXhlY3V0ZSB3ZWIgc2VhcmNoIHF1ZXJpZXMuIiwiY29udGV4dF9sZW5ndGgiOjEyODAwMCwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dC0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6IkdQVCIsImluc3RydWN0X3R5cGUiOm51bGx9LCJwcmljaW5nIjp7InByb21wdCI6IjAuMDAwMDAwMTUiLCJjb21wbGV0aW9uIjoiMC4wMDAwMDA2IiwicmVxdWVzdCI6IjAuMDI3NSIsImltYWdlIjoiMC4wMDAyMTciLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoxMjgwMDAsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6MTYzODQsImlzX21vZGVyYXRlZCI6dHJ1ZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6Im9wZW5haS9ncHQtNG8tc2VhcmNoLXByZXZpZXciLCJuYW1lIjoiT3BlbkFJOiBHUFQtNG8gU2VhcmNoIFByZXZpZXciLCJjcmVhdGVkIjoxNzQxODE3OTQ5LCJkZXNjcmlwdGlvbiI6IkdQVC00byBTZWFyY2ggUHJldmlld2lzIGEgc3BlY2lhbGl6ZWQgbW9kZWwgZm9yIHdlYiBzZWFyY2ggaW4gQ2hhdCBDb21wbGV0aW9ucy4gSXQgaXMgdHJhaW5lZCB0byB1bmRlcnN0YW5kIGFuZCBleGVjdXRlIHdlYiBzZWFyY2ggcXVlcmllcy4iLCJjb250ZXh0X2xlbmd0aCI6MTI4MDAwLCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiR1BUIiwiaW5zdHJ1Y3RfdHlwZSI6bnVsbH0sInByaWNpbmciOnsicHJvbXB0IjoiMC4wMDAwMDI1IiwiY29tcGxldGlvbiI6IjAuMDAwMDEiLCJyZXF1ZXN0IjoiMC4wMzUiLCJpbWFnZSI6IjAuMDAzNjEzIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6MTI4MDAwLCJtYXhfY29tcGxldGlvbl90b2tlbnMiOjE2Mzg0LCJpc19tb2RlcmF0ZWQiOnRydWV9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJyZWthYWkvcmVrYS1mbGFzaC0zOmZyZWUiLCJuYW1lIjoiUmVrYTogRmxhc2ggMyAoZnJlZSkiLCJjcmVhdGVkIjoxNzQxODEyODEzLCJkZXNjcmlwdGlvbiI6IlJla2EgRmxhc2ggMyBpcyBhIGdlbmVyYWwtcHVycG9zZSwgaW5zdHJ1Y3Rpb24tdHVuZWQgbGFyZ2UgbGFuZ3VhZ2UgbW9kZWwgd2l0aCAyMSBiaWxsaW9uIHBhcmFtZXRlcnMsIGRldmVsb3BlZCBieSBSZWthLiBJdCBleGNlbHMgYXQgZ2VuZXJhbCBjaGF0LCBjb2RpbmcgdGFza3MsIGluc3RydWN0aW9uLWZvbGxvd2luZywgYW5kIGZ1bmN0aW9uIGNhbGxpbmcuIEZlYXR1cmluZyBhIDMySyBjb250ZXh0IGxlbmd0aCBhbmQgb3B0aW1pemVkIHRocm91Z2ggcmVpbmZvcmNlbWVudCBsZWFybmluZyAoUkxPTyksIGl0IHByb3ZpZGVzIGNvbXBldGl0aXZlIHBlcmZvcm1hbmNlIGNvbXBhcmFibGUgdG8gcHJvcHJpZXRhcnkgbW9kZWxzIHdpdGhpbiBhIHNtYWxsZXIgcGFyYW1ldGVyIGZvb3RwcmludC4gSWRlYWwgZm9yIGxvdy1sYXRlbmN5LCBsb2NhbCwgb3Igb24tZGV2aWNlIGRlcGxveW1lbnRzLCBSZWthIEZsYXNoIDMgaXMgY29tcGFjdCwgc3VwcG9ydHMgZWZmaWNpZW50IHF1YW50aXphdGlvbiAoZG93biB0byAxMUdCIGF0IDQtYml0IHByZWNpc2lvbiksIGFuZCBlbXBsb3lzIGV4cGxpY2l0IHJlYXNvbmluZyB0YWdzIChcIjxyZWFzb25pbmc+XCIpIHRvIGluZGljYXRlIGl0cyBpbnRlcm5hbCB0aG91Z2h0IHByb2Nlc3MuXG5cblJla2EgRmxhc2ggMyBpcyBwcmltYXJpbHkgYW4gRW5nbGlzaCBtb2RlbCB3aXRoIGxpbWl0ZWQgbXVsdGlsaW5ndWFsIHVuZGVyc3RhbmRpbmcgY2FwYWJpbGl0aWVzLiBUaGUgbW9kZWwgd2VpZ2h0cyBhcmUgcmVsZWFzZWQgdW5kZXIgdGhlIEFwYWNoZSAyLjAgbGljZW5zZS4iLCJjb250ZXh0X2xlbmd0aCI6MzI3NjgsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJPdGhlciIsImluc3RydWN0X3R5cGUiOm51bGx9LCJwcmljaW5nIjp7InByb21wdCI6IjAiLCJjb21wbGV0aW9uIjoiMCIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6MzI3NjgsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6bnVsbCwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6Imdvb2dsZS9nZW1tYS0zLTI3Yi1pdDpmcmVlIiwibmFtZSI6Ikdvb2dsZTogR2VtbWEgMyAyN0IgKGZyZWUpIiwiY3JlYXRlZCI6MTc0MTc1NjM1OSwiZGVzY3JpcHRpb24iOiJHZW1tYSAzIGludHJvZHVjZXMgbXVsdGltb2RhbGl0eSwgc3VwcG9ydGluZyB2aXNpb24tbGFuZ3VhZ2UgaW5wdXQgYW5kIHRleHQgb3V0cHV0cy4gSXQgaGFuZGxlcyBjb250ZXh0IHdpbmRvd3MgdXAgdG8gMTI4ayB0b2tlbnMsIHVuZGVyc3RhbmRzIG92ZXIgMTQwIGxhbmd1YWdlcywgYW5kIG9mZmVycyBpbXByb3ZlZCBtYXRoLCByZWFzb25pbmcsIGFuZCBjaGF0IGNhcGFiaWxpdGllcywgaW5jbHVkaW5nIHN0cnVjdHVyZWQgb3V0cHV0cyBhbmQgZnVuY3Rpb24gY2FsbGluZy4gR2VtbWEgMyAyN0IgaXMgR29vZ2xlJ3MgbGF0ZXN0IG9wZW4gc291cmNlIG1vZGVsLCBzdWNjZXNzb3IgdG8gW0dlbW1hIDJdKGdvb2dsZS9nZW1tYS0yLTI3Yi1pdCkiLCJjb250ZXh0X2xlbmd0aCI6OTYwMDAsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQraW1hZ2UtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiLCJpbWFnZSJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6IkdlbWluaSIsImluc3RydWN0X3R5cGUiOiJnZW1tYSJ9LCJwcmljaW5nIjp7InByb21wdCI6IjAiLCJjb21wbGV0aW9uIjoiMCIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6OTYwMDAsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6ODE5MiwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6Imdvb2dsZS9nZW1tYS0zLTI3Yi1pdCIsIm5hbWUiOiJHb29nbGU6IEdlbW1hIDMgMjdCIiwiY3JlYXRlZCI6MTc0MTc1NjM1OSwiZGVzY3JpcHRpb24iOiJHZW1tYSAzIGludHJvZHVjZXMgbXVsdGltb2RhbGl0eSwgc3VwcG9ydGluZyB2aXNpb24tbGFuZ3VhZ2UgaW5wdXQgYW5kIHRleHQgb3V0cHV0cy4gSXQgaGFuZGxlcyBjb250ZXh0IHdpbmRvd3MgdXAgdG8gMTI4ayB0b2tlbnMsIHVuZGVyc3RhbmRzIG92ZXIgMTQwIGxhbmd1YWdlcywgYW5kIG9mZmVycyBpbXByb3ZlZCBtYXRoLCByZWFzb25pbmcsIGFuZCBjaGF0IGNhcGFiaWxpdGllcywgaW5jbHVkaW5nIHN0cnVjdHVyZWQgb3V0cHV0cyBhbmQgZnVuY3Rpb24gY2FsbGluZy4gR2VtbWEgMyAyN0IgaXMgR29vZ2xlJ3MgbGF0ZXN0IG9wZW4gc291cmNlIG1vZGVsLCBzdWNjZXNzb3IgdG8gW0dlbW1hIDJdKGdvb2dsZS9nZW1tYS0yLTI3Yi1pdCkiLCJjb250ZXh0X2xlbmd0aCI6MTMxMDcyLCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0K2ltYWdlLT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0IiwiaW1hZ2UiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJHZW1pbmkiLCJpbnN0cnVjdF90eXBlIjoiZ2VtbWEifSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMDEiLCJjb21wbGV0aW9uIjoiMC4wMDAwMDAyIiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAuMDAwMDI1NiIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjEzMTA3MiwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjoxNjM4NCwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6InRoZWRydW1tZXIvYW51YmlzLXByby0xMDViLXYxIiwibmFtZSI6IlRoZURydW1tZXI6IEFudWJpcyBQcm8gMTA1QiBWMSIsImNyZWF0ZWQiOjE3NDE2NDIyOTAsImRlc2NyaXB0aW9uIjoiQW51YmlzIFBybyAxMDVCIHYxIGlzIGFuIGV4cGFuZGVkIGFuZCByZWZpbmVkIHZhcmlhbnQgb2YgTWV0YeKAmXMgTGxhbWEgMy4zIDcwQiwgZmVhdHVyaW5nIDUwJSBhZGRpdGlvbmFsIGxheWVycyBhbmQgZnVydGhlciBmaW5lLXR1bmluZyB0byBsZXZlcmFnZSBpdHMgaW5jcmVhc2VkIGNhcGFjaXR5LiBEZXNpZ25lZCBmb3IgYWR2YW5jZWQgbmFycmF0aXZlLCByb2xlcGxheSwgYW5kIGluc3RydWN0aW9uYWwgdGFza3MsIGl0IGRlbW9uc3RyYXRlcyBlbmhhbmNlZCBlbW90aW9uYWwgaW50ZWxsaWdlbmNlLCBjcmVhdGl2aXR5LCBudWFuY2VkIGNoYXJhY3RlciBwb3J0cmF5YWwsIGFuZCBzdXBlcmlvciBwcm9tcHQgYWRoZXJlbmNlIGNvbXBhcmVkIHRvIHNtYWxsZXIgbW9kZWxzLiBJdHMgbGFyZ2VyIHBhcmFtZXRlciBjb3VudCBhbGxvd3MgZm9yIGRlZXBlciBjb250ZXh0dWFsIHVuZGVyc3RhbmRpbmcgYW5kIGV4dGVuZGVkIHJlYXNvbmluZyBjYXBhYmlsaXRpZXMsIG9wdGltaXplZCBmb3IgZW5nYWdpbmcsIGludGVsbGlnZW50LCBhbmQgY29oZXJlbnQgaW50ZXJhY3Rpb25zLiIsImNvbnRleHRfbGVuZ3RoIjoxMzEwNzIsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJPdGhlciIsImluc3RydWN0X3R5cGUiOm51bGx9LCJwcmljaW5nIjp7InByb21wdCI6IjAuMDAwMDAwOCIsImNvbXBsZXRpb24iOiIwLjAwMDAwMSIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6MTMxMDcyLCJtYXhfY29tcGxldGlvbl90b2tlbnMiOjEzMTA3MiwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6ImxhdGl0dWRlZ2FtZXMvd2F5ZmFyZXItbGFyZ2UtNzBiLWxsYW1hLTMuMyIsIm5hbWUiOiJMYXRpdHVkZUdhbWVzOiBXYXlmYXJlciBMYXJnZSA3MEIgTGxhbWEgMy4zIiwiY3JlYXRlZCI6MTc0MTYzNjg4NSwiZGVzY3JpcHRpb24iOiJXYXlmYXJlciBMYXJnZSA3MEIgaXMgYSByb2xlcGxheSBhbmQgdGV4dC1hZHZlbnR1cmUgbW9kZWwgZmluZS10dW5lZCBmcm9tIE1ldGHigJlzIExsYW1hLTMuMy03MEItSW5zdHJ1Y3QuIFNwZWNpZmljYWxseSBvcHRpbWl6ZWQgZm9yIG5hcnJhdGl2ZS1kcml2ZW4sIGNoYWxsZW5naW5nIHNjZW5hcmlvcywgaXQgaW50cm9kdWNlcyByZWFsaXN0aWMgc3Rha2VzLCBjb25mbGljdHMsIGFuZCBjb25zZXF1ZW5jZXMgb2Z0ZW4gYXZvaWRlZCBieSBzdGFuZGFyZCBSTEhGLWFsaWduZWQgbW9kZWxzLiBUcmFpbmVkIHVzaW5nIGEgY3VyYXRlZCBibGVuZCBvZiBhZHZlbnR1cmUsIHJvbGVwbGF5LCBhbmQgaW5zdHJ1Y3RpdmUgZmljdGlvbiBkYXRhc2V0cywgV2F5ZmFyZXIgZW1waGFzaXplcyB0ZW5zZSBzdG9yeXRlbGxpbmcsIGF1dGhlbnRpYyBwbGF5ZXIgZmFpbHVyZSBzY2VuYXJpb3MsIGFuZCByb2J1c3QgbmFycmF0aXZlIGltbWVyc2lvbiwgbWFraW5nIGl0IHVuaXF1ZWx5IHN1aXRlZCBmb3IgaW50ZXJhY3RpdmUgZmljdGlvbiBhbmQgZ2FtaW5nIGV4cGVyaWVuY2VzLiIsImNvbnRleHRfbGVuZ3RoIjoxMzEwNzIsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJMbGFtYTMiLCJpbnN0cnVjdF90eXBlIjpudWxsfSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMDgiLCJjb21wbGV0aW9uIjoiMC4wMDAwMDA5IiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoxMzEwNzIsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6MTMxMDcyLCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoidGhlZHJ1bW1lci9za3lmYWxsLTM2Yi12MiIsIm5hbWUiOiJUaGVEcnVtbWVyOiBTa3lmYWxsIDM2QiBWMiIsImNyZWF0ZWQiOjE3NDE2MzY1NjYsImRlc2NyaXB0aW9uIjoiU2t5ZmFsbCAzNkIgdjIgaXMgYW4gZW5oYW5jZWQgaXRlcmF0aW9uIG9mIE1pc3RyYWwgU21hbGwgMjUwMSwgc3BlY2lmaWNhbGx5IGZpbmUtdHVuZWQgZm9yIGltcHJvdmVkIGNyZWF0aXZpdHksIG51YW5jZWQgd3JpdGluZywgcm9sZS1wbGF5aW5nLCBhbmQgY29oZXJlbnQgc3Rvcnl0ZWxsaW5nLiIsImNvbnRleHRfbGVuZ3RoIjozMjc2OCwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dC0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6Ik90aGVyIiwiaW5zdHJ1Y3RfdHlwZSI6bnVsbH0sInByaWNpbmciOnsicHJvbXB0IjoiMC4wMDAwMDA1IiwiY29tcGxldGlvbiI6IjAuMDAwMDAwOCIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6MzI3NjgsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6MzI3NjgsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJtaWNyb3NvZnQvcGhpLTQtbXVsdGltb2RhbC1pbnN0cnVjdCIsIm5hbWUiOiJNaWNyb3NvZnQ6IFBoaSA0IE11bHRpbW9kYWwgSW5zdHJ1Y3QiLCJjcmVhdGVkIjoxNzQxMzk2Mjg0LCJkZXNjcmlwdGlvbiI6IlBoaS00IE11bHRpbW9kYWwgSW5zdHJ1Y3QgaXMgYSB2ZXJzYXRpbGUgNS42QiBwYXJhbWV0ZXIgZm91bmRhdGlvbiBtb2RlbCB0aGF0IGNvbWJpbmVzIGFkdmFuY2VkIHJlYXNvbmluZyBhbmQgaW5zdHJ1Y3Rpb24tZm9sbG93aW5nIGNhcGFiaWxpdGllcyBhY3Jvc3MgYm90aCB0ZXh0IGFuZCB2aXN1YWwgaW5wdXRzLCBwcm92aWRpbmcgYWNjdXJhdGUgdGV4dCBvdXRwdXRzLiBUaGUgdW5pZmllZCBhcmNoaXRlY3R1cmUgZW5hYmxlcyBlZmZpY2llbnQsIGxvdy1sYXRlbmN5IGluZmVyZW5jZSwgc3VpdGFibGUgZm9yIGVkZ2UgYW5kIG1vYmlsZSBkZXBsb3ltZW50cy4gUGhpLTQgTXVsdGltb2RhbCBJbnN0cnVjdCBzdXBwb3J0cyB0ZXh0IGlucHV0cyBpbiBtdWx0aXBsZSBsYW5ndWFnZXMgaW5jbHVkaW5nIEFyYWJpYywgQ2hpbmVzZSwgRW5nbGlzaCwgRnJlbmNoLCBHZXJtYW4sIEphcGFuZXNlLCBTcGFuaXNoLCBhbmQgbW9yZSwgd2l0aCB2aXN1YWwgaW5wdXQgb3B0aW1pemVkIHByaW1hcmlseSBmb3IgRW5nbGlzaC4gSXQgZGVsaXZlcnMgaW1wcmVzc2l2ZSBwZXJmb3JtYW5jZSBvbiBtdWx0aW1vZGFsIHRhc2tzIGludm9sdmluZyBtYXRoZW1hdGljYWwsIHNjaWVudGlmaWMsIGFuZCBkb2N1bWVudCByZWFzb25pbmcsIHByb3ZpZGluZyBkZXZlbG9wZXJzIGFuZCBlbnRlcnByaXNlcyBhIHBvd2VyZnVsIHlldCBjb21wYWN0IG1vZGVsIGZvciBzb3BoaXN0aWNhdGVkIGludGVyYWN0aXZlIGFwcGxpY2F0aW9ucy4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgW1BoaS00IE11bHRpbW9kYWwgYmxvZyBwb3N0XShodHRwczovL2F6dXJlLm1pY3Jvc29mdC5jb20vZW4tdXMvYmxvZy9lbXBvd2VyaW5nLWlubm92YXRpb24tdGhlLW5leHQtZ2VuZXJhdGlvbi1vZi10aGUtcGhpLWZhbWlseS8pLlxuIiwiY29udGV4dF9sZW5ndGgiOjEzMTA3MiwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dCtpbWFnZS0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCIsImltYWdlIl0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiT3RoZXIiLCJpbnN0cnVjdF90eXBlIjpudWxsfSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMDA1IiwiY29tcGxldGlvbiI6IjAuMDAwMDAwMSIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwLjAwMDE3Njg1Iiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6MTMxMDcyLCJtYXhfY29tcGxldGlvbl90b2tlbnMiOm51bGwsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJwZXJwbGV4aXR5L3NvbmFyLXJlYXNvbmluZy1wcm8iLCJuYW1lIjoiUGVycGxleGl0eTogU29uYXIgUmVhc29uaW5nIFBybyIsImNyZWF0ZWQiOjE3NDEzMTMzMDgsImRlc2NyaXB0aW9uIjoiTm90ZTogU29uYXIgUHJvIHByaWNpbmcgaW5jbHVkZXMgUGVycGxleGl0eSBzZWFyY2ggcHJpY2luZy4gU2VlIFtkZXRhaWxzIGhlcmVdKGh0dHBzOi8vZG9jcy5wZXJwbGV4aXR5LmFpL2d1aWRlcy9wcmljaW5nI2RldGFpbGVkLXByaWNpbmctYnJlYWtkb3duLWZvci1zb25hci1yZWFzb25pbmctcHJvLWFuZC1zb25hci1wcm8pXG5cblNvbmFyIFJlYXNvbmluZyBQcm8gaXMgYSBwcmVtaWVyIHJlYXNvbmluZyBtb2RlbCBwb3dlcmVkIGJ5IERlZXBTZWVrIFIxIHdpdGggQ2hhaW4gb2YgVGhvdWdodCAoQ29UKS4gRGVzaWduZWQgZm9yIGFkdmFuY2VkIHVzZSBjYXNlcywgaXQgc3VwcG9ydHMgaW4tZGVwdGgsIG11bHRpLXN0ZXAgcXVlcmllcyB3aXRoIGEgbGFyZ2VyIGNvbnRleHQgd2luZG93IGFuZCBjYW4gc3VyZmFjZSBtb3JlIGNpdGF0aW9ucyBwZXIgc2VhcmNoLCBlbmFibGluZyBtb3JlIGNvbXByZWhlbnNpdmUgYW5kIGV4dGVuc2libGUgcmVzcG9uc2VzLiIsImNvbnRleHRfbGVuZ3RoIjoxMjgwMDAsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJPdGhlciIsImluc3RydWN0X3R5cGUiOiJkZWVwc2Vlay1yMSJ9LCJwcmljaW5nIjp7InByb21wdCI6IjAuMDAwMDAyIiwiY29tcGxldGlvbiI6IjAuMDAwMDA4IiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMC4wMDUiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6MTI4MDAwLCJtYXhfY29tcGxldGlvbl90b2tlbnMiOm51bGwsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJwZXJwbGV4aXR5L3NvbmFyLXBybyIsIm5hbWUiOiJQZXJwbGV4aXR5OiBTb25hciBQcm8iLCJjcmVhdGVkIjoxNzQxMzEyNDIzLCJkZXNjcmlwdGlvbiI6Ik5vdGU6IFNvbmFyIFBybyBwcmljaW5nIGluY2x1ZGVzIFBlcnBsZXhpdHkgc2VhcmNoIHByaWNpbmcuIFNlZSBbZGV0YWlscyBoZXJlXShodHRwczovL2RvY3MucGVycGxleGl0eS5haS9ndWlkZXMvcHJpY2luZyNkZXRhaWxlZC1wcmljaW5nLWJyZWFrZG93bi1mb3Itc29uYXItcmVhc29uaW5nLXByby1hbmQtc29uYXItcHJvKVxuXG5Gb3IgZW50ZXJwcmlzZXMgc2Vla2luZyBtb3JlIGFkdmFuY2VkIGNhcGFiaWxpdGllcywgdGhlIFNvbmFyIFBybyBBUEkgY2FuIGhhbmRsZSBpbi1kZXB0aCwgbXVsdGktc3RlcCBxdWVyaWVzIHdpdGggYWRkZWQgZXh0ZW5zaWJpbGl0eSwgbGlrZSBkb3VibGUgdGhlIG51bWJlciBvZiBjaXRhdGlvbnMgcGVyIHNlYXJjaCBhcyBTb25hciBvbiBhdmVyYWdlLiBQbHVzLCB3aXRoIGEgbGFyZ2VyIGNvbnRleHQgd2luZG93LCBpdCBjYW4gaGFuZGxlIGxvbmdlciBhbmQgbW9yZSBudWFuY2VkIHNlYXJjaGVzIGFuZCBmb2xsb3ctdXAgcXVlc3Rpb25zLiAiLCJjb250ZXh0X2xlbmd0aCI6MjAwMDAwLCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiT3RoZXIiLCJpbnN0cnVjdF90eXBlIjpudWxsfSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMyIsImNvbXBsZXRpb24iOiIwLjAwMDAxNSIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAuMDA1IiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjIwMDAwMCwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjo4MDAwLCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoicGVycGxleGl0eS9zb25hci1kZWVwLXJlc2VhcmNoIiwibmFtZSI6IlBlcnBsZXhpdHk6IFNvbmFyIERlZXAgUmVzZWFyY2giLCJjcmVhdGVkIjoxNzQxMzExMjQ2LCJkZXNjcmlwdGlvbiI6IlNvbmFyIERlZXAgUmVzZWFyY2ggaXMgYSByZXNlYXJjaC1mb2N1c2VkIG1vZGVsIGRlc2lnbmVkIGZvciBtdWx0aS1zdGVwIHJldHJpZXZhbCwgc3ludGhlc2lzLCBhbmQgcmVhc29uaW5nIGFjcm9zcyBjb21wbGV4IHRvcGljcy4gSXQgYXV0b25vbW91c2x5IHNlYXJjaGVzLCByZWFkcywgYW5kIGV2YWx1YXRlcyBzb3VyY2VzLCByZWZpbmluZyBpdHMgYXBwcm9hY2ggYXMgaXQgZ2F0aGVycyBpbmZvcm1hdGlvbi4gVGhpcyBlbmFibGVzIGNvbXByZWhlbnNpdmUgcmVwb3J0IGdlbmVyYXRpb24gYWNyb3NzIGRvbWFpbnMgbGlrZSBmaW5hbmNlLCB0ZWNobm9sb2d5LCBoZWFsdGgsIGFuZCBjdXJyZW50IGV2ZW50cy5cblxuTm90ZXMgb24gUHJpY2luZyAoW1NvdXJjZV0oaHR0cHM6Ly9kb2NzLnBlcnBsZXhpdHkuYWkvZ3VpZGVzL3ByaWNpbmcjZGV0YWlsZWQtcHJpY2luZy1icmVha2Rvd24tZm9yLXNvbmFyLWRlZXAtcmVzZWFyY2gpKSBcbi0gSW5wdXQgdG9rZW5zIGNvbXByaXNlIG9mIFByb21wdCB0b2tlbnMgKHVzZXIgcHJvbXB0KSArIENpdGF0aW9uIHRva2VucyAodGhlc2UgYXJlIHByb2Nlc3NlZCB0b2tlbnMgZnJvbSBydW5uaW5nIHNlYXJjaGVzKVxuLSBEZWVwIFJlc2VhcmNoIHJ1bnMgbXVsdGlwbGUgc2VhcmNoZXMgdG8gY29uZHVjdCBleGhhdXN0aXZlIHJlc2VhcmNoLiBTZWFyY2hlcyBhcmUgcHJpY2VkIGF0ICQ1LzEwMDAgc2VhcmNoZXMuIEEgcmVxdWVzdCB0aGF0IGRvZXMgMzAgc2VhcmNoZXMgd2lsbCBjb3N0ICQwLjE1IGluIHRoaXMgc3RlcC5cbi0gUmVhc29uaW5nIGlzIGEgZGlzdGluY3Qgc3RlcCBpbiBEZWVwIFJlc2VhcmNoIHNpbmNlIGl0IGRvZXMgZXh0ZW5zaXZlIGF1dG9tYXRlZCByZWFzb25pbmcgdGhyb3VnaCBhbGwgdGhlIG1hdGVyaWFsIGl0IGdhdGhlcnMgZHVyaW5nIGl0cyByZXNlYXJjaCBwaGFzZS4gUmVhc29uaW5nIHRva2VucyBoZXJlIGFyZSBhIGJpdCBkaWZmZXJlbnQgdGhhbiB0aGUgQ29UcyBpbiB0aGUgYW5zd2VyIC0gdGhlc2UgYXJlIHRva2VucyB0aGF0IHdlIHVzZSB0byByZWFzb24gdGhyb3VnaCB0aGUgcmVzZWFyY2ggbWF0ZXJpYWwgcHJpb3IgdG8gZ2VuZXJhdGluZyB0aGUgb3V0cHV0cyB2aWEgdGhlIENvVHMuIFJlYXNvbmluZyB0b2tlbnMgYXJlIHByaWNlZCBhdCAkMy8xTSB0b2tlbnMiLCJjb250ZXh0X2xlbmd0aCI6MTI4MDAwLCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiT3RoZXIiLCJpbnN0cnVjdF90eXBlIjoiZGVlcHNlZWstcjEifSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMiIsImNvbXBsZXRpb24iOiIwLjAwMDAwOCIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAuMDA1IiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMC4wMDAwMDMifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoxMjgwMDAsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6bnVsbCwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6ImRlZXBzZWVrL2RlZXBzZWVrLXIxLXplcm86ZnJlZSIsIm5hbWUiOiJEZWVwU2VlazogRGVlcFNlZWsgUjEgWmVybyAoZnJlZSkiLCJjcmVhdGVkIjoxNzQxMjk3NDM0LCJkZXNjcmlwdGlvbiI6IkRlZXBTZWVrLVIxLVplcm8gaXMgYSBtb2RlbCB0cmFpbmVkIHZpYSBsYXJnZS1zY2FsZSByZWluZm9yY2VtZW50IGxlYXJuaW5nIChSTCkgd2l0aG91dCBzdXBlcnZpc2VkIGZpbmUtdHVuaW5nIChTRlQpIGFzIGEgcHJlbGltaW5hcnkgc3RlcC4gSXQncyA2NzFCIHBhcmFtZXRlcnMgaW4gc2l6ZSwgd2l0aCAzN0IgYWN0aXZlIGluIGFuIGluZmVyZW5jZSBwYXNzLlxuXG5JdCBkZW1vbnN0cmF0ZXMgcmVtYXJrYWJsZSBwZXJmb3JtYW5jZSBvbiByZWFzb25pbmcuIFdpdGggUkwsIERlZXBTZWVrLVIxLVplcm8gbmF0dXJhbGx5IGVtZXJnZWQgd2l0aCBudW1lcm91cyBwb3dlcmZ1bCBhbmQgaW50ZXJlc3RpbmcgcmVhc29uaW5nIGJlaGF2aW9ycy5cblxuRGVlcFNlZWstUjEtWmVybyBlbmNvdW50ZXJzIGNoYWxsZW5nZXMgc3VjaCBhcyBlbmRsZXNzIHJlcGV0aXRpb24sIHBvb3IgcmVhZGFiaWxpdHksIGFuZCBsYW5ndWFnZSBtaXhpbmcuIFNlZSBbRGVlcFNlZWsgUjFdKC9kZWVwc2Vlay9kZWVwc2Vlay1yMSkgZm9yIHRoZSBTRlQgbW9kZWwuXG5cbiIsImNvbnRleHRfbGVuZ3RoIjoxNjM4NDAsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJPdGhlciIsImluc3RydWN0X3R5cGUiOiJkZWVwc2Vlay1yMSJ9LCJwcmljaW5nIjp7InByb21wdCI6IjAiLCJjb21wbGV0aW9uIjoiMCIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6MTYzODQwLCJtYXhfY29tcGxldGlvbl90b2tlbnMiOm51bGwsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJxd2VuL3F3cS0zMmI6ZnJlZSIsIm5hbWUiOiJRd2VuOiBRd1EgMzJCIChmcmVlKSIsImNyZWF0ZWQiOjE3NDEyMDg4MTQsImRlc2NyaXB0aW9uIjoiUXdRIGlzIHRoZSByZWFzb25pbmcgbW9kZWwgb2YgdGhlIFF3ZW4gc2VyaWVzLiBDb21wYXJlZCB3aXRoIGNvbnZlbnRpb25hbCBpbnN0cnVjdGlvbi10dW5lZCBtb2RlbHMsIFF3USwgd2hpY2ggaXMgY2FwYWJsZSBvZiB0aGlua2luZyBhbmQgcmVhc29uaW5nLCBjYW4gYWNoaWV2ZSBzaWduaWZpY2FudGx5IGVuaGFuY2VkIHBlcmZvcm1hbmNlIGluIGRvd25zdHJlYW0gdGFza3MsIGVzcGVjaWFsbHkgaGFyZCBwcm9ibGVtcy4gUXdRLTMyQiBpcyB0aGUgbWVkaXVtLXNpemVkIHJlYXNvbmluZyBtb2RlbCwgd2hpY2ggaXMgY2FwYWJsZSBvZiBhY2hpZXZpbmcgY29tcGV0aXRpdmUgcGVyZm9ybWFuY2UgYWdhaW5zdCBzdGF0ZS1vZi10aGUtYXJ0IHJlYXNvbmluZyBtb2RlbHMsIGUuZy4sIERlZXBTZWVrLVIxLCBvMS1taW5pLiIsImNvbnRleHRfbGVuZ3RoIjo0MDAwMCwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dC0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6IlF3ZW4iLCJpbnN0cnVjdF90eXBlIjoicXdxIn0sInByaWNpbmciOnsicHJvbXB0IjoiMCIsImNvbXBsZXRpb24iOiIwIiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjo0MDAwMCwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjo0MDAwMCwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6InF3ZW4vcXdxLTMyYiIsIm5hbWUiOiJRd2VuOiBRd1EgMzJCIiwiY3JlYXRlZCI6MTc0MTIwODgxNCwiZGVzY3JpcHRpb24iOiJRd1EgaXMgdGhlIHJlYXNvbmluZyBtb2RlbCBvZiB0aGUgUXdlbiBzZXJpZXMuIENvbXBhcmVkIHdpdGggY29udmVudGlvbmFsIGluc3RydWN0aW9uLXR1bmVkIG1vZGVscywgUXdRLCB3aGljaCBpcyBjYXBhYmxlIG9mIHRoaW5raW5nIGFuZCByZWFzb25pbmcsIGNhbiBhY2hpZXZlIHNpZ25pZmljYW50bHkgZW5oYW5jZWQgcGVyZm9ybWFuY2UgaW4gZG93bnN0cmVhbSB0YXNrcywgZXNwZWNpYWxseSBoYXJkIHByb2JsZW1zLiBRd1EtMzJCIGlzIHRoZSBtZWRpdW0tc2l6ZWQgcmVhc29uaW5nIG1vZGVsLCB3aGljaCBpcyBjYXBhYmxlIG9mIGFjaGlldmluZyBjb21wZXRpdGl2ZSBwZXJmb3JtYW5jZSBhZ2FpbnN0IHN0YXRlLW9mLXRoZS1hcnQgcmVhc29uaW5nIG1vZGVscywgZS5nLiwgRGVlcFNlZWstUjEsIG8xLW1pbmkuIiwiY29udGV4dF9sZW5ndGgiOjEzMTA3MiwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dC0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6IlF3ZW4iLCJpbnN0cnVjdF90eXBlIjoicXdxIn0sInByaWNpbmciOnsicHJvbXB0IjoiMC4wMDAwMDAxNSIsImNvbXBsZXRpb24iOiIwLjAwMDAwMDIiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjEzMTA3MiwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjpudWxsLCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoibW9vbnNob3RhaS9tb29ubGlnaHQtMTZiLWEzYi1pbnN0cnVjdDpmcmVlIiwibmFtZSI6Ik1vb25zaG90IEFJOiBNb29ubGlnaHQgMTZCIEEzQiBJbnN0cnVjdCAoZnJlZSkiLCJjcmVhdGVkIjoxNzQwNzE5ODAxLCJkZXNjcmlwdGlvbiI6Ik1vb25saWdodC0xNkItQTNCLUluc3RydWN0IGlzIGEgMTZCLXBhcmFtZXRlciBNaXh0dXJlLW9mLUV4cGVydHMgKE1vRSkgbGFuZ3VhZ2UgbW9kZWwgZGV2ZWxvcGVkIGJ5IE1vb25zaG90IEFJLiBJdCBpcyBvcHRpbWl6ZWQgZm9yIGluc3RydWN0aW9uLWZvbGxvd2luZyB0YXNrcyB3aXRoIDNCIGFjdGl2YXRlZCBwYXJhbWV0ZXJzIHBlciBpbmZlcmVuY2UuIFRoZSBtb2RlbCBhZHZhbmNlcyB0aGUgUGFyZXRvIGZyb250aWVyIGluIHBlcmZvcm1hbmNlIHBlciBGTE9QIGFjcm9zcyBFbmdsaXNoLCBjb2RpbmcsIG1hdGgsIGFuZCBDaGluZXNlIGJlbmNobWFya3MuIEl0IG91dHBlcmZvcm1zIGNvbXBhcmFibGUgbW9kZWxzIGxpa2UgTGxhbWEzLTNCIGFuZCBEZWVwc2Vlay12Mi1MaXRlIHdoaWxlIG1haW50YWluaW5nIGVmZmljaWVudCBkZXBsb3ltZW50IGNhcGFiaWxpdGllcyB0aHJvdWdoIEh1Z2dpbmcgRmFjZSBpbnRlZ3JhdGlvbiBhbmQgY29tcGF0aWJpbGl0eSB3aXRoIHBvcHVsYXIgaW5mZXJlbmNlIGVuZ2luZXMgbGlrZSB2TExNMTIuIiwiY29udGV4dF9sZW5ndGgiOjgxOTIsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJPdGhlciIsImluc3RydWN0X3R5cGUiOm51bGx9LCJwcmljaW5nIjp7InByb21wdCI6IjAiLCJjb21wbGV0aW9uIjoiMCIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6ODE5MiwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjpudWxsLCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoibm91c3Jlc2VhcmNoL2RlZXBoZXJtZXMtMy1sbGFtYS0zLThiLXByZXZpZXc6ZnJlZSIsIm5hbWUiOiJOb3VzOiBEZWVwSGVybWVzIDMgTGxhbWEgMyA4QiBQcmV2aWV3IChmcmVlKSIsImNyZWF0ZWQiOjE3NDA3MTkzNzIsImRlc2NyaXB0aW9uIjoiRGVlcEhlcm1lcyAzIFByZXZpZXcgaXMgdGhlIGxhdGVzdCB2ZXJzaW9uIG9mIG91ciBmbGFnc2hpcCBIZXJtZXMgc2VyaWVzIG9mIExMTXMgYnkgTm91cyBSZXNlYXJjaCwgYW5kIG9uZSBvZiB0aGUgZmlyc3QgbW9kZWxzIGluIHRoZSB3b3JsZCB0byB1bmlmeSBSZWFzb25pbmcgKGxvbmcgY2hhaW5zIG9mIHRob3VnaHQgdGhhdCBpbXByb3ZlIGFuc3dlciBhY2N1cmFjeSkgYW5kIG5vcm1hbCBMTE0gcmVzcG9uc2UgbW9kZXMgaW50byBvbmUgbW9kZWwuIFdlIGhhdmUgYWxzbyBpbXByb3ZlZCBMTE0gYW5ub3RhdGlvbiwganVkZ2VtZW50LCBhbmQgZnVuY3Rpb24gY2FsbGluZy5cblxuRGVlcEhlcm1lcyAzIFByZXZpZXcgaXMgb25lIG9mIHRoZSBmaXJzdCBMTE0gbW9kZWxzIHRvIHVuaWZ5IGJvdGggXCJpbnR1aXRpdmVcIiwgdHJhZGl0aW9uYWwgbW9kZSByZXNwb25zZXMgYW5kIGxvbmcgY2hhaW4gb2YgdGhvdWdodCByZWFzb25pbmcgcmVzcG9uc2VzIGludG8gYSBzaW5nbGUgbW9kZWwsIHRvZ2dsZWQgYnkgYSBzeXN0ZW0gcHJvbXB0LiIsImNvbnRleHRfbGVuZ3RoIjoxMzEwNzIsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJPdGhlciIsImluc3RydWN0X3R5cGUiOm51bGx9LCJwcmljaW5nIjp7InByb21wdCI6IjAiLCJjb21wbGV0aW9uIjoiMCIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6MTMxMDcyLCJtYXhfY29tcGxldGlvbl90b2tlbnMiOm51bGwsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJvcGVuYWkvZ3B0LTQuNS1wcmV2aWV3IiwibmFtZSI6Ik9wZW5BSTogR1BULTQuNSAoUHJldmlldykiLCJjcmVhdGVkIjoxNzQwNjg3ODEwLCJkZXNjcmlwdGlvbiI6IkdQVC00LjUgKFByZXZpZXcpIGlzIGEgcmVzZWFyY2ggcHJldmlldyBvZiBPcGVuQUnigJlzIGxhdGVzdCBsYW5ndWFnZSBtb2RlbCwgZGVzaWduZWQgdG8gYWR2YW5jZSBjYXBhYmlsaXRpZXMgaW4gcmVhc29uaW5nLCBjcmVhdGl2aXR5LCBhbmQgbXVsdGktdHVybiBjb252ZXJzYXRpb24uIEl0IGJ1aWxkcyBvbiBwcmV2aW91cyBpdGVyYXRpb25zIHdpdGggaW1wcm92ZW1lbnRzIGluIHdvcmxkIGtub3dsZWRnZSwgY29udGV4dHVhbCBjb2hlcmVuY2UsIGFuZCB0aGUgYWJpbGl0eSB0byBmb2xsb3cgdXNlciBpbnRlbnQgbW9yZSBlZmZlY3RpdmVseS5cblxuVGhlIG1vZGVsIGRlbW9uc3RyYXRlcyBlbmhhbmNlZCBwZXJmb3JtYW5jZSBpbiB0YXNrcyB0aGF0IHJlcXVpcmUgb3Blbi1lbmRlZCB0aGlua2luZywgcHJvYmxlbS1zb2x2aW5nLCBhbmQgY29tbXVuaWNhdGlvbi4gRWFybHkgdGVzdGluZyBzdWdnZXN0cyBpdCBpcyBiZXR0ZXIgYXQgZ2VuZXJhdGluZyBudWFuY2VkIHJlc3BvbnNlcywgbWFpbnRhaW5pbmcgbG9uZy1jb250ZXh0IGNvaGVyZW5jZSwgYW5kIHJlZHVjaW5nIGhhbGx1Y2luYXRpb25zIGNvbXBhcmVkIHRvIGVhcmxpZXIgdmVyc2lvbnMuXG5cblRoaXMgcmVzZWFyY2ggcHJldmlldyBpcyBpbnRlbmRlZCB0byBoZWxwIGV2YWx1YXRlIEdQVC00LjXigJlzIHN0cmVuZ3RocyBhbmQgbGltaXRhdGlvbnMgaW4gcmVhbC13b3JsZCB1c2UgY2FzZXMgYXMgT3BlbkFJIGNvbnRpbnVlcyB0byByZWZpbmUgYW5kIGRldmVsb3AgZnV0dXJlIG1vZGVscy4gUmVhZCBtb3JlIGF0IHRoZSBbYmxvZyBwb3N0IGhlcmUuXShodHRwczovL29wZW5haS5jb20vaW5kZXgvaW50cm9kdWNpbmctZ3B0LTQtNS8pIiwiY29udGV4dF9sZW5ndGgiOjEyODAwMCwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dCtpbWFnZS0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCIsImltYWdlIl0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiR1BUIiwiaW5zdHJ1Y3RfdHlwZSI6bnVsbH0sInByaWNpbmciOnsicHJvbXB0IjoiMC4wMDAwNzUiLCJjb21wbGV0aW9uIjoiMC4wMDAxNSIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwLjEwODM3NSIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCIsImlucHV0X2NhY2hlX3JlYWQiOiIwLjAwMDAzNzUifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoxMjgwMDAsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6MTYzODQsImlzX21vZGVyYXRlZCI6dHJ1ZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6Imdvb2dsZS9nZW1pbmktMi4wLWZsYXNoLWxpdGUtMDAxIiwibmFtZSI6Ikdvb2dsZTogR2VtaW5pIDIuMCBGbGFzaCBMaXRlIiwiY3JlYXRlZCI6MTc0MDUwNjIxMiwiZGVzY3JpcHRpb24iOiJHZW1pbmkgMi4wIEZsYXNoIExpdGUgb2ZmZXJzIGEgc2lnbmlmaWNhbnRseSBmYXN0ZXIgdGltZSB0byBmaXJzdCB0b2tlbiAoVFRGVCkgY29tcGFyZWQgdG8gW0dlbWluaSBGbGFzaCAxLjVdKC9nb29nbGUvZ2VtaW5pLWZsYXNoLTEuNSksIHdoaWxlIG1haW50YWluaW5nIHF1YWxpdHkgb24gcGFyIHdpdGggbGFyZ2VyIG1vZGVscyBsaWtlIFtHZW1pbmkgUHJvIDEuNV0oL2dvb2dsZS9nZW1pbmktcHJvLTEuNSksIGFsbCBhdCBleHRyZW1lbHkgZWNvbm9taWNhbCB0b2tlbiBwcmljZXMuIiwiY29udGV4dF9sZW5ndGgiOjEwNDg1NzYsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQraW1hZ2UtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiLCJpbWFnZSJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6IkdlbWluaSIsImluc3RydWN0X3R5cGUiOm51bGx9LCJwcmljaW5nIjp7InByb21wdCI6IjAuMDAwMDAwMDc1IiwiY29tcGxldGlvbiI6IjAuMDAwMDAwMyIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6MTA0ODU3NiwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjo4MTkyLCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoiYW50aHJvcGljL2NsYXVkZS0zLjctc29ubmV0IiwibmFtZSI6IkFudGhyb3BpYzogQ2xhdWRlIDMuNyBTb25uZXQiLCJjcmVhdGVkIjoxNzQwNDIyMTEwLCJkZXNjcmlwdGlvbiI6IkNsYXVkZSAzLjcgU29ubmV0IGlzIGFuIGFkdmFuY2VkIGxhcmdlIGxhbmd1YWdlIG1vZGVsIHdpdGggaW1wcm92ZWQgcmVhc29uaW5nLCBjb2RpbmcsIGFuZCBwcm9ibGVtLXNvbHZpbmcgY2FwYWJpbGl0aWVzLiBJdCBpbnRyb2R1Y2VzIGEgaHlicmlkIHJlYXNvbmluZyBhcHByb2FjaCwgYWxsb3dpbmcgdXNlcnMgdG8gY2hvb3NlIGJldHdlZW4gcmFwaWQgcmVzcG9uc2VzIGFuZCBleHRlbmRlZCwgc3RlcC1ieS1zdGVwIHByb2Nlc3NpbmcgZm9yIGNvbXBsZXggdGFza3MuIFRoZSBtb2RlbCBkZW1vbnN0cmF0ZXMgbm90YWJsZSBpbXByb3ZlbWVudHMgaW4gY29kaW5nLCBwYXJ0aWN1bGFybHkgaW4gZnJvbnQtZW5kIGRldmVsb3BtZW50IGFuZCBmdWxsLXN0YWNrIHVwZGF0ZXMsIGFuZCBleGNlbHMgaW4gYWdlbnRpYyB3b3JrZmxvd3MsIHdoZXJlIGl0IGNhbiBhdXRvbm9tb3VzbHkgbmF2aWdhdGUgbXVsdGktc3RlcCBwcm9jZXNzZXMuIFxuXG5DbGF1ZGUgMy43IFNvbm5ldCBtYWludGFpbnMgcGVyZm9ybWFuY2UgcGFyaXR5IHdpdGggaXRzIHByZWRlY2Vzc29yIGluIHN0YW5kYXJkIG1vZGUgd2hpbGUgb2ZmZXJpbmcgYW4gZXh0ZW5kZWQgcmVhc29uaW5nIG1vZGUgZm9yIGVuaGFuY2VkIGFjY3VyYWN5IGluIG1hdGgsIGNvZGluZywgYW5kIGluc3RydWN0aW9uLWZvbGxvd2luZyB0YXNrcy5cblxuUmVhZCBtb3JlIGF0IHRoZSBbYmxvZyBwb3N0IGhlcmVdKGh0dHBzOi8vd3d3LmFudGhyb3BpYy5jb20vbmV3cy9jbGF1ZGUtMy03LXNvbm5ldCkiLCJjb250ZXh0X2xlbmd0aCI6MjAwMDAwLCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0K2ltYWdlLT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0IiwiaW1hZ2UiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJDbGF1ZGUiLCJpbnN0cnVjdF90eXBlIjpudWxsfSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMyIsImNvbXBsZXRpb24iOiIwLjAwMDAxNSIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwLjAwNDgiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAiLCJpbnB1dF9jYWNoZV9yZWFkIjoiMC4wMDAwMDAzIiwiaW5wdXRfY2FjaGVfd3JpdGUiOiIwLjAwMDAwMzc1In0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6MjAwMDAwLCJtYXhfY29tcGxldGlvbl90b2tlbnMiOjY0MDAwLCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoiYW50aHJvcGljL2NsYXVkZS0zLjctc29ubmV0OnRoaW5raW5nIiwibmFtZSI6IkFudGhyb3BpYzogQ2xhdWRlIDMuNyBTb25uZXQgKHRoaW5raW5nKSIsImNyZWF0ZWQiOjE3NDA0MjIxMTAsImRlc2NyaXB0aW9uIjoiQ2xhdWRlIDMuNyBTb25uZXQgaXMgYW4gYWR2YW5jZWQgbGFyZ2UgbGFuZ3VhZ2UgbW9kZWwgd2l0aCBpbXByb3ZlZCByZWFzb25pbmcsIGNvZGluZywgYW5kIHByb2JsZW0tc29sdmluZyBjYXBhYmlsaXRpZXMuIEl0IGludHJvZHVjZXMgYSBoeWJyaWQgcmVhc29uaW5nIGFwcHJvYWNoLCBhbGxvd2luZyB1c2VycyB0byBjaG9vc2UgYmV0d2VlbiByYXBpZCByZXNwb25zZXMgYW5kIGV4dGVuZGVkLCBzdGVwLWJ5LXN0ZXAgcHJvY2Vzc2luZyBmb3IgY29tcGxleCB0YXNrcy4gVGhlIG1vZGVsIGRlbW9uc3RyYXRlcyBub3RhYmxlIGltcHJvdmVtZW50cyBpbiBjb2RpbmcsIHBhcnRpY3VsYXJseSBpbiBmcm9udC1lbmQgZGV2ZWxvcG1lbnQgYW5kIGZ1bGwtc3RhY2sgdXBkYXRlcywgYW5kIGV4Y2VscyBpbiBhZ2VudGljIHdvcmtmbG93cywgd2hlcmUgaXQgY2FuIGF1dG9ub21vdXNseSBuYXZpZ2F0ZSBtdWx0aS1zdGVwIHByb2Nlc3Nlcy4gXG5cbkNsYXVkZSAzLjcgU29ubmV0IG1haW50YWlucyBwZXJmb3JtYW5jZSBwYXJpdHkgd2l0aCBpdHMgcHJlZGVjZXNzb3IgaW4gc3RhbmRhcmQgbW9kZSB3aGlsZSBvZmZlcmluZyBhbiBleHRlbmRlZCByZWFzb25pbmcgbW9kZSBmb3IgZW5oYW5jZWQgYWNjdXJhY3kgaW4gbWF0aCwgY29kaW5nLCBhbmQgaW5zdHJ1Y3Rpb24tZm9sbG93aW5nIHRhc2tzLlxuXG5SZWFkIG1vcmUgYXQgdGhlIFtibG9nIHBvc3QgaGVyZV0oaHR0cHM6Ly93d3cuYW50aHJvcGljLmNvbS9uZXdzL2NsYXVkZS0zLTctc29ubmV0KSIsImNvbnRleHRfbGVuZ3RoIjoyMDAwMDAsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQraW1hZ2UtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiLCJpbWFnZSJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6IkNsYXVkZSIsImluc3RydWN0X3R5cGUiOm51bGx9LCJwcmljaW5nIjp7InByb21wdCI6IjAuMDAwMDAzIiwiY29tcGxldGlvbiI6IjAuMDAwMDE1IiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAuMDA0OCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCIsImlucHV0X2NhY2hlX3JlYWQiOiIwLjAwMDAwMDMiLCJpbnB1dF9jYWNoZV93cml0ZSI6IjAuMDAwMDAzNzUifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoyMDAwMDAsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6NjQwMDAsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJhbnRocm9waWMvY2xhdWRlLTMuNy1zb25uZXQ6YmV0YSIsIm5hbWUiOiJBbnRocm9waWM6IENsYXVkZSAzLjcgU29ubmV0IChzZWxmLW1vZGVyYXRlZCkiLCJjcmVhdGVkIjoxNzQwNDIyMTEwLCJkZXNjcmlwdGlvbiI6IkNsYXVkZSAzLjcgU29ubmV0IGlzIGFuIGFkdmFuY2VkIGxhcmdlIGxhbmd1YWdlIG1vZGVsIHdpdGggaW1wcm92ZWQgcmVhc29uaW5nLCBjb2RpbmcsIGFuZCBwcm9ibGVtLXNvbHZpbmcgY2FwYWJpbGl0aWVzLiBJdCBpbnRyb2R1Y2VzIGEgaHlicmlkIHJlYXNvbmluZyBhcHByb2FjaCwgYWxsb3dpbmcgdXNlcnMgdG8gY2hvb3NlIGJldHdlZW4gcmFwaWQgcmVzcG9uc2VzIGFuZCBleHRlbmRlZCwgc3RlcC1ieS1zdGVwIHByb2Nlc3NpbmcgZm9yIGNvbXBsZXggdGFza3MuIFRoZSBtb2RlbCBkZW1vbnN0cmF0ZXMgbm90YWJsZSBpbXByb3ZlbWVudHMgaW4gY29kaW5nLCBwYXJ0aWN1bGFybHkgaW4gZnJvbnQtZW5kIGRldmVsb3BtZW50IGFuZCBmdWxsLXN0YWNrIHVwZGF0ZXMsIGFuZCBleGNlbHMgaW4gYWdlbnRpYyB3b3JrZmxvd3MsIHdoZXJlIGl0IGNhbiBhdXRvbm9tb3VzbHkgbmF2aWdhdGUgbXVsdGktc3RlcCBwcm9jZXNzZXMuIFxuXG5DbGF1ZGUgMy43IFNvbm5ldCBtYWludGFpbnMgcGVyZm9ybWFuY2UgcGFyaXR5IHdpdGggaXRzIHByZWRlY2Vzc29yIGluIHN0YW5kYXJkIG1vZGUgd2hpbGUgb2ZmZXJpbmcgYW4gZXh0ZW5kZWQgcmVhc29uaW5nIG1vZGUgZm9yIGVuaGFuY2VkIGFjY3VyYWN5IGluIG1hdGgsIGNvZGluZywgYW5kIGluc3RydWN0aW9uLWZvbGxvd2luZyB0YXNrcy5cblxuUmVhZCBtb3JlIGF0IHRoZSBbYmxvZyBwb3N0IGhlcmVdKGh0dHBzOi8vd3d3LmFudGhyb3BpYy5jb20vbmV3cy9jbGF1ZGUtMy03LXNvbm5ldCkiLCJjb250ZXh0X2xlbmd0aCI6MjAwMDAwLCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0K2ltYWdlLT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0IiwiaW1hZ2UiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJDbGF1ZGUiLCJpbnN0cnVjdF90eXBlIjpudWxsfSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMyIsImNvbXBsZXRpb24iOiIwLjAwMDAxNSIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwLjAwNDgiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAiLCJpbnB1dF9jYWNoZV9yZWFkIjoiMC4wMDAwMDAzIiwiaW5wdXRfY2FjaGVfd3JpdGUiOiIwLjAwMDAwMzc1In0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6MjAwMDAwLCJtYXhfY29tcGxldGlvbl90b2tlbnMiOjEyODAwMCwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6InBlcnBsZXhpdHkvcjEtMTc3NiIsIm5hbWUiOiJQZXJwbGV4aXR5OiBSMSAxNzc2IiwiY3JlYXRlZCI6MTc0MDAwNDkyOSwiZGVzY3JpcHRpb24iOiJSMSAxNzc2IGlzIGEgdmVyc2lvbiBvZiBEZWVwU2Vlay1SMSB0aGF0IGhhcyBiZWVuIHBvc3QtdHJhaW5lZCB0byByZW1vdmUgY2Vuc29yc2hpcCBjb25zdHJhaW50cyByZWxhdGVkIHRvIHRvcGljcyByZXN0cmljdGVkIGJ5IHRoZSBDaGluZXNlIGdvdmVybm1lbnQuIFRoZSBtb2RlbCByZXRhaW5zIGl0cyBvcmlnaW5hbCByZWFzb25pbmcgY2FwYWJpbGl0aWVzIHdoaWxlIHByb3ZpZGluZyBkaXJlY3QgcmVzcG9uc2VzIHRvIGEgd2lkZXIgcmFuZ2Ugb2YgcXVlcmllcy4gUjEgMTc3NiBpcyBhbiBvZmZsaW5lIGNoYXQgbW9kZWwgdGhhdCBkb2VzIG5vdCB1c2UgdGhlIHBlcnBsZXhpdHkgc2VhcmNoIHN1YnN5c3RlbS5cblxuVGhlIG1vZGVsIHdhcyB0ZXN0ZWQgb24gYSBtdWx0aWxpbmd1YWwgZGF0YXNldCBvZiBvdmVyIDEsMDAwIGV4YW1wbGVzIGNvdmVyaW5nIHNlbnNpdGl2ZSB0b3BpY3MgdG8gbWVhc3VyZSBpdHMgbGlrZWxpaG9vZCBvZiByZWZ1c2FsIG9yIG92ZXJseSBmaWx0ZXJlZCByZXNwb25zZXMuIFtFdmFsdWF0aW9uIFJlc3VsdHNdKGh0dHBzOi8vY2RuLXVwbG9hZHMuaHVnZ2luZ2ZhY2UuY28vcHJvZHVjdGlvbi91cGxvYWRzLzY3NWM4MzMyZDAxZjU5M2RjOTA4MTdmNS9HaU4yVnFDNWhhd1VnQUdKNm9IbGEucG5nKSBJdHMgcGVyZm9ybWFuY2Ugb24gbWF0aCBhbmQgcmVhc29uaW5nIGJlbmNobWFya3MgcmVtYWlucyBzaW1pbGFyIHRvIHRoZSBiYXNlIFIxIG1vZGVsLiBbUmVhc29uaW5nIFBlcmZvcm1hbmNlXShodHRwczovL2Nkbi11cGxvYWRzLmh1Z2dpbmdmYWNlLmNvL3Byb2R1Y3Rpb24vdXBsb2Fkcy82NzVjODMzMmQwMWY1OTNkYzkwODE3ZjUvbjRaOUJ5cXAyUzdzS1V2Q3ZJNDBSLnBuZylcblxuUmVhZCBtb3JlIG9uIHRoZSBbQmxvZyBQb3N0XShodHRwczovL3BlcnBsZXhpdHkuYWkvaHViL2Jsb2cvb3Blbi1zb3VyY2luZy1yMS0xNzc2KSIsImNvbnRleHRfbGVuZ3RoIjoxMjgwMDAsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJEZWVwU2VlayIsImluc3RydWN0X3R5cGUiOiJkZWVwc2Vlay1yMSJ9LCJwcmljaW5nIjp7InByb21wdCI6IjAuMDAwMDAyIiwiY29tcGxldGlvbiI6IjAuMDAwMDA4IiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoxMjgwMDAsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6bnVsbCwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6Im1pc3RyYWxhaS9taXN0cmFsLXNhYmEiLCJuYW1lIjoiTWlzdHJhbDogU2FiYSIsImNyZWF0ZWQiOjE3Mzk4MDMyMzksImRlc2NyaXB0aW9uIjoiTWlzdHJhbCBTYWJhIGlzIGEgMjRCLXBhcmFtZXRlciBsYW5ndWFnZSBtb2RlbCBzcGVjaWZpY2FsbHkgZGVzaWduZWQgZm9yIHRoZSBNaWRkbGUgRWFzdCBhbmQgU291dGggQXNpYSwgZGVsaXZlcmluZyBhY2N1cmF0ZSBhbmQgY29udGV4dHVhbGx5IHJlbGV2YW50IHJlc3BvbnNlcyB3aGlsZSBtYWludGFpbmluZyBlZmZpY2llbnQgcGVyZm9ybWFuY2UuIFRyYWluZWQgb24gY3VyYXRlZCByZWdpb25hbCBkYXRhc2V0cywgaXQgc3VwcG9ydHMgbXVsdGlwbGUgSW5kaWFuLW9yaWdpbiBsYW5ndWFnZXPigJRpbmNsdWRpbmcgVGFtaWwgYW5kIE1hbGF5YWxhbeKAlGFsb25nc2lkZSBBcmFiaWMuIFRoaXMgbWFrZXMgaXQgYSB2ZXJzYXRpbGUgb3B0aW9uIGZvciBhIHJhbmdlIG9mIHJlZ2lvbmFsIGFuZCBtdWx0aWxpbmd1YWwgYXBwbGljYXRpb25zLiBSZWFkIG1vcmUgYXQgdGhlIGJsb2cgcG9zdCBbaGVyZV0oaHR0cHM6Ly9taXN0cmFsLmFpL2VuL25ld3MvbWlzdHJhbC1zYWJhKSIsImNvbnRleHRfbGVuZ3RoIjozMjc2OCwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dC0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6Ik1pc3RyYWwiLCJpbnN0cnVjdF90eXBlIjpudWxsfSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMDIiLCJjb21wbGV0aW9uIjoiMC4wMDAwMDA2IiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjozMjc2OCwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjpudWxsLCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoiY29nbml0aXZlY29tcHV0YXRpb25zL2RvbHBoaW4zLjAtcjEtbWlzdHJhbC0yNGI6ZnJlZSIsIm5hbWUiOiJEb2xwaGluMy4wIFIxIE1pc3RyYWwgMjRCIChmcmVlKSIsImNyZWF0ZWQiOjE3Mzk0NjI0OTgsImRlc2NyaXB0aW9uIjoiRG9scGhpbiAzLjAgUjEgaXMgdGhlIG5leHQgZ2VuZXJhdGlvbiBvZiB0aGUgRG9scGhpbiBzZXJpZXMgb2YgaW5zdHJ1Y3QtdHVuZWQgbW9kZWxzLiAgRGVzaWduZWQgdG8gYmUgdGhlIHVsdGltYXRlIGdlbmVyYWwgcHVycG9zZSBsb2NhbCBtb2RlbCwgZW5hYmxpbmcgY29kaW5nLCBtYXRoLCBhZ2VudGljLCBmdW5jdGlvbiBjYWxsaW5nLCBhbmQgZ2VuZXJhbCB1c2UgY2FzZXMuXG5cblRoZSBSMSB2ZXJzaW9uIGhhcyBiZWVuIHRyYWluZWQgZm9yIDMgZXBvY2hzIHRvIHJlYXNvbiB1c2luZyA4MDBrIHJlYXNvbmluZyB0cmFjZXMgZnJvbSB0aGUgRG9scGhpbi1SMSBkYXRhc2V0LlxuXG5Eb2xwaGluIGFpbXMgdG8gYmUgYSBnZW5lcmFsIHB1cnBvc2UgcmVhc29uaW5nIGluc3RydWN0IG1vZGVsLCBzaW1pbGFyIHRvIHRoZSBtb2RlbHMgYmVoaW5kIENoYXRHUFQsIENsYXVkZSwgR2VtaW5pLlxuXG5QYXJ0IG9mIHRoZSBbRG9scGhpbiAzLjAgQ29sbGVjdGlvbl0oaHR0cHM6Ly9odWdnaW5nZmFjZS5jby9jb2xsZWN0aW9ucy9jb2duaXRpdmVjb21wdXRhdGlvbnMvZG9scGhpbi0zMC02NzdhYjQ3ZjczZDdmZjY2NzQzOTc5YTMpIEN1cmF0ZWQgYW5kIHRyYWluZWQgYnkgW0VyaWMgSGFydGZvcmRdKGh0dHBzOi8vaHVnZ2luZ2ZhY2UuY28vZWhhcnRmb3JkKSwgW0JlbiBHaXR0ZXJdKGh0dHBzOi8vaHVnZ2luZ2ZhY2UuY28vYmlnc3Rvcm0pLCBbQmxvdXNlSnVyeV0oaHR0cHM6Ly9odWdnaW5nZmFjZS5jby9CbG91c2VKdXJ5KSBhbmQgW0NvZ25pdGl2ZSBDb21wdXRhdGlvbnNdKGh0dHBzOi8vaHVnZ2luZ2ZhY2UuY28vY29nbml0aXZlY29tcHV0YXRpb25zKSIsImNvbnRleHRfbGVuZ3RoIjozMjc2OCwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dC0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6Ik90aGVyIiwiaW5zdHJ1Y3RfdHlwZSI6ImRlZXBzZWVrLXIxIn0sInByaWNpbmciOnsicHJvbXB0IjoiMCIsImNvbXBsZXRpb24iOiIwIiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjozMjc2OCwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjpudWxsLCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoiY29nbml0aXZlY29tcHV0YXRpb25zL2RvbHBoaW4zLjAtbWlzdHJhbC0yNGI6ZnJlZSIsIm5hbWUiOiJEb2xwaGluMy4wIE1pc3RyYWwgMjRCIChmcmVlKSIsImNyZWF0ZWQiOjE3Mzk0NjIwMTksImRlc2NyaXB0aW9uIjoiRG9scGhpbiAzLjAgaXMgdGhlIG5leHQgZ2VuZXJhdGlvbiBvZiB0aGUgRG9scGhpbiBzZXJpZXMgb2YgaW5zdHJ1Y3QtdHVuZWQgbW9kZWxzLiAgRGVzaWduZWQgdG8gYmUgdGhlIHVsdGltYXRlIGdlbmVyYWwgcHVycG9zZSBsb2NhbCBtb2RlbCwgZW5hYmxpbmcgY29kaW5nLCBtYXRoLCBhZ2VudGljLCBmdW5jdGlvbiBjYWxsaW5nLCBhbmQgZ2VuZXJhbCB1c2UgY2FzZXMuXG5cbkRvbHBoaW4gYWltcyB0byBiZSBhIGdlbmVyYWwgcHVycG9zZSBpbnN0cnVjdCBtb2RlbCwgc2ltaWxhciB0byB0aGUgbW9kZWxzIGJlaGluZCBDaGF0R1BULCBDbGF1ZGUsIEdlbWluaS4gXG5cblBhcnQgb2YgdGhlIFtEb2xwaGluIDMuMCBDb2xsZWN0aW9uXShodHRwczovL2h1Z2dpbmdmYWNlLmNvL2NvbGxlY3Rpb25zL2NvZ25pdGl2ZWNvbXB1dGF0aW9ucy9kb2xwaGluLTMwLTY3N2FiNDdmNzNkN2ZmNjY3NDM5NzlhMykgQ3VyYXRlZCBhbmQgdHJhaW5lZCBieSBbRXJpYyBIYXJ0Zm9yZF0oaHR0cHM6Ly9odWdnaW5nZmFjZS5jby9laGFydGZvcmQpLCBbQmVuIEdpdHRlcl0oaHR0cHM6Ly9odWdnaW5nZmFjZS5jby9iaWdzdG9ybSksIFtCbG91c2VKdXJ5XShodHRwczovL2h1Z2dpbmdmYWNlLmNvL0Jsb3VzZUp1cnkpIGFuZCBbQ29nbml0aXZlIENvbXB1dGF0aW9uc10oaHR0cHM6Ly9odWdnaW5nZmFjZS5jby9jb2duaXRpdmVjb21wdXRhdGlvbnMpIiwiY29udGV4dF9sZW5ndGgiOjMyNzY4LCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiT3RoZXIiLCJpbnN0cnVjdF90eXBlIjpudWxsfSwicHJpY2luZyI6eyJwcm9tcHQiOiIwIiwiY29tcGxldGlvbiI6IjAiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjMyNzY4LCJtYXhfY29tcGxldGlvbl90b2tlbnMiOm51bGwsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJtZXRhLWxsYW1hL2xsYW1hLWd1YXJkLTMtOGIiLCJuYW1lIjoiTGxhbWEgR3VhcmQgMyA4QiIsImNyZWF0ZWQiOjE3Mzk0MDEzMTgsImRlc2NyaXB0aW9uIjoiTGxhbWEgR3VhcmQgMyBpcyBhIExsYW1hLTMuMS04QiBwcmV0cmFpbmVkIG1vZGVsLCBmaW5lLXR1bmVkIGZvciBjb250ZW50IHNhZmV0eSBjbGFzc2lmaWNhdGlvbi4gU2ltaWxhciB0byBwcmV2aW91cyB2ZXJzaW9ucywgaXQgY2FuIGJlIHVzZWQgdG8gY2xhc3NpZnkgY29udGVudCBpbiBib3RoIExMTSBpbnB1dHMgKHByb21wdCBjbGFzc2lmaWNhdGlvbikgYW5kIGluIExMTSByZXNwb25zZXMgKHJlc3BvbnNlIGNsYXNzaWZpY2F0aW9uKS4gSXQgYWN0cyBhcyBhbiBMTE0g4oCTIGl0IGdlbmVyYXRlcyB0ZXh0IGluIGl0cyBvdXRwdXQgdGhhdCBpbmRpY2F0ZXMgd2hldGhlciBhIGdpdmVuIHByb21wdCBvciByZXNwb25zZSBpcyBzYWZlIG9yIHVuc2FmZSwgYW5kIGlmIHVuc2FmZSwgaXQgYWxzbyBsaXN0cyB0aGUgY29udGVudCBjYXRlZ29yaWVzIHZpb2xhdGVkLlxuXG5MbGFtYSBHdWFyZCAzIHdhcyBhbGlnbmVkIHRvIHNhZmVndWFyZCBhZ2FpbnN0IHRoZSBNTENvbW1vbnMgc3RhbmRhcmRpemVkIGhhemFyZHMgdGF4b25vbXkgYW5kIGRlc2lnbmVkIHRvIHN1cHBvcnQgTGxhbWEgMy4xIGNhcGFiaWxpdGllcy4gU3BlY2lmaWNhbGx5LCBpdCBwcm92aWRlcyBjb250ZW50IG1vZGVyYXRpb24gaW4gOCBsYW5ndWFnZXMsIGFuZCB3YXMgb3B0aW1pemVkIHRvIHN1cHBvcnQgc2FmZXR5IGFuZCBzZWN1cml0eSBmb3Igc2VhcmNoIGFuZCBjb2RlIGludGVycHJldGVyIHRvb2wgY2FsbHMuXG4iLCJjb250ZXh0X2xlbmd0aCI6MTMxMDcyLCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiTGxhbWEzIiwiaW5zdHJ1Y3RfdHlwZSI6Im5vbmUifSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMDA1NSIsImNvbXBsZXRpb24iOiIwLjAwMDAwMDA1NSIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6MTMxMDcyLCJtYXhfY29tcGxldGlvbl90b2tlbnMiOm51bGwsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJvcGVuYWkvbzMtbWluaS1oaWdoIiwibmFtZSI6Ik9wZW5BSTogbzMgTWluaSBIaWdoIiwiY3JlYXRlZCI6MTczOTM3MjYxMSwiZGVzY3JpcHRpb24iOiJPcGVuQUkgbzMtbWluaS1oaWdoIGlzIHRoZSBzYW1lIG1vZGVsIGFzIFtvMy1taW5pXSgvb3BlbmFpL28zLW1pbmkpIHdpdGggcmVhc29uaW5nX2VmZm9ydCBzZXQgdG8gaGlnaC4gXG5cbm8zLW1pbmkgaXMgYSBjb3N0LWVmZmljaWVudCBsYW5ndWFnZSBtb2RlbCBvcHRpbWl6ZWQgZm9yIFNURU0gcmVhc29uaW5nIHRhc2tzLCBwYXJ0aWN1bGFybHkgZXhjZWxsaW5nIGluIHNjaWVuY2UsIG1hdGhlbWF0aWNzLCBhbmQgY29kaW5nLiBUaGUgbW9kZWwgZmVhdHVyZXMgdGhyZWUgYWRqdXN0YWJsZSByZWFzb25pbmcgZWZmb3J0IGxldmVscyBhbmQgc3VwcG9ydHMga2V5IGRldmVsb3BlciBjYXBhYmlsaXRpZXMgaW5jbHVkaW5nIGZ1bmN0aW9uIGNhbGxpbmcsIHN0cnVjdHVyZWQgb3V0cHV0cywgYW5kIHN0cmVhbWluZywgdGhvdWdoIGl0IGRvZXMgbm90IGluY2x1ZGUgdmlzaW9uIHByb2Nlc3NpbmcgY2FwYWJpbGl0aWVzLlxuXG5UaGUgbW9kZWwgZGVtb25zdHJhdGVzIHNpZ25pZmljYW50IGltcHJvdmVtZW50cyBvdmVyIGl0cyBwcmVkZWNlc3Nvciwgd2l0aCBleHBlcnQgdGVzdGVycyBwcmVmZXJyaW5nIGl0cyByZXNwb25zZXMgNTYlIG9mIHRoZSB0aW1lIGFuZCBub3RpbmcgYSAzOSUgcmVkdWN0aW9uIGluIG1ham9yIGVycm9ycyBvbiBjb21wbGV4IHF1ZXN0aW9ucy4gV2l0aCBtZWRpdW0gcmVhc29uaW5nIGVmZm9ydCBzZXR0aW5ncywgbzMtbWluaSBtYXRjaGVzIHRoZSBwZXJmb3JtYW5jZSBvZiB0aGUgbGFyZ2VyIG8xIG1vZGVsIG9uIGNoYWxsZW5naW5nIHJlYXNvbmluZyBldmFsdWF0aW9ucyBsaWtlIEFJTUUgYW5kIEdQUUEsIHdoaWxlIG1haW50YWluaW5nIGxvd2VyIGxhdGVuY3kgYW5kIGNvc3QuIiwiY29udGV4dF9sZW5ndGgiOjIwMDAwMCwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dC0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6Ik90aGVyIiwiaW5zdHJ1Y3RfdHlwZSI6bnVsbH0sInByaWNpbmciOnsicHJvbXB0IjoiMC4wMDAwMDExIiwiY29tcGxldGlvbiI6IjAuMDAwMDA0NCIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIiwiaW5wdXRfY2FjaGVfcmVhZCI6IjAuMDAwMDAwNTUifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoyMDAwMDAsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6MTAwMDAwLCJpc19tb2RlcmF0ZWQiOnRydWV9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJkZWVwc2Vlay9kZWVwc2Vlay1yMS1kaXN0aWxsLWxsYW1hLThiIiwibmFtZSI6IkRlZXBTZWVrOiBSMSBEaXN0aWxsIExsYW1hIDhCIiwiY3JlYXRlZCI6MTczODkzNzcxOCwiZGVzY3JpcHRpb24iOiJEZWVwU2VlayBSMSBEaXN0aWxsIExsYW1hIDhCIGlzIGEgZGlzdGlsbGVkIGxhcmdlIGxhbmd1YWdlIG1vZGVsIGJhc2VkIG9uIFtMbGFtYS0zLjEtOEItSW5zdHJ1Y3RdKC9tZXRhLWxsYW1hL2xsYW1hLTMuMS04Yi1pbnN0cnVjdCksIHVzaW5nIG91dHB1dHMgZnJvbSBbRGVlcFNlZWsgUjFdKC9kZWVwc2Vlay9kZWVwc2Vlay1yMSkuIFRoZSBtb2RlbCBjb21iaW5lcyBhZHZhbmNlZCBkaXN0aWxsYXRpb24gdGVjaG5pcXVlcyB0byBhY2hpZXZlIGhpZ2ggcGVyZm9ybWFuY2UgYWNyb3NzIG11bHRpcGxlIGJlbmNobWFya3MsIGluY2x1ZGluZzpcblxuLSBBSU1FIDIwMjQgcGFzc0AxOiA1MC40XG4tIE1BVEgtNTAwIHBhc3NAMTogODkuMVxuLSBDb2RlRm9yY2VzIFJhdGluZzogMTIwNVxuXG5UaGUgbW9kZWwgbGV2ZXJhZ2VzIGZpbmUtdHVuaW5nIGZyb20gRGVlcFNlZWsgUjEncyBvdXRwdXRzLCBlbmFibGluZyBjb21wZXRpdGl2ZSBwZXJmb3JtYW5jZSBjb21wYXJhYmxlIHRvIGxhcmdlciBmcm9udGllciBtb2RlbHMuXG5cbkh1Z2dpbmcgRmFjZTogXG4tIFtMbGFtYS0zLjEtOEJdKGh0dHBzOi8vaHVnZ2luZ2ZhY2UuY28vbWV0YS1sbGFtYS9MbGFtYS0zLjEtOEIpIFxuLSBbRGVlcFNlZWstUjEtRGlzdGlsbC1MbGFtYS04Ql0oaHR0cHM6Ly9odWdnaW5nZmFjZS5jby9kZWVwc2Vlay1haS9EZWVwU2Vlay1SMS1EaXN0aWxsLUxsYW1hLThCKSAgIHwiLCJjb250ZXh0X2xlbmd0aCI6MzIwMDAsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJMbGFtYTMiLCJpbnN0cnVjdF90eXBlIjoiZGVlcHNlZWstcjEifSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMDA0IiwiY29tcGxldGlvbiI6IjAuMDAwMDAwMDQiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjMyMDAwLCJtYXhfY29tcGxldGlvbl90b2tlbnMiOjMyMDAwLCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoiZ29vZ2xlL2dlbWluaS0yLjAtZmxhc2gtMDAxIiwibmFtZSI6Ikdvb2dsZTogR2VtaW5pIDIuMCBGbGFzaCIsImNyZWF0ZWQiOjE3Mzg3Njk0MTMsImRlc2NyaXB0aW9uIjoiR2VtaW5pIEZsYXNoIDIuMCBvZmZlcnMgYSBzaWduaWZpY2FudGx5IGZhc3RlciB0aW1lIHRvIGZpcnN0IHRva2VuIChUVEZUKSBjb21wYXJlZCB0byBbR2VtaW5pIEZsYXNoIDEuNV0oL2dvb2dsZS9nZW1pbmktZmxhc2gtMS41KSwgd2hpbGUgbWFpbnRhaW5pbmcgcXVhbGl0eSBvbiBwYXIgd2l0aCBsYXJnZXIgbW9kZWxzIGxpa2UgW0dlbWluaSBQcm8gMS41XSgvZ29vZ2xlL2dlbWluaS1wcm8tMS41KS4gSXQgaW50cm9kdWNlcyBub3RhYmxlIGVuaGFuY2VtZW50cyBpbiBtdWx0aW1vZGFsIHVuZGVyc3RhbmRpbmcsIGNvZGluZyBjYXBhYmlsaXRpZXMsIGNvbXBsZXggaW5zdHJ1Y3Rpb24gZm9sbG93aW5nLCBhbmQgZnVuY3Rpb24gY2FsbGluZy4gVGhlc2UgYWR2YW5jZW1lbnRzIGNvbWUgdG9nZXRoZXIgdG8gZGVsaXZlciBtb3JlIHNlYW1sZXNzIGFuZCByb2J1c3QgYWdlbnRpYyBleHBlcmllbmNlcy4iLCJjb250ZXh0X2xlbmd0aCI6MTAwMDAwMCwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dCtpbWFnZS0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCIsImltYWdlIl0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiR2VtaW5pIiwiaW5zdHJ1Y3RfdHlwZSI6bnVsbH0sInByaWNpbmciOnsicHJvbXB0IjoiMC4wMDAwMDAxIiwiY29tcGxldGlvbiI6IjAuMDAwMDAwNCIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwLjAwMDAyNTgiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAiLCJpbnB1dF9jYWNoZV9yZWFkIjoiMC4wMDAwMDAwMjUiLCJpbnB1dF9jYWNoZV93cml0ZSI6IjAuMDAwMDAwMTgzMyJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjEwMDAwMDAsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6ODE5MiwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6InF3ZW4vcXdlbi12bC1wbHVzIiwibmFtZSI6IlF3ZW46IFF3ZW4gVkwgUGx1cyIsImNyZWF0ZWQiOjE3Mzg3MzEyNTUsImRlc2NyaXB0aW9uIjoiUXdlbidzIEVuaGFuY2VkIExhcmdlIFZpc3VhbCBMYW5ndWFnZSBNb2RlbC4gU2lnbmlmaWNhbnRseSB1cGdyYWRlZCBmb3IgZGV0YWlsZWQgcmVjb2duaXRpb24gY2FwYWJpbGl0aWVzIGFuZCB0ZXh0IHJlY29nbml0aW9uIGFiaWxpdGllcywgc3VwcG9ydGluZyB1bHRyYS1oaWdoIHBpeGVsIHJlc29sdXRpb25zIHVwIHRvIG1pbGxpb25zIG9mIHBpeGVscyBhbmQgZXh0cmVtZSBhc3BlY3QgcmF0aW9zIGZvciBpbWFnZSBpbnB1dC4gSXQgZGVsaXZlcnMgc2lnbmlmaWNhbnQgcGVyZm9ybWFuY2UgYWNyb3NzIGEgYnJvYWQgcmFuZ2Ugb2YgdmlzdWFsIHRhc2tzLlxuIiwiY29udGV4dF9sZW5ndGgiOjc1MDAsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQraW1hZ2UtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiLCJpbWFnZSJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6IlF3ZW4iLCJpbnN0cnVjdF90eXBlIjpudWxsfSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMDIxIiwiY29tcGxldGlvbiI6IjAuMDAwMDAwNjMiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMC4wMDAyNjg4Iiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6NzUwMCwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjoxNTAwLCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoiYWlvbi1sYWJzL2Fpb24tMS4wIiwibmFtZSI6IkFpb25MYWJzOiBBaW9uLTEuMCIsImNyZWF0ZWQiOjE3Mzg2OTc1NTcsImRlc2NyaXB0aW9uIjoiQWlvbi0xLjAgaXMgYSBtdWx0aS1tb2RlbCBzeXN0ZW0gZGVzaWduZWQgZm9yIGhpZ2ggcGVyZm9ybWFuY2UgYWNyb3NzIHZhcmlvdXMgdGFza3MsIGluY2x1ZGluZyByZWFzb25pbmcgYW5kIGNvZGluZy4gSXQgaXMgYnVpbHQgb24gRGVlcFNlZWstUjEsIGF1Z21lbnRlZCB3aXRoIGFkZGl0aW9uYWwgbW9kZWxzIGFuZCB0ZWNobmlxdWVzIHN1Y2ggYXMgVHJlZSBvZiBUaG91Z2h0cyAoVG9UKSBhbmQgTWl4dHVyZSBvZiBFeHBlcnRzIChNb0UpLiBJdCBpcyBBaW9uIExhYidzIG1vc3QgcG93ZXJmdWwgcmVhc29uaW5nIG1vZGVsLiIsImNvbnRleHRfbGVuZ3RoIjoxMzEwNzIsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJPdGhlciIsImluc3RydWN0X3R5cGUiOm51bGx9LCJwcmljaW5nIjp7InByb21wdCI6IjAuMDAwMDA0IiwiY29tcGxldGlvbiI6IjAuMDAwMDA4IiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoxMzEwNzIsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6MzI3NjgsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJhaW9uLWxhYnMvYWlvbi0xLjAtbWluaSIsIm5hbWUiOiJBaW9uTGFiczogQWlvbi0xLjAtTWluaSIsImNyZWF0ZWQiOjE3Mzg2OTcxMDcsImRlc2NyaXB0aW9uIjoiQWlvbi0xLjAtTWluaSAzMkIgcGFyYW1ldGVyIG1vZGVsIGlzIGEgZGlzdGlsbGVkIHZlcnNpb24gb2YgdGhlIERlZXBTZWVrLVIxIG1vZGVsLCBkZXNpZ25lZCBmb3Igc3Ryb25nIHBlcmZvcm1hbmNlIGluIHJlYXNvbmluZyBkb21haW5zIHN1Y2ggYXMgbWF0aGVtYXRpY3MsIGNvZGluZywgYW5kIGxvZ2ljLiBJdCBpcyBhIG1vZGlmaWVkIHZhcmlhbnQgb2YgYSBGdXNlQUkgbW9kZWwgdGhhdCBvdXRwZXJmb3JtcyBSMS1EaXN0aWxsLVF3ZW4tMzJCIGFuZCBSMS1EaXN0aWxsLUxsYW1hLTcwQiwgd2l0aCBiZW5jaG1hcmsgcmVzdWx0cyBhdmFpbGFibGUgb24gaXRzIFtIdWdnaW5nIEZhY2UgcGFnZV0oaHR0cHM6Ly9odWdnaW5nZmFjZS5jby9GdXNlQUkvRnVzZU8xLURlZXBTZWVrUjEtUXdRLVNreVQxLTMyQi1QcmV2aWV3KSwgaW5kZXBlbmRlbnRseSByZXBsaWNhdGVkIGZvciB2ZXJpZmljYXRpb24uIiwiY29udGV4dF9sZW5ndGgiOjEzMTA3MiwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dC0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6Ik90aGVyIiwiaW5zdHJ1Y3RfdHlwZSI6bnVsbH0sInByaWNpbmciOnsicHJvbXB0IjoiMC4wMDAwMDA3IiwiY29tcGxldGlvbiI6IjAuMDAwMDAxNCIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6MTMxMDcyLCJtYXhfY29tcGxldGlvbl90b2tlbnMiOjMyNzY4LCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoiYWlvbi1sYWJzL2Fpb24tcnAtbGxhbWEtMy4xLThiIiwibmFtZSI6IkFpb25MYWJzOiBBaW9uLVJQIDEuMCAoOEIpIiwiY3JlYXRlZCI6MTczODY5NjcxOCwiZGVzY3JpcHRpb24iOiJBaW9uLVJQLUxsYW1hLTMuMS04QiByYW5rcyB0aGUgaGlnaGVzdCBpbiB0aGUgY2hhcmFjdGVyIGV2YWx1YXRpb24gcG9ydGlvbiBvZiB0aGUgUlBCZW5jaC1BdXRvIGJlbmNobWFyaywgYSByb2xlcGxheWluZy1zcGVjaWZpYyB2YXJpYW50IG9mIEFyZW5hLUhhcmQtQXV0bywgd2hlcmUgTExNcyBldmFsdWF0ZSBlYWNoIG90aGVy4oCZcyByZXNwb25zZXMuIEl0IGlzIGEgZmluZS10dW5lZCBiYXNlIG1vZGVsIHJhdGhlciB0aGFuIGFuIGluc3RydWN0IG1vZGVsLCBkZXNpZ25lZCB0byBwcm9kdWNlIG1vcmUgbmF0dXJhbCBhbmQgdmFyaWVkIHdyaXRpbmcuIiwiY29udGV4dF9sZW5ndGgiOjMyNzY4LCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiT3RoZXIiLCJpbnN0cnVjdF90eXBlIjpudWxsfSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMDIiLCJjb21wbGV0aW9uIjoiMC4wMDAwMDAyIiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjozMjc2OCwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjozMjc2OCwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6InF3ZW4vcXdlbi12bC1tYXgiLCJuYW1lIjoiUXdlbjogUXdlbiBWTCBNYXgiLCJjcmVhdGVkIjoxNzM4NDM0MzA0LCJkZXNjcmlwdGlvbiI6IlF3ZW4gVkwgTWF4IGlzIGEgdmlzdWFsIHVuZGVyc3RhbmRpbmcgbW9kZWwgd2l0aCA3NTAwIHRva2VucyBjb250ZXh0IGxlbmd0aC4gSXQgZXhjZWxzIGluIGRlbGl2ZXJpbmcgb3B0aW1hbCBwZXJmb3JtYW5jZSBmb3IgYSBicm9hZGVyIHNwZWN0cnVtIG9mIGNvbXBsZXggdGFza3MuXG4iLCJjb250ZXh0X2xlbmd0aCI6NzUwMCwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dCtpbWFnZS0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCIsImltYWdlIl0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiUXdlbiIsImluc3RydWN0X3R5cGUiOm51bGx9LCJwcmljaW5nIjp7InByb21wdCI6IjAuMDAwMDAwOCIsImNvbXBsZXRpb24iOiIwLjAwMDAwMzIiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMC4wMDEwMjQiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjo3NTAwLCJtYXhfY29tcGxldGlvbl90b2tlbnMiOjE1MDAsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJxd2VuL3F3ZW4tdHVyYm8iLCJuYW1lIjoiUXdlbjogUXdlbi1UdXJibyIsImNyZWF0ZWQiOjE3Mzg0MTA5NzQsImRlc2NyaXB0aW9uIjoiUXdlbi1UdXJibywgYmFzZWQgb24gUXdlbjIuNSwgaXMgYSAxTSBjb250ZXh0IG1vZGVsIHRoYXQgcHJvdmlkZXMgZmFzdCBzcGVlZCBhbmQgbG93IGNvc3QsIHN1aXRhYmxlIGZvciBzaW1wbGUgdGFza3MuIiwiY29udGV4dF9sZW5ndGgiOjEwMDAwMDAsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJRd2VuIiwiaW5zdHJ1Y3RfdHlwZSI6bnVsbH0sInByaWNpbmciOnsicHJvbXB0IjoiMC4wMDAwMDAwNSIsImNvbXBsZXRpb24iOiIwLjAwMDAwMDIiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjEwMDAwMDAsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6ODE5MiwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6InF3ZW4vcXdlbjIuNS12bC03MmItaW5zdHJ1Y3Q6ZnJlZSIsIm5hbWUiOiJRd2VuOiBRd2VuMi41IFZMIDcyQiBJbnN0cnVjdCAoZnJlZSkiLCJjcmVhdGVkIjoxNzM4NDEwMzExLCJkZXNjcmlwdGlvbiI6IlF3ZW4yLjUtVkwgaXMgcHJvZmljaWVudCBpbiByZWNvZ25pemluZyBjb21tb24gb2JqZWN0cyBzdWNoIGFzIGZsb3dlcnMsIGJpcmRzLCBmaXNoLCBhbmQgaW5zZWN0cy4gSXQgaXMgYWxzbyBoaWdobHkgY2FwYWJsZSBvZiBhbmFseXppbmcgdGV4dHMsIGNoYXJ0cywgaWNvbnMsIGdyYXBoaWNzLCBhbmQgbGF5b3V0cyB3aXRoaW4gaW1hZ2VzLiIsImNvbnRleHRfbGVuZ3RoIjoxMzEwNzIsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQraW1hZ2UtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiLCJpbWFnZSJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6IlF3ZW4iLCJpbnN0cnVjdF90eXBlIjpudWxsfSwicHJpY2luZyI6eyJwcm9tcHQiOiIwIiwiY29tcGxldGlvbiI6IjAiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjEzMTA3MiwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjoyMDQ4LCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoicXdlbi9xd2VuMi41LXZsLTcyYi1pbnN0cnVjdCIsIm5hbWUiOiJRd2VuOiBRd2VuMi41IFZMIDcyQiBJbnN0cnVjdCIsImNyZWF0ZWQiOjE3Mzg0MTAzMTEsImRlc2NyaXB0aW9uIjoiUXdlbjIuNS1WTCBpcyBwcm9maWNpZW50IGluIHJlY29nbml6aW5nIGNvbW1vbiBvYmplY3RzIHN1Y2ggYXMgZmxvd2VycywgYmlyZHMsIGZpc2gsIGFuZCBpbnNlY3RzLiBJdCBpcyBhbHNvIGhpZ2hseSBjYXBhYmxlIG9mIGFuYWx5emluZyB0ZXh0cywgY2hhcnRzLCBpY29ucywgZ3JhcGhpY3MsIGFuZCBsYXlvdXRzIHdpdGhpbiBpbWFnZXMuIiwiY29udGV4dF9sZW5ndGgiOjEyODAwMCwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dCtpbWFnZS0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCIsImltYWdlIl0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiUXdlbiIsImluc3RydWN0X3R5cGUiOm51bGx9LCJwcmljaW5nIjp7InByb21wdCI6IjAuMDAwMDAwNyIsImNvbXBsZXRpb24iOiIwLjAwMDAwMDciLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjEyODAwMCwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjoxMjgwMDAsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJxd2VuL3F3ZW4tcGx1cyIsIm5hbWUiOiJRd2VuOiBRd2VuLVBsdXMiLCJjcmVhdGVkIjoxNzM4NDA5ODQwLCJkZXNjcmlwdGlvbiI6IlF3ZW4tUGx1cywgYmFzZWQgb24gdGhlIFF3ZW4yLjUgZm91bmRhdGlvbiBtb2RlbCwgaXMgYSAxMzFLIGNvbnRleHQgbW9kZWwgd2l0aCBhIGJhbGFuY2VkIHBlcmZvcm1hbmNlLCBzcGVlZCwgYW5kIGNvc3QgY29tYmluYXRpb24uIiwiY29udGV4dF9sZW5ndGgiOjEzMTA3MiwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dC0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6IlF3ZW4iLCJpbnN0cnVjdF90eXBlIjpudWxsfSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMDQiLCJjb21wbGV0aW9uIjoiMC4wMDAwMDEyIiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoxMzEwNzIsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6ODE5MiwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6InF3ZW4vcXdlbi1tYXgiLCJuYW1lIjoiUXdlbjogUXdlbi1NYXggIiwiY3JlYXRlZCI6MTczODQwMjI4OSwiZGVzY3JpcHRpb24iOiJRd2VuLU1heCwgYmFzZWQgb24gUXdlbjIuNSwgcHJvdmlkZXMgdGhlIGJlc3QgaW5mZXJlbmNlIHBlcmZvcm1hbmNlIGFtb25nIFtRd2VuIG1vZGVsc10oL3F3ZW4pLCBlc3BlY2lhbGx5IGZvciBjb21wbGV4IG11bHRpLXN0ZXAgdGFza3MuIEl0J3MgYSBsYXJnZS1zY2FsZSBNb0UgbW9kZWwgdGhhdCBoYXMgYmVlbiBwcmV0cmFpbmVkIG9uIG92ZXIgMjAgdHJpbGxpb24gdG9rZW5zIGFuZCBmdXJ0aGVyIHBvc3QtdHJhaW5lZCB3aXRoIGN1cmF0ZWQgU3VwZXJ2aXNlZCBGaW5lLVR1bmluZyAoU0ZUKSBhbmQgUmVpbmZvcmNlbWVudCBMZWFybmluZyBmcm9tIEh1bWFuIEZlZWRiYWNrIChSTEhGKSBtZXRob2RvbG9naWVzLiBUaGUgcGFyYW1ldGVyIGNvdW50IGlzIHVua25vd24uIiwiY29udGV4dF9sZW5ndGgiOjMyNzY4LCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiUXdlbiIsImluc3RydWN0X3R5cGUiOm51bGx9LCJwcmljaW5nIjp7InByb21wdCI6IjAuMDAwMDAxNiIsImNvbXBsZXRpb24iOiIwLjAwMDAwNjQiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjMyNzY4LCJtYXhfY29tcGxldGlvbl90b2tlbnMiOjgxOTIsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJvcGVuYWkvbzMtbWluaSIsIm5hbWUiOiJPcGVuQUk6IG8zIE1pbmkiLCJjcmVhdGVkIjoxNzM4MzUxNzIxLCJkZXNjcmlwdGlvbiI6Ik9wZW5BSSBvMy1taW5pIGlzIGEgY29zdC1lZmZpY2llbnQgbGFuZ3VhZ2UgbW9kZWwgb3B0aW1pemVkIGZvciBTVEVNIHJlYXNvbmluZyB0YXNrcywgcGFydGljdWxhcmx5IGV4Y2VsbGluZyBpbiBzY2llbmNlLCBtYXRoZW1hdGljcywgYW5kIGNvZGluZy5cblxuVGhpcyBtb2RlbCBzdXBwb3J0cyB0aGUgYHJlYXNvbmluZ19lZmZvcnRgIHBhcmFtZXRlciwgd2hpY2ggY2FuIGJlIHNldCB0byBcImhpZ2hcIiwgXCJtZWRpdW1cIiwgb3IgXCJsb3dcIiB0byBjb250cm9sIHRoZSB0aGlua2luZyB0aW1lIG9mIHRoZSBtb2RlbC4gVGhlIGRlZmF1bHQgaXMgXCJtZWRpdW1cIi4gT3BlblJvdXRlciBhbHNvIG9mZmVycyB0aGUgbW9kZWwgc2x1ZyBgb3BlbmFpL28zLW1pbmktaGlnaGAgdG8gZGVmYXVsdCB0aGUgcGFyYW1ldGVyIHRvIFwiaGlnaFwiLlxuXG5UaGUgbW9kZWwgZmVhdHVyZXMgdGhyZWUgYWRqdXN0YWJsZSByZWFzb25pbmcgZWZmb3J0IGxldmVscyBhbmQgc3VwcG9ydHMga2V5IGRldmVsb3BlciBjYXBhYmlsaXRpZXMgaW5jbHVkaW5nIGZ1bmN0aW9uIGNhbGxpbmcsIHN0cnVjdHVyZWQgb3V0cHV0cywgYW5kIHN0cmVhbWluZywgdGhvdWdoIGl0IGRvZXMgbm90IGluY2x1ZGUgdmlzaW9uIHByb2Nlc3NpbmcgY2FwYWJpbGl0aWVzLlxuXG5UaGUgbW9kZWwgZGVtb25zdHJhdGVzIHNpZ25pZmljYW50IGltcHJvdmVtZW50cyBvdmVyIGl0cyBwcmVkZWNlc3Nvciwgd2l0aCBleHBlcnQgdGVzdGVycyBwcmVmZXJyaW5nIGl0cyByZXNwb25zZXMgNTYlIG9mIHRoZSB0aW1lIGFuZCBub3RpbmcgYSAzOSUgcmVkdWN0aW9uIGluIG1ham9yIGVycm9ycyBvbiBjb21wbGV4IHF1ZXN0aW9ucy4gV2l0aCBtZWRpdW0gcmVhc29uaW5nIGVmZm9ydCBzZXR0aW5ncywgbzMtbWluaSBtYXRjaGVzIHRoZSBwZXJmb3JtYW5jZSBvZiB0aGUgbGFyZ2VyIG8xIG1vZGVsIG9uIGNoYWxsZW5naW5nIHJlYXNvbmluZyBldmFsdWF0aW9ucyBsaWtlIEFJTUUgYW5kIEdQUUEsIHdoaWxlIG1haW50YWluaW5nIGxvd2VyIGxhdGVuY3kgYW5kIGNvc3QuIiwiY29udGV4dF9sZW5ndGgiOjIwMDAwMCwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dC0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6Ik90aGVyIiwiaW5zdHJ1Y3RfdHlwZSI6bnVsbH0sInByaWNpbmciOnsicHJvbXB0IjoiMC4wMDAwMDExIiwiY29tcGxldGlvbiI6IjAuMDAwMDA0NCIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIiwiaW5wdXRfY2FjaGVfcmVhZCI6IjAuMDAwMDAwNTUifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoyMDAwMDAsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6MTAwMDAwLCJpc19tb2RlcmF0ZWQiOnRydWV9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJkZWVwc2Vlay9kZWVwc2Vlay1yMS1kaXN0aWxsLXF3ZW4tMS41YiIsIm5hbWUiOiJEZWVwU2VlazogUjEgRGlzdGlsbCBRd2VuIDEuNUIiLCJjcmVhdGVkIjoxNzM4MzI4MDY3LCJkZXNjcmlwdGlvbiI6IkRlZXBTZWVrIFIxIERpc3RpbGwgUXdlbiAxLjVCIGlzIGEgZGlzdGlsbGVkIGxhcmdlIGxhbmd1YWdlIG1vZGVsIGJhc2VkIG9uICBbUXdlbiAyLjUgTWF0aCAxLjVCXShodHRwczovL2h1Z2dpbmdmYWNlLmNvL1F3ZW4vUXdlbjIuNS1NYXRoLTEuNUIpLCB1c2luZyBvdXRwdXRzIGZyb20gW0RlZXBTZWVrIFIxXSgvZGVlcHNlZWsvZGVlcHNlZWstcjEpLiBJdCdzIGEgdmVyeSBzbWFsbCBhbmQgZWZmaWNpZW50IG1vZGVsIHdoaWNoIG91dHBlcmZvcm1zIFtHUFQgNG8gMDUxM10oL29wZW5haS9ncHQtNG8tMjAyNC0wNS0xMykgb24gTWF0aCBCZW5jaG1hcmtzLlxuXG5PdGhlciBiZW5jaG1hcmsgcmVzdWx0cyBpbmNsdWRlOlxuXG4tIEFJTUUgMjAyNCBwYXNzQDE6IDI4Ljlcbi0gQUlNRSAyMDI0IGNvbnNANjQ6IDUyLjdcbi0gTUFUSC01MDAgcGFzc0AxOiA4My45XG5cblRoZSBtb2RlbCBsZXZlcmFnZXMgZmluZS10dW5pbmcgZnJvbSBEZWVwU2VlayBSMSdzIG91dHB1dHMsIGVuYWJsaW5nIGNvbXBldGl0aXZlIHBlcmZvcm1hbmNlIGNvbXBhcmFibGUgdG8gbGFyZ2VyIGZyb250aWVyIG1vZGVscy4iLCJjb250ZXh0X2xlbmd0aCI6MTMxMDcyLCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiT3RoZXIiLCJpbnN0cnVjdF90eXBlIjoiZGVlcHNlZWstcjEifSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMDE4IiwiY29tcGxldGlvbiI6IjAuMDAwMDAwMTgiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjEzMTA3MiwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjozMjc2OCwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6Im1pc3RyYWxhaS9taXN0cmFsLXNtYWxsLTI0Yi1pbnN0cnVjdC0yNTAxOmZyZWUiLCJuYW1lIjoiTWlzdHJhbDogTWlzdHJhbCBTbWFsbCAzIChmcmVlKSIsImNyZWF0ZWQiOjE3MzgyNTU0MDksImRlc2NyaXB0aW9uIjoiTWlzdHJhbCBTbWFsbCAzIGlzIGEgMjRCLXBhcmFtZXRlciBsYW5ndWFnZSBtb2RlbCBvcHRpbWl6ZWQgZm9yIGxvdy1sYXRlbmN5IHBlcmZvcm1hbmNlIGFjcm9zcyBjb21tb24gQUkgdGFza3MuIFJlbGVhc2VkIHVuZGVyIHRoZSBBcGFjaGUgMi4wIGxpY2Vuc2UsIGl0IGZlYXR1cmVzIGJvdGggcHJlLXRyYWluZWQgYW5kIGluc3RydWN0aW9uLXR1bmVkIHZlcnNpb25zIGRlc2lnbmVkIGZvciBlZmZpY2llbnQgbG9jYWwgZGVwbG95bWVudC5cblxuVGhlIG1vZGVsIGFjaGlldmVzIDgxJSBhY2N1cmFjeSBvbiB0aGUgTU1MVSBiZW5jaG1hcmsgYW5kIHBlcmZvcm1zIGNvbXBldGl0aXZlbHkgd2l0aCBsYXJnZXIgbW9kZWxzIGxpa2UgTGxhbWEgMy4zIDcwQiBhbmQgUXdlbiAzMkIsIHdoaWxlIG9wZXJhdGluZyBhdCB0aHJlZSB0aW1lcyB0aGUgc3BlZWQgb24gZXF1aXZhbGVudCBoYXJkd2FyZS4gW1JlYWQgdGhlIGJsb2cgcG9zdCBhYm91dCB0aGUgbW9kZWwgaGVyZS5dKGh0dHBzOi8vbWlzdHJhbC5haS9uZXdzL21pc3RyYWwtc21hbGwtMy8pIiwiY29udGV4dF9sZW5ndGgiOjMyNzY4LCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiTWlzdHJhbCIsImluc3RydWN0X3R5cGUiOm51bGx9LCJwcmljaW5nIjp7InByb21wdCI6IjAiLCJjb21wbGV0aW9uIjoiMCIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6MzI3NjgsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6bnVsbCwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6Im1pc3RyYWxhaS9taXN0cmFsLXNtYWxsLTI0Yi1pbnN0cnVjdC0yNTAxIiwibmFtZSI6Ik1pc3RyYWw6IE1pc3RyYWwgU21hbGwgMyIsImNyZWF0ZWQiOjE3MzgyNTU0MDksImRlc2NyaXB0aW9uIjoiTWlzdHJhbCBTbWFsbCAzIGlzIGEgMjRCLXBhcmFtZXRlciBsYW5ndWFnZSBtb2RlbCBvcHRpbWl6ZWQgZm9yIGxvdy1sYXRlbmN5IHBlcmZvcm1hbmNlIGFjcm9zcyBjb21tb24gQUkgdGFza3MuIFJlbGVhc2VkIHVuZGVyIHRoZSBBcGFjaGUgMi4wIGxpY2Vuc2UsIGl0IGZlYXR1cmVzIGJvdGggcHJlLXRyYWluZWQgYW5kIGluc3RydWN0aW9uLXR1bmVkIHZlcnNpb25zIGRlc2lnbmVkIGZvciBlZmZpY2llbnQgbG9jYWwgZGVwbG95bWVudC5cblxuVGhlIG1vZGVsIGFjaGlldmVzIDgxJSBhY2N1cmFjeSBvbiB0aGUgTU1MVSBiZW5jaG1hcmsgYW5kIHBlcmZvcm1zIGNvbXBldGl0aXZlbHkgd2l0aCBsYXJnZXIgbW9kZWxzIGxpa2UgTGxhbWEgMy4zIDcwQiBhbmQgUXdlbiAzMkIsIHdoaWxlIG9wZXJhdGluZyBhdCB0aHJlZSB0aW1lcyB0aGUgc3BlZWQgb24gZXF1aXZhbGVudCBoYXJkd2FyZS4gW1JlYWQgdGhlIGJsb2cgcG9zdCBhYm91dCB0aGUgbW9kZWwgaGVyZS5dKGh0dHBzOi8vbWlzdHJhbC5haS9uZXdzL21pc3RyYWwtc21hbGwtMy8pIiwiY29udGV4dF9sZW5ndGgiOjMyNzY4LCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiTWlzdHJhbCIsImluc3RydWN0X3R5cGUiOm51bGx9LCJwcmljaW5nIjp7InByb21wdCI6IjAuMDAwMDAwMDciLCJjb21wbGV0aW9uIjoiMC4wMDAwMDAxNCIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6MzI3NjgsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6MTYzODQsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJkZWVwc2Vlay9kZWVwc2Vlay1yMS1kaXN0aWxsLXF3ZW4tMzJiOmZyZWUiLCJuYW1lIjoiRGVlcFNlZWs6IFIxIERpc3RpbGwgUXdlbiAzMkIgKGZyZWUpIiwiY3JlYXRlZCI6MTczODE5NDgzMCwiZGVzY3JpcHRpb24iOiJEZWVwU2VlayBSMSBEaXN0aWxsIFF3ZW4gMzJCIGlzIGEgZGlzdGlsbGVkIGxhcmdlIGxhbmd1YWdlIG1vZGVsIGJhc2VkIG9uIFtRd2VuIDIuNSAzMkJdKGh0dHBzOi8vaHVnZ2luZ2ZhY2UuY28vUXdlbi9Rd2VuMi41LTMyQiksIHVzaW5nIG91dHB1dHMgZnJvbSBbRGVlcFNlZWsgUjFdKC9kZWVwc2Vlay9kZWVwc2Vlay1yMSkuIEl0IG91dHBlcmZvcm1zIE9wZW5BSSdzIG8xLW1pbmkgYWNyb3NzIHZhcmlvdXMgYmVuY2htYXJrcywgYWNoaWV2aW5nIG5ldyBzdGF0ZS1vZi10aGUtYXJ0IHJlc3VsdHMgZm9yIGRlbnNlIG1vZGVscy5cblxuT3RoZXIgYmVuY2htYXJrIHJlc3VsdHMgaW5jbHVkZTpcblxuLSBBSU1FIDIwMjQgcGFzc0AxOiA3Mi42XG4tIE1BVEgtNTAwIHBhc3NAMTogOTQuM1xuLSBDb2RlRm9yY2VzIFJhdGluZzogMTY5MVxuXG5UaGUgbW9kZWwgbGV2ZXJhZ2VzIGZpbmUtdHVuaW5nIGZyb20gRGVlcFNlZWsgUjEncyBvdXRwdXRzLCBlbmFibGluZyBjb21wZXRpdGl2ZSBwZXJmb3JtYW5jZSBjb21wYXJhYmxlIHRvIGxhcmdlciBmcm9udGllciBtb2RlbHMuIiwiY29udGV4dF9sZW5ndGgiOjE2MDAwLCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiUXdlbiIsImluc3RydWN0X3R5cGUiOiJkZWVwc2Vlay1yMSJ9LCJwcmljaW5nIjp7InByb21wdCI6IjAiLCJjb21wbGV0aW9uIjoiMCIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6MTYwMDAsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6MTYwMDAsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJkZWVwc2Vlay9kZWVwc2Vlay1yMS1kaXN0aWxsLXF3ZW4tMzJiIiwibmFtZSI6IkRlZXBTZWVrOiBSMSBEaXN0aWxsIFF3ZW4gMzJCIiwiY3JlYXRlZCI6MTczODE5NDgzMCwiZGVzY3JpcHRpb24iOiJEZWVwU2VlayBSMSBEaXN0aWxsIFF3ZW4gMzJCIGlzIGEgZGlzdGlsbGVkIGxhcmdlIGxhbmd1YWdlIG1vZGVsIGJhc2VkIG9uIFtRd2VuIDIuNSAzMkJdKGh0dHBzOi8vaHVnZ2luZ2ZhY2UuY28vUXdlbi9Rd2VuMi41LTMyQiksIHVzaW5nIG91dHB1dHMgZnJvbSBbRGVlcFNlZWsgUjFdKC9kZWVwc2Vlay9kZWVwc2Vlay1yMSkuIEl0IG91dHBlcmZvcm1zIE9wZW5BSSdzIG8xLW1pbmkgYWNyb3NzIHZhcmlvdXMgYmVuY2htYXJrcywgYWNoaWV2aW5nIG5ldyBzdGF0ZS1vZi10aGUtYXJ0IHJlc3VsdHMgZm9yIGRlbnNlIG1vZGVscy5cblxuT3RoZXIgYmVuY2htYXJrIHJlc3VsdHMgaW5jbHVkZTpcblxuLSBBSU1FIDIwMjQgcGFzc0AxOiA3Mi42XG4tIE1BVEgtNTAwIHBhc3NAMTogOTQuM1xuLSBDb2RlRm9yY2VzIFJhdGluZzogMTY5MVxuXG5UaGUgbW9kZWwgbGV2ZXJhZ2VzIGZpbmUtdHVuaW5nIGZyb20gRGVlcFNlZWsgUjEncyBvdXRwdXRzLCBlbmFibGluZyBjb21wZXRpdGl2ZSBwZXJmb3JtYW5jZSBjb21wYXJhYmxlIHRvIGxhcmdlciBmcm9udGllciBtb2RlbHMuIiwiY29udGV4dF9sZW5ndGgiOjEzMTA3MiwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dC0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6IlF3ZW4iLCJpbnN0cnVjdF90eXBlIjoiZGVlcHNlZWstcjEifSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMDEyIiwiY29tcGxldGlvbiI6IjAuMDAwMDAwMTgiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjEzMTA3MiwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjoxNjM4NCwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6ImRlZXBzZWVrL2RlZXBzZWVrLXIxLWRpc3RpbGwtcXdlbi0xNGI6ZnJlZSIsIm5hbWUiOiJEZWVwU2VlazogUjEgRGlzdGlsbCBRd2VuIDE0QiAoZnJlZSkiLCJjcmVhdGVkIjoxNzM4MTkzOTQwLCJkZXNjcmlwdGlvbiI6IkRlZXBTZWVrIFIxIERpc3RpbGwgUXdlbiAxNEIgaXMgYSBkaXN0aWxsZWQgbGFyZ2UgbGFuZ3VhZ2UgbW9kZWwgYmFzZWQgb24gW1F3ZW4gMi41IDE0Ql0oaHR0cHM6Ly9odWdnaW5nZmFjZS5jby9kZWVwc2Vlay1haS9EZWVwU2Vlay1SMS1EaXN0aWxsLVF3ZW4tMTRCKSwgdXNpbmcgb3V0cHV0cyBmcm9tIFtEZWVwU2VlayBSMV0oL2RlZXBzZWVrL2RlZXBzZWVrLXIxKS4gSXQgb3V0cGVyZm9ybXMgT3BlbkFJJ3MgbzEtbWluaSBhY3Jvc3MgdmFyaW91cyBiZW5jaG1hcmtzLCBhY2hpZXZpbmcgbmV3IHN0YXRlLW9mLXRoZS1hcnQgcmVzdWx0cyBmb3IgZGVuc2UgbW9kZWxzLlxuXG5PdGhlciBiZW5jaG1hcmsgcmVzdWx0cyBpbmNsdWRlOlxuXG4tIEFJTUUgMjAyNCBwYXNzQDE6IDY5Ljdcbi0gTUFUSC01MDAgcGFzc0AxOiA5My45XG4tIENvZGVGb3JjZXMgUmF0aW5nOiAxNDgxXG5cblRoZSBtb2RlbCBsZXZlcmFnZXMgZmluZS10dW5pbmcgZnJvbSBEZWVwU2VlayBSMSdzIG91dHB1dHMsIGVuYWJsaW5nIGNvbXBldGl0aXZlIHBlcmZvcm1hbmNlIGNvbXBhcmFibGUgdG8gbGFyZ2VyIGZyb250aWVyIG1vZGVscy4iLCJjb250ZXh0X2xlbmd0aCI6NjQwMDAsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJRd2VuIiwiaW5zdHJ1Y3RfdHlwZSI6ImRlZXBzZWVrLXIxIn0sInByaWNpbmciOnsicHJvbXB0IjoiMCIsImNvbXBsZXRpb24iOiIwIiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjo2NDAwMCwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjpudWxsLCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoiZGVlcHNlZWsvZGVlcHNlZWstcjEtZGlzdGlsbC1xd2VuLTE0YiIsIm5hbWUiOiJEZWVwU2VlazogUjEgRGlzdGlsbCBRd2VuIDE0QiIsImNyZWF0ZWQiOjE3MzgxOTM5NDAsImRlc2NyaXB0aW9uIjoiRGVlcFNlZWsgUjEgRGlzdGlsbCBRd2VuIDE0QiBpcyBhIGRpc3RpbGxlZCBsYXJnZSBsYW5ndWFnZSBtb2RlbCBiYXNlZCBvbiBbUXdlbiAyLjUgMTRCXShodHRwczovL2h1Z2dpbmdmYWNlLmNvL2RlZXBzZWVrLWFpL0RlZXBTZWVrLVIxLURpc3RpbGwtUXdlbi0xNEIpLCB1c2luZyBvdXRwdXRzIGZyb20gW0RlZXBTZWVrIFIxXSgvZGVlcHNlZWsvZGVlcHNlZWstcjEpLiBJdCBvdXRwZXJmb3JtcyBPcGVuQUkncyBvMS1taW5pIGFjcm9zcyB2YXJpb3VzIGJlbmNobWFya3MsIGFjaGlldmluZyBuZXcgc3RhdGUtb2YtdGhlLWFydCByZXN1bHRzIGZvciBkZW5zZSBtb2RlbHMuXG5cbk90aGVyIGJlbmNobWFyayByZXN1bHRzIGluY2x1ZGU6XG5cbi0gQUlNRSAyMDI0IHBhc3NAMTogNjkuN1xuLSBNQVRILTUwMCBwYXNzQDE6IDkzLjlcbi0gQ29kZUZvcmNlcyBSYXRpbmc6IDE0ODFcblxuVGhlIG1vZGVsIGxldmVyYWdlcyBmaW5lLXR1bmluZyBmcm9tIERlZXBTZWVrIFIxJ3Mgb3V0cHV0cywgZW5hYmxpbmcgY29tcGV0aXRpdmUgcGVyZm9ybWFuY2UgY29tcGFyYWJsZSB0byBsYXJnZXIgZnJvbnRpZXIgbW9kZWxzLiIsImNvbnRleHRfbGVuZ3RoIjo2NDAwMCwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dC0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6IlF3ZW4iLCJpbnN0cnVjdF90eXBlIjoiZGVlcHNlZWstcjEifSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMDE1IiwiY29tcGxldGlvbiI6IjAuMDAwMDAwMTUiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjY0MDAwLCJtYXhfY29tcGxldGlvbl90b2tlbnMiOjY0MDAwLCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoicGVycGxleGl0eS9zb25hci1yZWFzb25pbmciLCJuYW1lIjoiUGVycGxleGl0eTogU29uYXIgUmVhc29uaW5nIiwiY3JlYXRlZCI6MTczODEzMTEwNywiZGVzY3JpcHRpb24iOiJTb25hciBSZWFzb25pbmcgaXMgYSByZWFzb25pbmcgbW9kZWwgcHJvdmlkZWQgYnkgUGVycGxleGl0eSBiYXNlZCBvbiBbRGVlcFNlZWsgUjFdKC9kZWVwc2Vlay9kZWVwc2Vlay1yMSkuXG5cbkl0IGFsbG93cyBkZXZlbG9wZXJzIHRvIHV0aWxpemUgbG9uZyBjaGFpbiBvZiB0aG91Z2h0IHdpdGggYnVpbHQtaW4gd2ViIHNlYXJjaC4gU29uYXIgUmVhc29uaW5nIGlzIHVuY2Vuc29yZWQgYW5kIGhvc3RlZCBpbiBVUyBkYXRhY2VudGVycy4gIiwiY29udGV4dF9sZW5ndGgiOjEyNzAwMCwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dC0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6Ik90aGVyIiwiaW5zdHJ1Y3RfdHlwZSI6ImRlZXBzZWVrLXIxIn0sInByaWNpbmciOnsicHJvbXB0IjoiMC4wMDAwMDEiLCJjb21wbGV0aW9uIjoiMC4wMDAwMDUiLCJyZXF1ZXN0IjoiMC4wMDUiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoxMjcwMDAsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6bnVsbCwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6InBlcnBsZXhpdHkvc29uYXIiLCJuYW1lIjoiUGVycGxleGl0eTogU29uYXIiLCJjcmVhdGVkIjoxNzM4MDEzODA4LCJkZXNjcmlwdGlvbiI6IlNvbmFyIGlzIGxpZ2h0d2VpZ2h0LCBhZmZvcmRhYmxlLCBmYXN0LCBhbmQgc2ltcGxlIHRvIHVzZSDigJQgbm93IGZlYXR1cmluZyBjaXRhdGlvbnMgYW5kIHRoZSBhYmlsaXR5IHRvIGN1c3RvbWl6ZSBzb3VyY2VzLiBJdCBpcyBkZXNpZ25lZCBmb3IgY29tcGFuaWVzIHNlZWtpbmcgdG8gaW50ZWdyYXRlIGxpZ2h0d2VpZ2h0IHF1ZXN0aW9uLWFuZC1hbnN3ZXIgZmVhdHVyZXMgb3B0aW1pemVkIGZvciBzcGVlZC4iLCJjb250ZXh0X2xlbmd0aCI6MTI3MDcyLCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiT3RoZXIiLCJpbnN0cnVjdF90eXBlIjpudWxsfSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMSIsImNvbXBsZXRpb24iOiIwLjAwMDAwMSIsInJlcXVlc3QiOiIwLjAwNSIsImltYWdlIjoiMCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjEyNzA3MiwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjpudWxsLCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoibGlxdWlkL2xmbS03YiIsIm5hbWUiOiJMaXF1aWQ6IExGTSA3QiIsImNyZWF0ZWQiOjE3Mzc4MDY4ODMsImRlc2NyaXB0aW9uIjoiTEZNLTdCLCBhIG5ldyBiZXN0LWluLWNsYXNzIGxhbmd1YWdlIG1vZGVsLiBMRk0tN0IgaXMgZGVzaWduZWQgZm9yIGV4Y2VwdGlvbmFsIGNoYXQgY2FwYWJpbGl0aWVzLCBpbmNsdWRpbmcgbGFuZ3VhZ2VzIGxpa2UgQXJhYmljIGFuZCBKYXBhbmVzZS4gUG93ZXJlZCBieSB0aGUgTGlxdWlkIEZvdW5kYXRpb24gTW9kZWwgKExGTSkgYXJjaGl0ZWN0dXJlLCBpdCBleGhpYml0cyB1bmlxdWUgZmVhdHVyZXMgbGlrZSBsb3cgbWVtb3J5IGZvb3RwcmludCBhbmQgZmFzdCBpbmZlcmVuY2Ugc3BlZWQuIFxuXG5MRk0tN0IgaXMgdGhlIHdvcmxk4oCZcyBiZXN0LWluLWNsYXNzIG11bHRpbGluZ3VhbCBsYW5ndWFnZSBtb2RlbCBpbiBFbmdsaXNoLCBBcmFiaWMsIGFuZCBKYXBhbmVzZS5cblxuU2VlIHRoZSBbbGF1bmNoIGFubm91bmNlbWVudF0oaHR0cHM6Ly93d3cubGlxdWlkLmFpL2xmbS03YikgZm9yIGJlbmNobWFya3MgYW5kIG1vcmUgaW5mby4iLCJjb250ZXh0X2xlbmd0aCI6MzI3NjgsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJPdGhlciIsImluc3RydWN0X3R5cGUiOiJjaGF0bWwifSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMDAxIiwiY29tcGxldGlvbiI6IjAuMDAwMDAwMDEiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjMyNzY4LCJtYXhfY29tcGxldGlvbl90b2tlbnMiOm51bGwsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJsaXF1aWQvbGZtLTNiIiwibmFtZSI6IkxpcXVpZDogTEZNIDNCIiwiY3JlYXRlZCI6MTczNzgwNjUwMSwiZGVzY3JpcHRpb24iOiJMaXF1aWQncyBMRk0gM0IgZGVsaXZlcnMgaW5jcmVkaWJsZSBwZXJmb3JtYW5jZSBmb3IgaXRzIHNpemUuIEl0IHBvc2l0aW9ucyBpdHNlbGYgYXMgZmlyc3QgcGxhY2UgYW1vbmcgM0IgcGFyYW1ldGVyIHRyYW5zZm9ybWVycywgaHlicmlkcywgYW5kIFJOTiBtb2RlbHMgSXQgaXMgYWxzbyBvbiBwYXIgd2l0aCBQaGktMy41LW1pbmkgb24gbXVsdGlwbGUgYmVuY2htYXJrcywgd2hpbGUgYmVpbmcgMTguNCUgc21hbGxlci5cblxuTEZNLTNCIGlzIHRoZSBpZGVhbCBjaG9pY2UgZm9yIG1vYmlsZSBhbmQgb3RoZXIgZWRnZSB0ZXh0LWJhc2VkIGFwcGxpY2F0aW9ucy5cblxuU2VlIHRoZSBbbGF1bmNoIGFubm91bmNlbWVudF0oaHR0cHM6Ly93d3cubGlxdWlkLmFpL2xpcXVpZC1mb3VuZGF0aW9uLW1vZGVscykgZm9yIGJlbmNobWFya3MgYW5kIG1vcmUgaW5mby4iLCJjb250ZXh0X2xlbmd0aCI6MzI3NjgsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJPdGhlciIsImluc3RydWN0X3R5cGUiOiJjaGF0bWwifSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMDAyIiwiY29tcGxldGlvbiI6IjAuMDAwMDAwMDIiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjMyNzY4LCJtYXhfY29tcGxldGlvbl90b2tlbnMiOm51bGwsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJkZWVwc2Vlay9kZWVwc2Vlay1yMS1kaXN0aWxsLWxsYW1hLTcwYjpmcmVlIiwibmFtZSI6IkRlZXBTZWVrOiBSMSBEaXN0aWxsIExsYW1hIDcwQiAoZnJlZSkiLCJjcmVhdGVkIjoxNzM3NjYzMTY5LCJkZXNjcmlwdGlvbiI6IkRlZXBTZWVrIFIxIERpc3RpbGwgTGxhbWEgNzBCIGlzIGEgZGlzdGlsbGVkIGxhcmdlIGxhbmd1YWdlIG1vZGVsIGJhc2VkIG9uIFtMbGFtYS0zLjMtNzBCLUluc3RydWN0XSgvbWV0YS1sbGFtYS9sbGFtYS0zLjMtNzBiLWluc3RydWN0KSwgdXNpbmcgb3V0cHV0cyBmcm9tIFtEZWVwU2VlayBSMV0oL2RlZXBzZWVrL2RlZXBzZWVrLXIxKS4gVGhlIG1vZGVsIGNvbWJpbmVzIGFkdmFuY2VkIGRpc3RpbGxhdGlvbiB0ZWNobmlxdWVzIHRvIGFjaGlldmUgaGlnaCBwZXJmb3JtYW5jZSBhY3Jvc3MgbXVsdGlwbGUgYmVuY2htYXJrcywgaW5jbHVkaW5nOlxuXG4tIEFJTUUgMjAyNCBwYXNzQDE6IDcwLjBcbi0gTUFUSC01MDAgcGFzc0AxOiA5NC41XG4tIENvZGVGb3JjZXMgUmF0aW5nOiAxNjMzXG5cblRoZSBtb2RlbCBsZXZlcmFnZXMgZmluZS10dW5pbmcgZnJvbSBEZWVwU2VlayBSMSdzIG91dHB1dHMsIGVuYWJsaW5nIGNvbXBldGl0aXZlIHBlcmZvcm1hbmNlIGNvbXBhcmFibGUgdG8gbGFyZ2VyIGZyb250aWVyIG1vZGVscy4iLCJjb250ZXh0X2xlbmd0aCI6MTI4MDAwLCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiTGxhbWEzIiwiaW5zdHJ1Y3RfdHlwZSI6ImRlZXBzZWVrLXIxIn0sInByaWNpbmciOnsicHJvbXB0IjoiMCIsImNvbXBsZXRpb24iOiIwIiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoxMjgwMDAsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6bnVsbCwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6ImRlZXBzZWVrL2RlZXBzZWVrLXIxLWRpc3RpbGwtbGxhbWEtNzBiIiwibmFtZSI6IkRlZXBTZWVrOiBSMSBEaXN0aWxsIExsYW1hIDcwQiIsImNyZWF0ZWQiOjE3Mzc2NjMxNjksImRlc2NyaXB0aW9uIjoiRGVlcFNlZWsgUjEgRGlzdGlsbCBMbGFtYSA3MEIgaXMgYSBkaXN0aWxsZWQgbGFyZ2UgbGFuZ3VhZ2UgbW9kZWwgYmFzZWQgb24gW0xsYW1hLTMuMy03MEItSW5zdHJ1Y3RdKC9tZXRhLWxsYW1hL2xsYW1hLTMuMy03MGItaW5zdHJ1Y3QpLCB1c2luZyBvdXRwdXRzIGZyb20gW0RlZXBTZWVrIFIxXSgvZGVlcHNlZWsvZGVlcHNlZWstcjEpLiBUaGUgbW9kZWwgY29tYmluZXMgYWR2YW5jZWQgZGlzdGlsbGF0aW9uIHRlY2huaXF1ZXMgdG8gYWNoaWV2ZSBoaWdoIHBlcmZvcm1hbmNlIGFjcm9zcyBtdWx0aXBsZSBiZW5jaG1hcmtzLCBpbmNsdWRpbmc6XG5cbi0gQUlNRSAyMDI0IHBhc3NAMTogNzAuMFxuLSBNQVRILTUwMCBwYXNzQDE6IDk0LjVcbi0gQ29kZUZvcmNlcyBSYXRpbmc6IDE2MzNcblxuVGhlIG1vZGVsIGxldmVyYWdlcyBmaW5lLXR1bmluZyBmcm9tIERlZXBTZWVrIFIxJ3Mgb3V0cHV0cywgZW5hYmxpbmcgY29tcGV0aXRpdmUgcGVyZm9ybWFuY2UgY29tcGFyYWJsZSB0byBsYXJnZXIgZnJvbnRpZXIgbW9kZWxzLiIsImNvbnRleHRfbGVuZ3RoIjoxMzEwNzIsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJMbGFtYTMiLCJpbnN0cnVjdF90eXBlIjoiZGVlcHNlZWstcjEifSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMDEiLCJjb21wbGV0aW9uIjoiMC4wMDAwMDA0IiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoxMzEwNzIsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6MTYzODQsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJkZWVwc2Vlay9kZWVwc2Vlay1yMTpmcmVlIiwibmFtZSI6IkRlZXBTZWVrOiBSMSAoZnJlZSkiLCJjcmVhdGVkIjoxNzM3MzgxMDk1LCJkZXNjcmlwdGlvbiI6IkRlZXBTZWVrIFIxIGlzIGhlcmU6IFBlcmZvcm1hbmNlIG9uIHBhciB3aXRoIFtPcGVuQUkgbzFdKC9vcGVuYWkvbzEpLCBidXQgb3Blbi1zb3VyY2VkIGFuZCB3aXRoIGZ1bGx5IG9wZW4gcmVhc29uaW5nIHRva2Vucy4gSXQncyA2NzFCIHBhcmFtZXRlcnMgaW4gc2l6ZSwgd2l0aCAzN0IgYWN0aXZlIGluIGFuIGluZmVyZW5jZSBwYXNzLlxuXG5GdWxseSBvcGVuLXNvdXJjZSBtb2RlbCAmIFt0ZWNobmljYWwgcmVwb3J0XShodHRwczovL2FwaS1kb2NzLmRlZXBzZWVrLmNvbS9uZXdzL25ld3MyNTAxMjApLlxuXG5NSVQgbGljZW5zZWQ6IERpc3RpbGwgJiBjb21tZXJjaWFsaXplIGZyZWVseSEiLCJjb250ZXh0X2xlbmd0aCI6MTYzODQwLCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiRGVlcFNlZWsiLCJpbnN0cnVjdF90eXBlIjoiZGVlcHNlZWstcjEifSwicHJpY2luZyI6eyJwcm9tcHQiOiIwIiwiY29tcGxldGlvbiI6IjAiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjE2Mzg0MCwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjpudWxsLCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoiZGVlcHNlZWsvZGVlcHNlZWstcjEiLCJuYW1lIjoiRGVlcFNlZWs6IFIxIiwiY3JlYXRlZCI6MTczNzM4MTA5NSwiZGVzY3JpcHRpb24iOiJEZWVwU2VlayBSMSBpcyBoZXJlOiBQZXJmb3JtYW5jZSBvbiBwYXIgd2l0aCBbT3BlbkFJIG8xXSgvb3BlbmFpL28xKSwgYnV0IG9wZW4tc291cmNlZCBhbmQgd2l0aCBmdWxseSBvcGVuIHJlYXNvbmluZyB0b2tlbnMuIEl0J3MgNjcxQiBwYXJhbWV0ZXJzIGluIHNpemUsIHdpdGggMzdCIGFjdGl2ZSBpbiBhbiBpbmZlcmVuY2UgcGFzcy5cblxuRnVsbHkgb3Blbi1zb3VyY2UgbW9kZWwgJiBbdGVjaG5pY2FsIHJlcG9ydF0oaHR0cHM6Ly9hcGktZG9jcy5kZWVwc2Vlay5jb20vbmV3cy9uZXdzMjUwMTIwKS5cblxuTUlUIGxpY2Vuc2VkOiBEaXN0aWxsICYgY29tbWVyY2lhbGl6ZSBmcmVlbHkhIiwiY29udGV4dF9sZW5ndGgiOjE2Mzg0MCwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dC0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6IkRlZXBTZWVrIiwiaW5zdHJ1Y3RfdHlwZSI6ImRlZXBzZWVrLXIxIn0sInByaWNpbmciOnsicHJvbXB0IjoiMC4wMDAwMDA1IiwiY29tcGxldGlvbiI6IjAuMDAwMDAyMTgiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjE2Mzg0MCwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjoxNjM4NDAsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJzb3Bob3N5bXBhdGhlaWEvcm9ndWUtcm9zZS0xMDNiLXYwLjI6ZnJlZSIsIm5hbWUiOiJSb2d1ZSBSb3NlIDEwM0IgdjAuMiAoZnJlZSkiLCJjcmVhdGVkIjoxNzM3MTk1MTg5LCJkZXNjcmlwdGlvbiI6IlJvZ3VlIFJvc2UgZGVtb25zdHJhdGVzIHN0cm9uZyBjYXBhYmlsaXRpZXMgaW4gcm9sZXBsYXlpbmcgYW5kIHN0b3J5dGVsbGluZyBhcHBsaWNhdGlvbnMsIHBvdGVudGlhbGx5IHN1cnBhc3Npbmcgb3RoZXIgbW9kZWxzIGluIHRoZSAxMDMtMTIwQiBwYXJhbWV0ZXIgcmFuZ2UuIFdoaWxlIGl0IG9jY2FzaW9uYWxseSBleGhpYml0cyBpbmNvbnNpc3RlbmNpZXMgd2l0aCBzY2VuZSBsb2dpYywgdGhlIG92ZXJhbGwgaW50ZXJhY3Rpb24gcXVhbGl0eSByZXByZXNlbnRzIGFuIGFkdmFuY2VtZW50IGluIG5hdHVyYWwgbGFuZ3VhZ2UgcHJvY2Vzc2luZyBmb3IgY3JlYXRpdmUgYXBwbGljYXRpb25zLlxuXG5JdCBpcyBhIDEyMC1sYXllciBmcmFua2VubWVyZ2UgbW9kZWwgY29tYmluaW5nIHR3byBjdXN0b20gNzBCIGFyY2hpdGVjdHVyZXMgZnJvbSBOb3ZlbWJlciAyMDIzLCBkZXJpdmVkIGZyb20gdGhlIFt4d2luLXN0ZWxsYXJicmlnaHQtZXJwLTcwYi12Ml0oaHR0cHM6Ly9odWdnaW5nZmFjZS5jby9zb3Bob3N5bXBhdGhlaWEveHdpbi1zdGVsbGFyYnJpZ2h0LWVycC03MGItdjIpIGJhc2UuXG4iLCJjb250ZXh0X2xlbmd0aCI6NDA5NiwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dC0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6IkxsYW1hMiIsImluc3RydWN0X3R5cGUiOiJ2aWN1bmEifSwicHJpY2luZyI6eyJwcm9tcHQiOiIwIiwiY29tcGxldGlvbiI6IjAiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjQwOTYsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6bnVsbCwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6Im1pbmltYXgvbWluaW1heC0wMSIsIm5hbWUiOiJNaW5pTWF4OiBNaW5pTWF4LTAxIiwiY3JlYXRlZCI6MTczNjkxNTQ2MiwiZGVzY3JpcHRpb24iOiJNaW5pTWF4LTAxIGlzIGEgY29tYmluZXMgTWluaU1heC1UZXh0LTAxIGZvciB0ZXh0IGdlbmVyYXRpb24gYW5kIE1pbmlNYXgtVkwtMDEgZm9yIGltYWdlIHVuZGVyc3RhbmRpbmcuIEl0IGhhcyA0NTYgYmlsbGlvbiBwYXJhbWV0ZXJzLCB3aXRoIDQ1LjkgYmlsbGlvbiBwYXJhbWV0ZXJzIGFjdGl2YXRlZCBwZXIgaW5mZXJlbmNlLCBhbmQgY2FuIGhhbmRsZSBhIGNvbnRleHQgb2YgdXAgdG8gNCBtaWxsaW9uIHRva2Vucy5cblxuVGhlIHRleHQgbW9kZWwgYWRvcHRzIGEgaHlicmlkIGFyY2hpdGVjdHVyZSB0aGF0IGNvbWJpbmVzIExpZ2h0bmluZyBBdHRlbnRpb24sIFNvZnRtYXggQXR0ZW50aW9uLCBhbmQgTWl4dHVyZS1vZi1FeHBlcnRzIChNb0UpLiBUaGUgaW1hZ2UgbW9kZWwgYWRvcHRzIHRoZSDigJxWaVQtTUxQLUxMTeKAnSBmcmFtZXdvcmsgYW5kIGlzIHRyYWluZWQgb24gdG9wIG9mIHRoZSB0ZXh0IG1vZGVsLlxuXG5UbyByZWFkIG1vcmUgYWJvdXQgdGhlIHJlbGVhc2UsIHNlZTogaHR0cHM6Ly93d3cubWluaW1heGkuY29tL2VuL25ld3MvbWluaW1heC0wMS1zZXJpZXMtMiIsImNvbnRleHRfbGVuZ3RoIjoxMDAwMTkyLCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0K2ltYWdlLT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0IiwiaW1hZ2UiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJPdGhlciIsImluc3RydWN0X3R5cGUiOm51bGx9LCJwcmljaW5nIjp7InByb21wdCI6IjAuMDAwMDAwMiIsImNvbXBsZXRpb24iOiIwLjAwMDAwMTEiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjEwMDAxOTIsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6MTAwMDE5MiwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6Im1pc3RyYWxhaS9jb2Rlc3RyYWwtMjUwMSIsIm5hbWUiOiJNaXN0cmFsOiBDb2Rlc3RyYWwgMjUwMSIsImNyZWF0ZWQiOjE3MzY4OTU1MjIsImRlc2NyaXB0aW9uIjoiW01pc3RyYWxdKC9taXN0cmFsYWkpJ3MgY3V0dGluZy1lZGdlIGxhbmd1YWdlIG1vZGVsIGZvciBjb2RpbmcuIENvZGVzdHJhbCBzcGVjaWFsaXplcyBpbiBsb3ctbGF0ZW5jeSwgaGlnaC1mcmVxdWVuY3kgdGFza3Mgc3VjaCBhcyBmaWxsLWluLXRoZS1taWRkbGUgKEZJTSksIGNvZGUgY29ycmVjdGlvbiBhbmQgdGVzdCBnZW5lcmF0aW9uLiBcblxuTGVhcm4gbW9yZSBvbiB0aGVpciBibG9nIHBvc3Q6IGh0dHBzOi8vbWlzdHJhbC5haS9uZXdzL2NvZGVzdHJhbC0yNTAxLyIsImNvbnRleHRfbGVuZ3RoIjoyNjIxNDQsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJNaXN0cmFsIiwiaW5zdHJ1Y3RfdHlwZSI6bnVsbH0sInByaWNpbmciOnsicHJvbXB0IjoiMC4wMDAwMDAzIiwiY29tcGxldGlvbiI6IjAuMDAwMDAwOSIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6MjYyMTQ0LCJtYXhfY29tcGxldGlvbl90b2tlbnMiOm51bGwsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJtaWNyb3NvZnQvcGhpLTQiLCJuYW1lIjoiTWljcm9zb2Z0OiBQaGkgNCIsImNyZWF0ZWQiOjE3MzY0ODk4NzIsImRlc2NyaXB0aW9uIjoiW01pY3Jvc29mdCBSZXNlYXJjaF0oL21pY3Jvc29mdCkgUGhpLTQgaXMgZGVzaWduZWQgdG8gcGVyZm9ybSB3ZWxsIGluIGNvbXBsZXggcmVhc29uaW5nIHRhc2tzIGFuZCBjYW4gb3BlcmF0ZSBlZmZpY2llbnRseSBpbiBzaXR1YXRpb25zIHdpdGggbGltaXRlZCBtZW1vcnkgb3Igd2hlcmUgcXVpY2sgcmVzcG9uc2VzIGFyZSBuZWVkZWQuIFxuXG5BdCAxNCBiaWxsaW9uIHBhcmFtZXRlcnMsIGl0IHdhcyB0cmFpbmVkIG9uIGEgbWl4IG9mIGhpZ2gtcXVhbGl0eSBzeW50aGV0aWMgZGF0YXNldHMsIGRhdGEgZnJvbSBjdXJhdGVkIHdlYnNpdGVzLCBhbmQgYWNhZGVtaWMgbWF0ZXJpYWxzLiBJdCBoYXMgdW5kZXJnb25lIGNhcmVmdWwgaW1wcm92ZW1lbnQgdG8gZm9sbG93IGluc3RydWN0aW9ucyBhY2N1cmF0ZWx5IGFuZCBtYWludGFpbiBzdHJvbmcgc2FmZXR5IHN0YW5kYXJkcy4gSXQgd29ya3MgYmVzdCB3aXRoIEVuZ2xpc2ggbGFuZ3VhZ2UgaW5wdXRzLlxuXG5Gb3IgbW9yZSBpbmZvcm1hdGlvbiwgcGxlYXNlIHNlZSBbUGhpLTQgVGVjaG5pY2FsIFJlcG9ydF0oaHR0cHM6Ly9hcnhpdi5vcmcvcGRmLzI0MTIuMDg5MDUpXG4iLCJjb250ZXh0X2xlbmd0aCI6MTYzODQsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJPdGhlciIsImluc3RydWN0X3R5cGUiOm51bGx9LCJwcmljaW5nIjp7InByb21wdCI6IjAuMDAwMDAwMDciLCJjb21wbGV0aW9uIjoiMC4wMDAwMDAxNCIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6MTYzODQsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6MTYzODQsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJkZWVwc2Vlay9kZWVwc2Vlay1jaGF0OmZyZWUiLCJuYW1lIjoiRGVlcFNlZWs6IERlZXBTZWVrIFYzIChmcmVlKSIsImNyZWF0ZWQiOjE3MzUyNDEzMjAsImRlc2NyaXB0aW9uIjoiRGVlcFNlZWstVjMgaXMgdGhlIGxhdGVzdCBtb2RlbCBmcm9tIHRoZSBEZWVwU2VlayB0ZWFtLCBidWlsZGluZyB1cG9uIHRoZSBpbnN0cnVjdGlvbiBmb2xsb3dpbmcgYW5kIGNvZGluZyBhYmlsaXRpZXMgb2YgdGhlIHByZXZpb3VzIHZlcnNpb25zLiBQcmUtdHJhaW5lZCBvbiBuZWFybHkgMTUgdHJpbGxpb24gdG9rZW5zLCB0aGUgcmVwb3J0ZWQgZXZhbHVhdGlvbnMgcmV2ZWFsIHRoYXQgdGhlIG1vZGVsIG91dHBlcmZvcm1zIG90aGVyIG9wZW4tc291cmNlIG1vZGVscyBhbmQgcml2YWxzIGxlYWRpbmcgY2xvc2VkLXNvdXJjZSBtb2RlbHMuXG5cbkZvciBtb2RlbCBkZXRhaWxzLCBwbGVhc2UgdmlzaXQgW3RoZSBEZWVwU2Vlay1WMyByZXBvXShodHRwczovL2dpdGh1Yi5jb20vZGVlcHNlZWstYWkvRGVlcFNlZWstVjMpIGZvciBtb3JlIGluZm9ybWF0aW9uLCBvciBzZWUgdGhlIFtsYXVuY2ggYW5ub3VuY2VtZW50XShodHRwczovL2FwaS1kb2NzLmRlZXBzZWVrLmNvbS9uZXdzL25ld3MxMjI2KS4iLCJjb250ZXh0X2xlbmd0aCI6MTYzODQwLCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiRGVlcFNlZWsiLCJpbnN0cnVjdF90eXBlIjpudWxsfSwicHJpY2luZyI6eyJwcm9tcHQiOiIwIiwiY29tcGxldGlvbiI6IjAiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjE2Mzg0MCwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjpudWxsLCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoiZGVlcHNlZWsvZGVlcHNlZWstY2hhdCIsIm5hbWUiOiJEZWVwU2VlazogRGVlcFNlZWsgVjMiLCJjcmVhdGVkIjoxNzM1MjQxMzIwLCJkZXNjcmlwdGlvbiI6IkRlZXBTZWVrLVYzIGlzIHRoZSBsYXRlc3QgbW9kZWwgZnJvbSB0aGUgRGVlcFNlZWsgdGVhbSwgYnVpbGRpbmcgdXBvbiB0aGUgaW5zdHJ1Y3Rpb24gZm9sbG93aW5nIGFuZCBjb2RpbmcgYWJpbGl0aWVzIG9mIHRoZSBwcmV2aW91cyB2ZXJzaW9ucy4gUHJlLXRyYWluZWQgb24gbmVhcmx5IDE1IHRyaWxsaW9uIHRva2VucywgdGhlIHJlcG9ydGVkIGV2YWx1YXRpb25zIHJldmVhbCB0aGF0IHRoZSBtb2RlbCBvdXRwZXJmb3JtcyBvdGhlciBvcGVuLXNvdXJjZSBtb2RlbHMgYW5kIHJpdmFscyBsZWFkaW5nIGNsb3NlZC1zb3VyY2UgbW9kZWxzLlxuXG5Gb3IgbW9kZWwgZGV0YWlscywgcGxlYXNlIHZpc2l0IFt0aGUgRGVlcFNlZWstVjMgcmVwb10oaHR0cHM6Ly9naXRodWIuY29tL2RlZXBzZWVrLWFpL0RlZXBTZWVrLVYzKSBmb3IgbW9yZSBpbmZvcm1hdGlvbiwgb3Igc2VlIHRoZSBbbGF1bmNoIGFubm91bmNlbWVudF0oaHR0cHM6Ly9hcGktZG9jcy5kZWVwc2Vlay5jb20vbmV3cy9uZXdzMTIyNikuIiwiY29udGV4dF9sZW5ndGgiOjE2Mzg0MCwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dC0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6IkRlZXBTZWVrIiwiaW5zdHJ1Y3RfdHlwZSI6bnVsbH0sInByaWNpbmciOnsicHJvbXB0IjoiMC4wMDAwMDAzOCIsImNvbXBsZXRpb24iOiIwLjAwMDAwMDg5IiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoxNjM4NDAsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6MTYzODQwLCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoic2FvMTBrL2wzLjMtZXVyeWFsZS03MGIiLCJuYW1lIjoiU2FvMTBLOiBMbGFtYSAzLjMgRXVyeWFsZSA3MEIiLCJjcmVhdGVkIjoxNzM0NTM1OTI4LCJkZXNjcmlwdGlvbiI6IkV1cnlhbGUgTDMuMyA3MEIgaXMgYSBtb2RlbCBmb2N1c2VkIG9uIGNyZWF0aXZlIHJvbGVwbGF5IGZyb20gW1NhbzEwa10oaHR0cHM6Ly9rby1maS5jb20vc2FvMTBrKS4gSXQgaXMgdGhlIHN1Y2Nlc3NvciBvZiBbRXVyeWFsZSBMMyA3MEIgdjIuMl0oL21vZGVscy9zYW8xMGsvbDMtZXVyeWFsZS03MGIpLiIsImNvbnRleHRfbGVuZ3RoIjoxMzEwNzIsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJMbGFtYTMiLCJpbnN0cnVjdF90eXBlIjoibGxhbWEzIn0sInByaWNpbmciOnsicHJvbXB0IjoiMC4wMDAwMDA3IiwiY29tcGxldGlvbiI6IjAuMDAwMDAwOCIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6MTMxMDcyLCJtYXhfY29tcGxldGlvbl90b2tlbnMiOjE2Mzg0LCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoib3BlbmFpL28xIiwibmFtZSI6Ik9wZW5BSTogbzEiLCJjcmVhdGVkIjoxNzM0NDU5OTk5LCJkZXNjcmlwdGlvbiI6IlRoZSBsYXRlc3QgYW5kIHN0cm9uZ2VzdCBtb2RlbCBmYW1pbHkgZnJvbSBPcGVuQUksIG8xIGlzIGRlc2lnbmVkIHRvIHNwZW5kIG1vcmUgdGltZSB0aGlua2luZyBiZWZvcmUgcmVzcG9uZGluZy4gVGhlIG8xIG1vZGVsIHNlcmllcyBpcyB0cmFpbmVkIHdpdGggbGFyZ2Utc2NhbGUgcmVpbmZvcmNlbWVudCBsZWFybmluZyB0byByZWFzb24gdXNpbmcgY2hhaW4gb2YgdGhvdWdodC4gXG5cblRoZSBvMSBtb2RlbHMgYXJlIG9wdGltaXplZCBmb3IgbWF0aCwgc2NpZW5jZSwgcHJvZ3JhbW1pbmcsIGFuZCBvdGhlciBTVEVNLXJlbGF0ZWQgdGFza3MuIFRoZXkgY29uc2lzdGVudGx5IGV4aGliaXQgUGhELWxldmVsIGFjY3VyYWN5IG9uIGJlbmNobWFya3MgaW4gcGh5c2ljcywgY2hlbWlzdHJ5LCBhbmQgYmlvbG9neS4gTGVhcm4gbW9yZSBpbiB0aGUgW2xhdW5jaCBhbm5vdW5jZW1lbnRdKGh0dHBzOi8vb3BlbmFpLmNvbS9vMSkuXG4iLCJjb250ZXh0X2xlbmd0aCI6MjAwMDAwLCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0K2ltYWdlLT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0IiwiaW1hZ2UiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJHUFQiLCJpbnN0cnVjdF90eXBlIjpudWxsfSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAxNSIsImNvbXBsZXRpb24iOiIwLjAwMDA2IiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAuMDIxNjc1Iiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIiwiaW5wdXRfY2FjaGVfcmVhZCI6IjAuMDAwMDA3NSJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjIwMDAwMCwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjoxMDAwMDAsImlzX21vZGVyYXRlZCI6dHJ1ZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6ImV2YS11bml0LTAxL2V2YS1sbGFtYS0zLjMzLTcwYiIsIm5hbWUiOiJFVkEgTGxhbWEgMy4zMyA3MEIiLCJjcmVhdGVkIjoxNzM0Mzc3MzAzLCJkZXNjcmlwdGlvbiI6IkVWQSBMbGFtYSAzLjMzIDcwYiBpcyBhIHJvbGVwbGF5IGFuZCBzdG9yeXdyaXRpbmcgc3BlY2lhbGlzdCBtb2RlbC4gSXQgaXMgYSBmdWxsLXBhcmFtZXRlciBmaW5ldHVuZSBvZiBbTGxhbWEtMy4zLTcwQi1JbnN0cnVjdF0oaHR0cHM6Ly9vcGVucm91dGVyLmFpL21ldGEtbGxhbWEvbGxhbWEtMy4zLTcwYi1pbnN0cnVjdCkgb24gbWl4dHVyZSBvZiBzeW50aGV0aWMgYW5kIG5hdHVyYWwgZGF0YS5cblxuSXQgdXNlcyBDZWxlc3RlIDcwQiAwLjEgZGF0YSBtaXh0dXJlLCBncmVhdGx5IGV4cGFuZGluZyBpdCB0byBpbXByb3ZlIHZlcnNhdGlsaXR5LCBjcmVhdGl2aXR5IGFuZCBcImZsYXZvclwiIG9mIHRoZSByZXN1bHRpbmcgbW9kZWxcblxuVGhpcyBtb2RlbCB3YXMgYnVpbHQgd2l0aCBMbGFtYSBieSBNZXRhLlxuIiwiY29udGV4dF9sZW5ndGgiOjE2Mzg0LCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiTGxhbWEzIiwiaW5zdHJ1Y3RfdHlwZSI6ImxsYW1hMyJ9LCJwcmljaW5nIjp7InByb21wdCI6IjAuMDAwMDA0IiwiY29tcGxldGlvbiI6IjAuMDAwMDA2IiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoxNjM4NCwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjo0MDk2LCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoieC1haS9ncm9rLTItdmlzaW9uLTEyMTIiLCJuYW1lIjoieEFJOiBHcm9rIDIgVmlzaW9uIDEyMTIiLCJjcmVhdGVkIjoxNzM0MjM3MzM4LCJkZXNjcmlwdGlvbiI6Ikdyb2sgMiBWaXNpb24gMTIxMiBhZHZhbmNlcyBpbWFnZS1iYXNlZCBBSSB3aXRoIHN0cm9uZ2VyIHZpc3VhbCBjb21wcmVoZW5zaW9uLCByZWZpbmVkIGluc3RydWN0aW9uLWZvbGxvd2luZywgYW5kIG11bHRpbGluZ3VhbCBzdXBwb3J0LiBGcm9tIG9iamVjdCByZWNvZ25pdGlvbiB0byBzdHlsZSBhbmFseXNpcywgaXQgZW1wb3dlcnMgZGV2ZWxvcGVycyB0byBidWlsZCBtb3JlIGludHVpdGl2ZSwgdmlzdWFsbHkgYXdhcmUgYXBwbGljYXRpb25zLiBJdHMgZW5oYW5jZWQgc3RlZXJhYmlsaXR5IGFuZCByZWFzb25pbmcgZXN0YWJsaXNoIGEgcm9idXN0IGZvdW5kYXRpb24gZm9yIG5leHQtZ2VuZXJhdGlvbiBpbWFnZSBzb2x1dGlvbnMuXG5cblRvIHJlYWQgbW9yZSBhYm91dCB0aGlzIG1vZGVsLCBjaGVjayBvdXQgW3hBSSdzIGFubm91bmNlbWVudF0oaHR0cHM6Ly94LmFpL2Jsb2cvZ3Jvay0xMjEyKS4iLCJjb250ZXh0X2xlbmd0aCI6MzI3NjgsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQraW1hZ2UtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiLCJpbWFnZSJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6Ikdyb2siLCJpbnN0cnVjdF90eXBlIjpudWxsfSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMiIsImNvbXBsZXRpb24iOiIwLjAwMDAxIiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAuMDAzNiIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjMyNzY4LCJtYXhfY29tcGxldGlvbl90b2tlbnMiOm51bGwsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJ4LWFpL2dyb2stMi0xMjEyIiwibmFtZSI6InhBSTogR3JvayAyIDEyMTIiLCJjcmVhdGVkIjoxNzM0MjMyODE0LCJkZXNjcmlwdGlvbiI6Ikdyb2sgMiAxMjEyIGludHJvZHVjZXMgc2lnbmlmaWNhbnQgZW5oYW5jZW1lbnRzIHRvIGFjY3VyYWN5LCBpbnN0cnVjdGlvbiBhZGhlcmVuY2UsIGFuZCBtdWx0aWxpbmd1YWwgc3VwcG9ydCwgbWFraW5nIGl0IGEgcG93ZXJmdWwgYW5kIGZsZXhpYmxlIGNob2ljZSBmb3IgZGV2ZWxvcGVycyBzZWVraW5nIGEgaGlnaGx5IHN0ZWVyYWJsZSwgaW50ZWxsaWdlbnQgbW9kZWwuIiwiY29udGV4dF9sZW5ndGgiOjEzMTA3MiwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dC0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6Ikdyb2siLCJpbnN0cnVjdF90eXBlIjpudWxsfSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMiIsImNvbXBsZXRpb24iOiIwLjAwMDAxIiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoxMzEwNzIsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6bnVsbCwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6ImNvaGVyZS9jb21tYW5kLXI3Yi0xMi0yMDI0IiwibmFtZSI6IkNvaGVyZTogQ29tbWFuZCBSN0IgKDEyLTIwMjQpIiwiY3JlYXRlZCI6MTczNDE1ODE1MiwiZGVzY3JpcHRpb24iOiJDb21tYW5kIFI3QiAoMTItMjAyNCkgaXMgYSBzbWFsbCwgZmFzdCB1cGRhdGUgb2YgdGhlIENvbW1hbmQgUisgbW9kZWwsIGRlbGl2ZXJlZCBpbiBEZWNlbWJlciAyMDI0LiBJdCBleGNlbHMgYXQgUkFHLCB0b29sIHVzZSwgYWdlbnRzLCBhbmQgc2ltaWxhciB0YXNrcyByZXF1aXJpbmcgY29tcGxleCByZWFzb25pbmcgYW5kIG11bHRpcGxlIHN0ZXBzLlxuXG5Vc2Ugb2YgdGhpcyBtb2RlbCBpcyBzdWJqZWN0IHRvIENvaGVyZSdzIFtVc2FnZSBQb2xpY3ldKGh0dHBzOi8vZG9jcy5jb2hlcmUuY29tL2RvY3MvdXNhZ2UtcG9saWN5KSBhbmQgW1NhYVMgQWdyZWVtZW50XShodHRwczovL2NvaGVyZS5jb20vc2Fhcy1hZ3JlZW1lbnQpLiIsImNvbnRleHRfbGVuZ3RoIjoxMjgwMDAsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJDb2hlcmUiLCJpbnN0cnVjdF90eXBlIjpudWxsfSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMDAzNzUiLCJjb21wbGV0aW9uIjoiMC4wMDAwMDAxNSIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6MTI4MDAwLCJtYXhfY29tcGxldGlvbl90b2tlbnMiOjQwMDAsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJnb29nbGUvZ2VtaW5pLTIuMC1mbGFzaC1leHA6ZnJlZSIsIm5hbWUiOiJHb29nbGU6IEdlbWluaSAyLjAgRmxhc2ggRXhwZXJpbWVudGFsIChmcmVlKSIsImNyZWF0ZWQiOjE3MzM5Mzc1MjMsImRlc2NyaXB0aW9uIjoiR2VtaW5pIEZsYXNoIDIuMCBvZmZlcnMgYSBzaWduaWZpY2FudGx5IGZhc3RlciB0aW1lIHRvIGZpcnN0IHRva2VuIChUVEZUKSBjb21wYXJlZCB0byBbR2VtaW5pIEZsYXNoIDEuNV0oL2dvb2dsZS9nZW1pbmktZmxhc2gtMS41KSwgd2hpbGUgbWFpbnRhaW5pbmcgcXVhbGl0eSBvbiBwYXIgd2l0aCBsYXJnZXIgbW9kZWxzIGxpa2UgW0dlbWluaSBQcm8gMS41XSgvZ29vZ2xlL2dlbWluaS1wcm8tMS41KS4gSXQgaW50cm9kdWNlcyBub3RhYmxlIGVuaGFuY2VtZW50cyBpbiBtdWx0aW1vZGFsIHVuZGVyc3RhbmRpbmcsIGNvZGluZyBjYXBhYmlsaXRpZXMsIGNvbXBsZXggaW5zdHJ1Y3Rpb24gZm9sbG93aW5nLCBhbmQgZnVuY3Rpb24gY2FsbGluZy4gVGhlc2UgYWR2YW5jZW1lbnRzIGNvbWUgdG9nZXRoZXIgdG8gZGVsaXZlciBtb3JlIHNlYW1sZXNzIGFuZCByb2J1c3QgYWdlbnRpYyBleHBlcmllbmNlcy4iLCJjb250ZXh0X2xlbmd0aCI6MTA0ODU3NiwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dCtpbWFnZS0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCIsImltYWdlIl0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiR2VtaW5pIiwiaW5zdHJ1Y3RfdHlwZSI6bnVsbH0sInByaWNpbmciOnsicHJvbXB0IjoiMCIsImNvbXBsZXRpb24iOiIwIiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoxMDQ4NTc2LCJtYXhfY29tcGxldGlvbl90b2tlbnMiOjgxOTIsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJtZXRhLWxsYW1hL2xsYW1hLTMuMy03MGItaW5zdHJ1Y3Q6ZnJlZSIsIm5hbWUiOiJNZXRhOiBMbGFtYSAzLjMgNzBCIEluc3RydWN0IChmcmVlKSIsImNyZWF0ZWQiOjE3MzM1MDYxMzcsImRlc2NyaXB0aW9uIjoiVGhlIE1ldGEgTGxhbWEgMy4zIG11bHRpbGluZ3VhbCBsYXJnZSBsYW5ndWFnZSBtb2RlbCAoTExNKSBpcyBhIHByZXRyYWluZWQgYW5kIGluc3RydWN0aW9uIHR1bmVkIGdlbmVyYXRpdmUgbW9kZWwgaW4gNzBCICh0ZXh0IGluL3RleHQgb3V0KS4gVGhlIExsYW1hIDMuMyBpbnN0cnVjdGlvbiB0dW5lZCB0ZXh0IG9ubHkgbW9kZWwgaXMgb3B0aW1pemVkIGZvciBtdWx0aWxpbmd1YWwgZGlhbG9ndWUgdXNlIGNhc2VzIGFuZCBvdXRwZXJmb3JtcyBtYW55IG9mIHRoZSBhdmFpbGFibGUgb3BlbiBzb3VyY2UgYW5kIGNsb3NlZCBjaGF0IG1vZGVscyBvbiBjb21tb24gaW5kdXN0cnkgYmVuY2htYXJrcy5cblxuU3VwcG9ydGVkIGxhbmd1YWdlczogRW5nbGlzaCwgR2VybWFuLCBGcmVuY2gsIEl0YWxpYW4sIFBvcnR1Z3Vlc2UsIEhpbmRpLCBTcGFuaXNoLCBhbmQgVGhhaS5cblxuW01vZGVsIENhcmRdKGh0dHBzOi8vZ2l0aHViLmNvbS9tZXRhLWxsYW1hL2xsYW1hLW1vZGVscy9ibG9iL21haW4vbW9kZWxzL2xsYW1hM18zL01PREVMX0NBUkQubWQpIiwiY29udGV4dF9sZW5ndGgiOjgwMDAsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJMbGFtYTMiLCJpbnN0cnVjdF90eXBlIjoibGxhbWEzIn0sInByaWNpbmciOnsicHJvbXB0IjoiMCIsImNvbXBsZXRpb24iOiIwIiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjo4MDAwLCJtYXhfY29tcGxldGlvbl90b2tlbnMiOjgwMDAsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJtZXRhLWxsYW1hL2xsYW1hLTMuMy03MGItaW5zdHJ1Y3QiLCJuYW1lIjoiTWV0YTogTGxhbWEgMy4zIDcwQiBJbnN0cnVjdCIsImNyZWF0ZWQiOjE3MzM1MDYxMzcsImRlc2NyaXB0aW9uIjoiVGhlIE1ldGEgTGxhbWEgMy4zIG11bHRpbGluZ3VhbCBsYXJnZSBsYW5ndWFnZSBtb2RlbCAoTExNKSBpcyBhIHByZXRyYWluZWQgYW5kIGluc3RydWN0aW9uIHR1bmVkIGdlbmVyYXRpdmUgbW9kZWwgaW4gNzBCICh0ZXh0IGluL3RleHQgb3V0KS4gVGhlIExsYW1hIDMuMyBpbnN0cnVjdGlvbiB0dW5lZCB0ZXh0IG9ubHkgbW9kZWwgaXMgb3B0aW1pemVkIGZvciBtdWx0aWxpbmd1YWwgZGlhbG9ndWUgdXNlIGNhc2VzIGFuZCBvdXRwZXJmb3JtcyBtYW55IG9mIHRoZSBhdmFpbGFibGUgb3BlbiBzb3VyY2UgYW5kIGNsb3NlZCBjaGF0IG1vZGVscyBvbiBjb21tb24gaW5kdXN0cnkgYmVuY2htYXJrcy5cblxuU3VwcG9ydGVkIGxhbmd1YWdlczogRW5nbGlzaCwgR2VybWFuLCBGcmVuY2gsIEl0YWxpYW4sIFBvcnR1Z3Vlc2UsIEhpbmRpLCBTcGFuaXNoLCBhbmQgVGhhaS5cblxuW01vZGVsIENhcmRdKGh0dHBzOi8vZ2l0aHViLmNvbS9tZXRhLWxsYW1hL2xsYW1hLW1vZGVscy9ibG9iL21haW4vbW9kZWxzL2xsYW1hM18zL01PREVMX0NBUkQubWQpIiwiY29udGV4dF9sZW5ndGgiOjEyODAwMCwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dC0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6IkxsYW1hMyIsImluc3RydWN0X3R5cGUiOiJsbGFtYTMifSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMDEiLCJjb21wbGV0aW9uIjoiMC4wMDAwMDAyNSIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6MTI4MDAwLCJtYXhfY29tcGxldGlvbl90b2tlbnMiOjE2Mzg0LCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoiYW1hem9uL25vdmEtbGl0ZS12MSIsIm5hbWUiOiJBbWF6b246IE5vdmEgTGl0ZSAxLjAiLCJjcmVhdGVkIjoxNzMzNDM3MzYzLCJkZXNjcmlwdGlvbiI6IkFtYXpvbiBOb3ZhIExpdGUgMS4wIGlzIGEgdmVyeSBsb3ctY29zdCBtdWx0aW1vZGFsIG1vZGVsIGZyb20gQW1hem9uIHRoYXQgZm9jdXNlZCBvbiBmYXN0IHByb2Nlc3Npbmcgb2YgaW1hZ2UsIHZpZGVvLCBhbmQgdGV4dCBpbnB1dHMgdG8gZ2VuZXJhdGUgdGV4dCBvdXRwdXQuIEFtYXpvbiBOb3ZhIExpdGUgY2FuIGhhbmRsZSByZWFsLXRpbWUgY3VzdG9tZXIgaW50ZXJhY3Rpb25zLCBkb2N1bWVudCBhbmFseXNpcywgYW5kIHZpc3VhbCBxdWVzdGlvbi1hbnN3ZXJpbmcgdGFza3Mgd2l0aCBoaWdoIGFjY3VyYWN5LlxuXG5XaXRoIGFuIGlucHV0IGNvbnRleHQgb2YgMzAwSyB0b2tlbnMsIGl0IGNhbiBhbmFseXplIG11bHRpcGxlIGltYWdlcyBvciB1cCB0byAzMCBtaW51dGVzIG9mIHZpZGVvIGluIGEgc2luZ2xlIGlucHV0LiIsImNvbnRleHRfbGVuZ3RoIjozMDAwMDAsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQraW1hZ2UtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiLCJpbWFnZSJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6Ik5vdmEiLCJpbnN0cnVjdF90eXBlIjpudWxsfSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMDA2IiwiY29tcGxldGlvbiI6IjAuMDAwMDAwMjQiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMC4wMDAwOSIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjMwMDAwMCwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjo1MTIwLCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoiYW1hem9uL25vdmEtbWljcm8tdjEiLCJuYW1lIjoiQW1hem9uOiBOb3ZhIE1pY3JvIDEuMCIsImNyZWF0ZWQiOjE3MzM0MzcyMzcsImRlc2NyaXB0aW9uIjoiQW1hem9uIE5vdmEgTWljcm8gMS4wIGlzIGEgdGV4dC1vbmx5IG1vZGVsIHRoYXQgZGVsaXZlcnMgdGhlIGxvd2VzdCBsYXRlbmN5IHJlc3BvbnNlcyBpbiB0aGUgQW1hem9uIE5vdmEgZmFtaWx5IG9mIG1vZGVscyBhdCBhIHZlcnkgbG93IGNvc3QuIFdpdGggYSBjb250ZXh0IGxlbmd0aCBvZiAxMjhLIHRva2VucyBhbmQgb3B0aW1pemVkIGZvciBzcGVlZCBhbmQgY29zdCwgQW1hem9uIE5vdmEgTWljcm8gZXhjZWxzIGF0IHRhc2tzIHN1Y2ggYXMgdGV4dCBzdW1tYXJpemF0aW9uLCB0cmFuc2xhdGlvbiwgY29udGVudCBjbGFzc2lmaWNhdGlvbiwgaW50ZXJhY3RpdmUgY2hhdCwgYW5kIGJyYWluc3Rvcm1pbmcuIEl0IGhhcyAgc2ltcGxlIG1hdGhlbWF0aWNhbCByZWFzb25pbmcgYW5kIGNvZGluZyBhYmlsaXRpZXMuIiwiY29udGV4dF9sZW5ndGgiOjEyODAwMCwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dC0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6Ik5vdmEiLCJpbnN0cnVjdF90eXBlIjpudWxsfSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMDAzNSIsImNvbXBsZXRpb24iOiIwLjAwMDAwMDE0IiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoxMjgwMDAsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6NTEyMCwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6ImFtYXpvbi9ub3ZhLXByby12MSIsIm5hbWUiOiJBbWF6b246IE5vdmEgUHJvIDEuMCIsImNyZWF0ZWQiOjE3MzM0MzYzMDMsImRlc2NyaXB0aW9uIjoiQW1hem9uIE5vdmEgUHJvIDEuMCBpcyBhIGNhcGFibGUgbXVsdGltb2RhbCBtb2RlbCBmcm9tIEFtYXpvbiBmb2N1c2VkIG9uIHByb3ZpZGluZyBhIGNvbWJpbmF0aW9uIG9mIGFjY3VyYWN5LCBzcGVlZCwgYW5kIGNvc3QgZm9yIGEgd2lkZSByYW5nZSBvZiB0YXNrcy4gQXMgb2YgRGVjZW1iZXIgMjAyNCwgaXQgYWNoaWV2ZXMgc3RhdGUtb2YtdGhlLWFydCBwZXJmb3JtYW5jZSBvbiBrZXkgYmVuY2htYXJrcyBpbmNsdWRpbmcgdmlzdWFsIHF1ZXN0aW9uIGFuc3dlcmluZyAoVGV4dFZRQSkgYW5kIHZpZGVvIHVuZGVyc3RhbmRpbmcgKFZBVEVYKS5cblxuQW1hem9uIE5vdmEgUHJvIGRlbW9uc3RyYXRlcyBzdHJvbmcgY2FwYWJpbGl0aWVzIGluIHByb2Nlc3NpbmcgYm90aCB2aXN1YWwgYW5kIHRleHR1YWwgaW5mb3JtYXRpb24gYW5kIGF0IGFuYWx5emluZyBmaW5hbmNpYWwgZG9jdW1lbnRzLlxuXG4qKk5PVEUqKjogVmlkZW8gaW5wdXQgaXMgbm90IHN1cHBvcnRlZCBhdCB0aGlzIHRpbWUuIiwiY29udGV4dF9sZW5ndGgiOjMwMDAwMCwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dCtpbWFnZS0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCIsImltYWdlIl0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiTm92YSIsImluc3RydWN0X3R5cGUiOm51bGx9LCJwcmljaW5nIjp7InByb21wdCI6IjAuMDAwMDAwOCIsImNvbXBsZXRpb24iOiIwLjAwMDAwMzIiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMC4wMDEyIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6MzAwMDAwLCJtYXhfY29tcGxldGlvbl90b2tlbnMiOjUxMjAsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJxd2VuL3F3cS0zMmItcHJldmlldzpmcmVlIiwibmFtZSI6IlF3ZW46IFF3USAzMkIgUHJldmlldyAoZnJlZSkiLCJjcmVhdGVkIjoxNzMyNzU0NTQxLCJkZXNjcmlwdGlvbiI6IlF3US0zMkItUHJldmlldyBpcyBhbiBleHBlcmltZW50YWwgcmVzZWFyY2ggbW9kZWwgZm9jdXNlZCBvbiBBSSByZWFzb25pbmcgY2FwYWJpbGl0aWVzIGRldmVsb3BlZCBieSB0aGUgUXdlbiBUZWFtLiBBcyBhIHByZXZpZXcgcmVsZWFzZSwgaXQgZGVtb25zdHJhdGVzIHByb21pc2luZyBhbmFseXRpY2FsIGFiaWxpdGllcyB3aGlsZSBoYXZpbmcgc2V2ZXJhbCBpbXBvcnRhbnQgbGltaXRhdGlvbnM6XG5cbjEuICoqTGFuZ3VhZ2UgTWl4aW5nIGFuZCBDb2RlLVN3aXRjaGluZyoqOiBUaGUgbW9kZWwgbWF5IG1peCBsYW5ndWFnZXMgb3Igc3dpdGNoIGJldHdlZW4gdGhlbSB1bmV4cGVjdGVkbHksIGFmZmVjdGluZyByZXNwb25zZSBjbGFyaXR5LlxuMi4gKipSZWN1cnNpdmUgUmVhc29uaW5nIExvb3BzKio6IFRoZSBtb2RlbCBtYXkgZW50ZXIgY2lyY3VsYXIgcmVhc29uaW5nIHBhdHRlcm5zLCBsZWFkaW5nIHRvIGxlbmd0aHkgcmVzcG9uc2VzIHdpdGhvdXQgYSBjb25jbHVzaXZlIGFuc3dlci5cbjMuICoqU2FmZXR5IGFuZCBFdGhpY2FsIENvbnNpZGVyYXRpb25zKio6IFRoZSBtb2RlbCByZXF1aXJlcyBlbmhhbmNlZCBzYWZldHkgbWVhc3VyZXMgdG8gZW5zdXJlIHJlbGlhYmxlIGFuZCBzZWN1cmUgcGVyZm9ybWFuY2UsIGFuZCB1c2VycyBzaG91bGQgZXhlcmNpc2UgY2F1dGlvbiB3aGVuIGRlcGxveWluZyBpdC5cbjQuICoqUGVyZm9ybWFuY2UgYW5kIEJlbmNobWFyayBMaW1pdGF0aW9ucyoqOiBUaGUgbW9kZWwgZXhjZWxzIGluIG1hdGggYW5kIGNvZGluZyBidXQgaGFzIHJvb20gZm9yIGltcHJvdmVtZW50IGluIG90aGVyIGFyZWFzLCBzdWNoIGFzIGNvbW1vbiBzZW5zZSByZWFzb25pbmcgYW5kIG51YW5jZWQgbGFuZ3VhZ2UgdW5kZXJzdGFuZGluZy5cblxuIiwiY29udGV4dF9sZW5ndGgiOjE2Mzg0LCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiUXdlbiIsImluc3RydWN0X3R5cGUiOiJkZWVwc2Vlay1yMSJ9LCJwcmljaW5nIjp7InByb21wdCI6IjAiLCJjb21wbGV0aW9uIjoiMCIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6MTYzODQsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6bnVsbCwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6InF3ZW4vcXdxLTMyYi1wcmV2aWV3IiwibmFtZSI6IlF3ZW46IFF3USAzMkIgUHJldmlldyIsImNyZWF0ZWQiOjE3MzI3NTQ1NDEsImRlc2NyaXB0aW9uIjoiUXdRLTMyQi1QcmV2aWV3IGlzIGFuIGV4cGVyaW1lbnRhbCByZXNlYXJjaCBtb2RlbCBmb2N1c2VkIG9uIEFJIHJlYXNvbmluZyBjYXBhYmlsaXRpZXMgZGV2ZWxvcGVkIGJ5IHRoZSBRd2VuIFRlYW0uIEFzIGEgcHJldmlldyByZWxlYXNlLCBpdCBkZW1vbnN0cmF0ZXMgcHJvbWlzaW5nIGFuYWx5dGljYWwgYWJpbGl0aWVzIHdoaWxlIGhhdmluZyBzZXZlcmFsIGltcG9ydGFudCBsaW1pdGF0aW9uczpcblxuMS4gKipMYW5ndWFnZSBNaXhpbmcgYW5kIENvZGUtU3dpdGNoaW5nKio6IFRoZSBtb2RlbCBtYXkgbWl4IGxhbmd1YWdlcyBvciBzd2l0Y2ggYmV0d2VlbiB0aGVtIHVuZXhwZWN0ZWRseSwgYWZmZWN0aW5nIHJlc3BvbnNlIGNsYXJpdHkuXG4yLiAqKlJlY3Vyc2l2ZSBSZWFzb25pbmcgTG9vcHMqKjogVGhlIG1vZGVsIG1heSBlbnRlciBjaXJjdWxhciByZWFzb25pbmcgcGF0dGVybnMsIGxlYWRpbmcgdG8gbGVuZ3RoeSByZXNwb25zZXMgd2l0aG91dCBhIGNvbmNsdXNpdmUgYW5zd2VyLlxuMy4gKipTYWZldHkgYW5kIEV0aGljYWwgQ29uc2lkZXJhdGlvbnMqKjogVGhlIG1vZGVsIHJlcXVpcmVzIGVuaGFuY2VkIHNhZmV0eSBtZWFzdXJlcyB0byBlbnN1cmUgcmVsaWFibGUgYW5kIHNlY3VyZSBwZXJmb3JtYW5jZSwgYW5kIHVzZXJzIHNob3VsZCBleGVyY2lzZSBjYXV0aW9uIHdoZW4gZGVwbG95aW5nIGl0LlxuNC4gKipQZXJmb3JtYW5jZSBhbmQgQmVuY2htYXJrIExpbWl0YXRpb25zKio6IFRoZSBtb2RlbCBleGNlbHMgaW4gbWF0aCBhbmQgY29kaW5nIGJ1dCBoYXMgcm9vbSBmb3IgaW1wcm92ZW1lbnQgaW4gb3RoZXIgYXJlYXMsIHN1Y2ggYXMgY29tbW9uIHNlbnNlIHJlYXNvbmluZyBhbmQgbnVhbmNlZCBsYW5ndWFnZSB1bmRlcnN0YW5kaW5nLlxuXG4iLCJjb250ZXh0X2xlbmd0aCI6MzI3NjgsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJRd2VuIiwiaW5zdHJ1Y3RfdHlwZSI6ImRlZXBzZWVrLXIxIn0sInByaWNpbmciOnsicHJvbXB0IjoiMC4wMDAwMDAyIiwiY29tcGxldGlvbiI6IjAuMDAwMDAwMiIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6MzI3NjgsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6bnVsbCwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6Imdvb2dsZS9sZWFybmxtLTEuNS1wcm8tZXhwZXJpbWVudGFsOmZyZWUiLCJuYW1lIjoiR29vZ2xlOiBMZWFybkxNIDEuNSBQcm8gRXhwZXJpbWVudGFsIChmcmVlKSIsImNyZWF0ZWQiOjE3MzIyMTY1NTEsImRlc2NyaXB0aW9uIjoiQW4gZXhwZXJpbWVudGFsIHZlcnNpb24gb2YgW0dlbWluaSAxLjUgUHJvXSgvZ29vZ2xlL2dlbWluaS1wcm8tMS41KSBmcm9tIEdvb2dsZS4iLCJjb250ZXh0X2xlbmd0aCI6NDA5NjAsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQraW1hZ2UtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiLCJpbWFnZSJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6IkdlbWluaSIsImluc3RydWN0X3R5cGUiOm51bGx9LCJwcmljaW5nIjp7InByb21wdCI6IjAiLCJjb21wbGV0aW9uIjoiMCIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6NDA5NjAsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6ODE5MiwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6ImV2YS11bml0LTAxL2V2YS1xd2VuLTIuNS03MmIiLCJuYW1lIjoiRVZBIFF3ZW4yLjUgNzJCIiwiY3JlYXRlZCI6MTczMjIxMDYwNiwiZGVzY3JpcHRpb24iOiJFVkEgUXdlbjIuNSA3MkIgaXMgYSByb2xlcGxheSBhbmQgc3Rvcnl3cml0aW5nIHNwZWNpYWxpc3QgbW9kZWwuIEl0J3MgYSBmdWxsLXBhcmFtZXRlciBmaW5ldHVuZSBvZiBRd2VuMi41LTcyQiBvbiBtaXh0dXJlIG9mIHN5bnRoZXRpYyBhbmQgbmF0dXJhbCBkYXRhLlxuXG5JdCB1c2VzIENlbGVzdGUgNzBCIDAuMSBkYXRhIG1peHR1cmUsIGdyZWF0bHkgZXhwYW5kaW5nIGl0IHRvIGltcHJvdmUgdmVyc2F0aWxpdHksIGNyZWF0aXZpdHkgYW5kIFwiZmxhdm9yXCIgb2YgdGhlIHJlc3VsdGluZyBtb2RlbC4iLCJjb250ZXh0X2xlbmd0aCI6MTMxMDcyLCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiUXdlbiIsImluc3RydWN0X3R5cGUiOiJjaGF0bWwifSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMDkiLCJjb21wbGV0aW9uIjoiMC4wMDAwMDEyIiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoxMzEwNzIsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6MTMxMDcyLCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoib3BlbmFpL2dwdC00by0yMDI0LTExLTIwIiwibmFtZSI6Ik9wZW5BSTogR1BULTRvICgyMDI0LTExLTIwKSIsImNyZWF0ZWQiOjE3MzIxMjc1OTQsImRlc2NyaXB0aW9uIjoiVGhlIDIwMjQtMTEtMjAgdmVyc2lvbiBvZiBHUFQtNG8gb2ZmZXJzIGEgbGV2ZWxlZC11cCBjcmVhdGl2ZSB3cml0aW5nIGFiaWxpdHkgd2l0aCBtb3JlIG5hdHVyYWwsIGVuZ2FnaW5nLCBhbmQgdGFpbG9yZWQgd3JpdGluZyB0byBpbXByb3ZlIHJlbGV2YW5jZSAmIHJlYWRhYmlsaXR5LiBJdOKAmXMgYWxzbyBiZXR0ZXIgYXQgd29ya2luZyB3aXRoIHVwbG9hZGVkIGZpbGVzLCBwcm92aWRpbmcgZGVlcGVyIGluc2lnaHRzICYgbW9yZSB0aG9yb3VnaCByZXNwb25zZXMuXG5cbkdQVC00byAoXCJvXCIgZm9yIFwib21uaVwiKSBpcyBPcGVuQUkncyBsYXRlc3QgQUkgbW9kZWwsIHN1cHBvcnRpbmcgYm90aCB0ZXh0IGFuZCBpbWFnZSBpbnB1dHMgd2l0aCB0ZXh0IG91dHB1dHMuIEl0IG1haW50YWlucyB0aGUgaW50ZWxsaWdlbmNlIGxldmVsIG9mIFtHUFQtNCBUdXJib10oL21vZGVscy9vcGVuYWkvZ3B0LTQtdHVyYm8pIHdoaWxlIGJlaW5nIHR3aWNlIGFzIGZhc3QgYW5kIDUwJSBtb3JlIGNvc3QtZWZmZWN0aXZlLiBHUFQtNG8gYWxzbyBvZmZlcnMgaW1wcm92ZWQgcGVyZm9ybWFuY2UgaW4gcHJvY2Vzc2luZyBub24tRW5nbGlzaCBsYW5ndWFnZXMgYW5kIGVuaGFuY2VkIHZpc3VhbCBjYXBhYmlsaXRpZXMuIiwiY29udGV4dF9sZW5ndGgiOjEyODAwMCwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dCtpbWFnZS0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCIsImltYWdlIl0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiR1BUIiwiaW5zdHJ1Y3RfdHlwZSI6bnVsbH0sInByaWNpbmciOnsicHJvbXB0IjoiMC4wMDAwMDI1IiwiY29tcGxldGlvbiI6IjAuMDAwMDEiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMC4wMDM2MTMiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAiLCJpbnB1dF9jYWNoZV9yZWFkIjoiMC4wMDAwMDEyNSJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjEyODAwMCwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjoxNjM4NCwiaXNfbW9kZXJhdGVkIjp0cnVlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoibWlzdHJhbGFpL21pc3RyYWwtbGFyZ2UtMjQxMSIsIm5hbWUiOiJNaXN0cmFsIExhcmdlIDI0MTEiLCJjcmVhdGVkIjoxNzMxOTc4Njg1LCJkZXNjcmlwdGlvbiI6Ik1pc3RyYWwgTGFyZ2UgMiAyNDExIGlzIGFuIHVwZGF0ZSBvZiBbTWlzdHJhbCBMYXJnZSAyXSgvbWlzdHJhbGFpL21pc3RyYWwtbGFyZ2UpIHJlbGVhc2VkIHRvZ2V0aGVyIHdpdGggW1BpeHRyYWwgTGFyZ2UgMjQxMV0oL21pc3RyYWxhaS9waXh0cmFsLWxhcmdlLTI0MTEpXG5cbkl0IHByb3ZpZGVzIGEgc2lnbmlmaWNhbnQgdXBncmFkZSBvbiB0aGUgcHJldmlvdXMgW01pc3RyYWwgTGFyZ2UgMjQuMDddKC9taXN0cmFsYWkvbWlzdHJhbC1sYXJnZS0yNDA3KSwgd2l0aCBub3RhYmxlIGltcHJvdmVtZW50cyBpbiBsb25nIGNvbnRleHQgdW5kZXJzdGFuZGluZywgYSBuZXcgc3lzdGVtIHByb21wdCwgYW5kIG1vcmUgYWNjdXJhdGUgZnVuY3Rpb24gY2FsbGluZy4iLCJjb250ZXh0X2xlbmd0aCI6MTMxMDcyLCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiTWlzdHJhbCIsImluc3RydWN0X3R5cGUiOm51bGx9LCJwcmljaW5nIjp7InByb21wdCI6IjAuMDAwMDAyIiwiY29tcGxldGlvbiI6IjAuMDAwMDA2IiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoxMzEwNzIsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6bnVsbCwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6Im1pc3RyYWxhaS9taXN0cmFsLWxhcmdlLTI0MDciLCJuYW1lIjoiTWlzdHJhbCBMYXJnZSAyNDA3IiwiY3JlYXRlZCI6MTczMTk3ODQxNSwiZGVzY3JpcHRpb24iOiJUaGlzIGlzIE1pc3RyYWwgQUkncyBmbGFnc2hpcCBtb2RlbCwgTWlzdHJhbCBMYXJnZSAyICh2ZXJzaW9uIG1pc3RyYWwtbGFyZ2UtMjQwNykuIEl0J3MgYSBwcm9wcmlldGFyeSB3ZWlnaHRzLWF2YWlsYWJsZSBtb2RlbCBhbmQgZXhjZWxzIGF0IHJlYXNvbmluZywgY29kZSwgSlNPTiwgY2hhdCwgYW5kIG1vcmUuIFJlYWQgdGhlIGxhdW5jaCBhbm5vdW5jZW1lbnQgW2hlcmVdKGh0dHBzOi8vbWlzdHJhbC5haS9uZXdzL21pc3RyYWwtbGFyZ2UtMjQwNy8pLlxuXG5JdCBzdXBwb3J0cyBkb3plbnMgb2YgbGFuZ3VhZ2VzIGluY2x1ZGluZyBGcmVuY2gsIEdlcm1hbiwgU3BhbmlzaCwgSXRhbGlhbiwgUG9ydHVndWVzZSwgQXJhYmljLCBIaW5kaSwgUnVzc2lhbiwgQ2hpbmVzZSwgSmFwYW5lc2UsIGFuZCBLb3JlYW4sIGFsb25nIHdpdGggODArIGNvZGluZyBsYW5ndWFnZXMgaW5jbHVkaW5nIFB5dGhvbiwgSmF2YSwgQywgQysrLCBKYXZhU2NyaXB0LCBhbmQgQmFzaC4gSXRzIGxvbmcgY29udGV4dCB3aW5kb3cgYWxsb3dzIHByZWNpc2UgaW5mb3JtYXRpb24gcmVjYWxsIGZyb20gbGFyZ2UgZG9jdW1lbnRzLlxuIiwiY29udGV4dF9sZW5ndGgiOjEzMTA3MiwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dC0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6Ik1pc3RyYWwiLCJpbnN0cnVjdF90eXBlIjpudWxsfSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMiIsImNvbXBsZXRpb24iOiIwLjAwMDAwNiIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6MTMxMDcyLCJtYXhfY29tcGxldGlvbl90b2tlbnMiOm51bGwsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJtaXN0cmFsYWkvcGl4dHJhbC1sYXJnZS0yNDExIiwibmFtZSI6Ik1pc3RyYWw6IFBpeHRyYWwgTGFyZ2UgMjQxMSIsImNyZWF0ZWQiOjE3MzE5NzczODgsImRlc2NyaXB0aW9uIjoiUGl4dHJhbCBMYXJnZSBpcyBhIDEyNEIgcGFyYW1ldGVyLCBvcGVuLXdlaWdodCwgbXVsdGltb2RhbCBtb2RlbCBidWlsdCBvbiB0b3Agb2YgW01pc3RyYWwgTGFyZ2UgMl0oL21pc3RyYWxhaS9taXN0cmFsLWxhcmdlLTI0MTEpLiBUaGUgbW9kZWwgaXMgYWJsZSB0byB1bmRlcnN0YW5kIGRvY3VtZW50cywgY2hhcnRzIGFuZCBuYXR1cmFsIGltYWdlcy5cblxuVGhlIG1vZGVsIGlzIGF2YWlsYWJsZSB1bmRlciB0aGUgTWlzdHJhbCBSZXNlYXJjaCBMaWNlbnNlIChNUkwpIGZvciByZXNlYXJjaCBhbmQgZWR1Y2F0aW9uYWwgdXNlLCBhbmQgdGhlIE1pc3RyYWwgQ29tbWVyY2lhbCBMaWNlbnNlIGZvciBleHBlcmltZW50YXRpb24sIHRlc3RpbmcsIGFuZCBwcm9kdWN0aW9uIGZvciBjb21tZXJjaWFsIHB1cnBvc2VzLlxuXG4iLCJjb250ZXh0X2xlbmd0aCI6MTMxMDcyLCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0K2ltYWdlLT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0IiwiaW1hZ2UiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJNaXN0cmFsIiwiaW5zdHJ1Y3RfdHlwZSI6bnVsbH0sInByaWNpbmciOnsicHJvbXB0IjoiMC4wMDAwMDIiLCJjb21wbGV0aW9uIjoiMC4wMDAwMDYiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMC4wMDI4ODgiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoxMzEwNzIsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6bnVsbCwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6IngtYWkvZ3Jvay12aXNpb24tYmV0YSIsIm5hbWUiOiJ4QUk6IEdyb2sgVmlzaW9uIEJldGEiLCJjcmVhdGVkIjoxNzMxOTc2NjI0LCJkZXNjcmlwdGlvbiI6Ikdyb2sgVmlzaW9uIEJldGEgaXMgeEFJJ3MgZXhwZXJpbWVudGFsIGxhbmd1YWdlIG1vZGVsIHdpdGggdmlzaW9uIGNhcGFiaWxpdHkuXG5cbiIsImNvbnRleHRfbGVuZ3RoIjo4MTkyLCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0K2ltYWdlLT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0IiwiaW1hZ2UiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJHcm9rIiwiaW5zdHJ1Y3RfdHlwZSI6bnVsbH0sInByaWNpbmciOnsicHJvbXB0IjoiMC4wMDAwMDUiLCJjb21wbGV0aW9uIjoiMC4wMDAwMTUiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMC4wMDkiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjo4MTkyLCJtYXhfY29tcGxldGlvbl90b2tlbnMiOm51bGwsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJpbmZlcm1hdGljL21uLWluZmVyb3ItMTJiIiwibmFtZSI6IkluZmVybWF0aWM6IE1pc3RyYWwgTmVtbyBJbmZlcm9yIDEyQiIsImNyZWF0ZWQiOjE3MzE0NjQ0MjgsImRlc2NyaXB0aW9uIjoiSW5mZXJvciAxMkIgaXMgYSBtZXJnZSBvZiB0b3Agcm9sZXBsYXkgbW9kZWxzLCBleHBlcnQgb24gaW1tZXJzaXZlIG5hcnJhdGl2ZXMgYW5kIHN0b3J5dGVsbGluZy5cblxuVGhpcyBtb2RlbCB3YXMgbWVyZ2VkIHVzaW5nIHRoZSBbTW9kZWwgU3RvY2tdKGh0dHBzOi8vYXJ4aXYub3JnL2Ficy8yNDAzLjE5NTIyKSBtZXJnZSBtZXRob2QgdXNpbmcgW2FudGhyYWNpdGUtb3JnL21hZ251bS12NC0xMmJdKGh0dHBzOi8vb3BlbnJvdXRlci5haS9hbnRocmFjaXRlLW9yZy9tYWdudW0tdjQtNzJiKSBhcyBhIGJhc2UuXG4iLCJjb250ZXh0X2xlbmd0aCI6MTYzODQsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJNaXN0cmFsIiwiaW5zdHJ1Y3RfdHlwZSI6Im1pc3RyYWwifSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMDgiLCJjb21wbGV0aW9uIjoiMC4wMDAwMDEyIiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoxNjM4NCwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjo0MDk2LCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoicXdlbi9xd2VuLTIuNS1jb2Rlci0zMmItaW5zdHJ1Y3Q6ZnJlZSIsIm5hbWUiOiJRd2VuMi41IENvZGVyIDMyQiBJbnN0cnVjdCAoZnJlZSkiLCJjcmVhdGVkIjoxNzMxMzY4NDAwLCJkZXNjcmlwdGlvbiI6IlF3ZW4yLjUtQ29kZXIgaXMgdGhlIGxhdGVzdCBzZXJpZXMgb2YgQ29kZS1TcGVjaWZpYyBRd2VuIGxhcmdlIGxhbmd1YWdlIG1vZGVscyAoZm9ybWVybHkga25vd24gYXMgQ29kZVF3ZW4pLiBRd2VuMi41LUNvZGVyIGJyaW5ncyB0aGUgZm9sbG93aW5nIGltcHJvdmVtZW50cyB1cG9uIENvZGVRd2VuMS41OlxuXG4tIFNpZ25pZmljYW50bHkgaW1wcm92ZW1lbnRzIGluICoqY29kZSBnZW5lcmF0aW9uKiosICoqY29kZSByZWFzb25pbmcqKiBhbmQgKipjb2RlIGZpeGluZyoqLiBcbi0gQSBtb3JlIGNvbXByZWhlbnNpdmUgZm91bmRhdGlvbiBmb3IgcmVhbC13b3JsZCBhcHBsaWNhdGlvbnMgc3VjaCBhcyAqKkNvZGUgQWdlbnRzKiouIE5vdCBvbmx5IGVuaGFuY2luZyBjb2RpbmcgY2FwYWJpbGl0aWVzIGJ1dCBhbHNvIG1haW50YWluaW5nIGl0cyBzdHJlbmd0aHMgaW4gbWF0aGVtYXRpY3MgYW5kIGdlbmVyYWwgY29tcGV0ZW5jaWVzLlxuXG5UbyByZWFkIG1vcmUgYWJvdXQgaXRzIGV2YWx1YXRpb24gcmVzdWx0cywgY2hlY2sgb3V0IFtRd2VuIDIuNSBDb2RlcidzIGJsb2ddKGh0dHBzOi8vcXdlbmxtLmdpdGh1Yi5pby9ibG9nL3F3ZW4yLjUtY29kZXItZmFtaWx5LykuIiwiY29udGV4dF9sZW5ndGgiOjMyNzY4LCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiUXdlbiIsImluc3RydWN0X3R5cGUiOiJjaGF0bWwifSwicHJpY2luZyI6eyJwcm9tcHQiOiIwIiwiY29tcGxldGlvbiI6IjAiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjMyNzY4LCJtYXhfY29tcGxldGlvbl90b2tlbnMiOm51bGwsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJxd2VuL3F3ZW4tMi41LWNvZGVyLTMyYi1pbnN0cnVjdCIsIm5hbWUiOiJRd2VuMi41IENvZGVyIDMyQiBJbnN0cnVjdCIsImNyZWF0ZWQiOjE3MzEzNjg0MDAsImRlc2NyaXB0aW9uIjoiUXdlbjIuNS1Db2RlciBpcyB0aGUgbGF0ZXN0IHNlcmllcyBvZiBDb2RlLVNwZWNpZmljIFF3ZW4gbGFyZ2UgbGFuZ3VhZ2UgbW9kZWxzIChmb3JtZXJseSBrbm93biBhcyBDb2RlUXdlbikuIFF3ZW4yLjUtQ29kZXIgYnJpbmdzIHRoZSBmb2xsb3dpbmcgaW1wcm92ZW1lbnRzIHVwb24gQ29kZVF3ZW4xLjU6XG5cbi0gU2lnbmlmaWNhbnRseSBpbXByb3ZlbWVudHMgaW4gKipjb2RlIGdlbmVyYXRpb24qKiwgKipjb2RlIHJlYXNvbmluZyoqIGFuZCAqKmNvZGUgZml4aW5nKiouIFxuLSBBIG1vcmUgY29tcHJlaGVuc2l2ZSBmb3VuZGF0aW9uIGZvciByZWFsLXdvcmxkIGFwcGxpY2F0aW9ucyBzdWNoIGFzICoqQ29kZSBBZ2VudHMqKi4gTm90IG9ubHkgZW5oYW5jaW5nIGNvZGluZyBjYXBhYmlsaXRpZXMgYnV0IGFsc28gbWFpbnRhaW5pbmcgaXRzIHN0cmVuZ3RocyBpbiBtYXRoZW1hdGljcyBhbmQgZ2VuZXJhbCBjb21wZXRlbmNpZXMuXG5cblRvIHJlYWQgbW9yZSBhYm91dCBpdHMgZXZhbHVhdGlvbiByZXN1bHRzLCBjaGVjayBvdXQgW1F3ZW4gMi41IENvZGVyJ3MgYmxvZ10oaHR0cHM6Ly9xd2VubG0uZ2l0aHViLmlvL2Jsb2cvcXdlbjIuNS1jb2Rlci1mYW1pbHkvKS4iLCJjb250ZXh0X2xlbmd0aCI6MzI3NjgsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJRd2VuIiwiaW5zdHJ1Y3RfdHlwZSI6ImNoYXRtbCJ9LCJwcmljaW5nIjp7InByb21wdCI6IjAuMDAwMDAwMDciLCJjb21wbGV0aW9uIjoiMC4wMDAwMDAxNSIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6MzI3NjgsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6MTYzODQsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJyYWlmbGUvc29yY2VyZXJsbS04eDIyYiIsIm5hbWUiOiJTb3JjZXJlckxNIDh4MjJCIiwiY3JlYXRlZCI6MTczMTEwNTA4MywiZGVzY3JpcHRpb24iOiJTb3JjZXJlckxNIGlzIGFuIGFkdmFuY2VkIFJQIGFuZCBzdG9yeXRlbGxpbmcgbW9kZWwsIGJ1aWx0IGFzIGEgTG93LXJhbmsgMTYtYml0IExvUkEgZmluZS10dW5lZCBvbiBbV2l6YXJkTE0tMiA4eDIyQl0oL21pY3Jvc29mdC93aXphcmRsbS0yLTh4MjJiKS5cblxuLSBBZHZhbmNlZCByZWFzb25pbmcgYW5kIGVtb3Rpb25hbCBpbnRlbGxpZ2VuY2UgZm9yIGVuZ2FnaW5nIGFuZCBpbW1lcnNpdmUgaW50ZXJhY3Rpb25zXG4tIFZpdmlkIHdyaXRpbmcgY2FwYWJpbGl0aWVzIGVucmljaGVkIHdpdGggc3BhdGlhbCBhbmQgY29udGV4dHVhbCBhd2FyZW5lc3Ncbi0gRW5oYW5jZWQgbmFycmF0aXZlIGRlcHRoLCBwcm9tb3RpbmcgY3JlYXRpdmUgYW5kIGR5bmFtaWMgc3Rvcnl0ZWxsaW5nIiwiY29udGV4dF9sZW5ndGgiOjE2MDAwLCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiTWlzdHJhbCIsImluc3RydWN0X3R5cGUiOiJ2aWN1bmEifSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwNDUiLCJjb21wbGV0aW9uIjoiMC4wMDAwMDQ1IiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoxNjAwMCwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjpudWxsLCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoiZXZhLXVuaXQtMDEvZXZhLXF3ZW4tMi41LTMyYiIsIm5hbWUiOiJFVkEgUXdlbjIuNSAzMkIiLCJjcmVhdGVkIjoxNzMxMTA0ODQ3LCJkZXNjcmlwdGlvbiI6IkVWQSBRd2VuMi41IDMyQiBpcyBhIHJvbGVwbGF5aW5nL3N0b3J5d3JpdGluZyBzcGVjaWFsaXN0IG1vZGVsLiBJdCdzIGEgZnVsbC1wYXJhbWV0ZXIgZmluZXR1bmUgb2YgUXdlbjIuNS0zMkIgb24gbWl4dHVyZSBvZiBzeW50aGV0aWMgYW5kIG5hdHVyYWwgZGF0YS5cblxuSXQgdXNlcyBDZWxlc3RlIDcwQiAwLjEgZGF0YSBtaXh0dXJlLCBncmVhdGx5IGV4cGFuZGluZyBpdCB0byBpbXByb3ZlIHZlcnNhdGlsaXR5LCBjcmVhdGl2aXR5IGFuZCBcImZsYXZvclwiIG9mIHRoZSByZXN1bHRpbmcgbW9kZWwuIiwiY29udGV4dF9sZW5ndGgiOjE2Mzg0LCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiUXdlbiIsImluc3RydWN0X3R5cGUiOiJjaGF0bWwifSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMjYiLCJjb21wbGV0aW9uIjoiMC4wMDAwMDM0IiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoxNjM4NCwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjo0MDk2LCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoidGhlZHJ1bW1lci91bnNsb3BuZW1vLTEyYiIsIm5hbWUiOiJVbnNsb3BuZW1vIDEyQiIsImNyZWF0ZWQiOjE3MzExMDM0NDgsImRlc2NyaXB0aW9uIjoiVW5zbG9wTmVtbyB2NC4xIGlzIHRoZSBsYXRlc3QgYWRkaXRpb24gZnJvbSB0aGUgY3JlYXRvciBvZiBSb2NpbmFudGUsIGRlc2lnbmVkIGZvciBhZHZlbnR1cmUgd3JpdGluZyBhbmQgcm9sZS1wbGF5IHNjZW5hcmlvcy4iLCJjb250ZXh0X2xlbmd0aCI6MzIwMDAsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJNaXN0cmFsIiwiaW5zdHJ1Y3RfdHlwZSI6Im1pc3RyYWwifSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMDUiLCJjb21wbGV0aW9uIjoiMC4wMDAwMDA1IiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjozMjAwMCwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjpudWxsLCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoiYW50aHJvcGljL2NsYXVkZS0zLjUtaGFpa3U6YmV0YSIsIm5hbWUiOiJBbnRocm9waWM6IENsYXVkZSAzLjUgSGFpa3UgKHNlbGYtbW9kZXJhdGVkKSIsImNyZWF0ZWQiOjE3MzA2Nzg0MDAsImRlc2NyaXB0aW9uIjoiQ2xhdWRlIDMuNSBIYWlrdSBmZWF0dXJlcyBvZmZlcnMgZW5oYW5jZWQgY2FwYWJpbGl0aWVzIGluIHNwZWVkLCBjb2RpbmcgYWNjdXJhY3ksIGFuZCB0b29sIHVzZS4gRW5naW5lZXJlZCB0byBleGNlbCBpbiByZWFsLXRpbWUgYXBwbGljYXRpb25zLCBpdCBkZWxpdmVycyBxdWljayByZXNwb25zZSB0aW1lcyB0aGF0IGFyZSBlc3NlbnRpYWwgZm9yIGR5bmFtaWMgdGFza3Mgc3VjaCBhcyBjaGF0IGludGVyYWN0aW9ucyBhbmQgaW1tZWRpYXRlIGNvZGluZyBzdWdnZXN0aW9ucy5cblxuVGhpcyBtYWtlcyBpdCBoaWdobHkgc3VpdGFibGUgZm9yIGVudmlyb25tZW50cyB0aGF0IGRlbWFuZCBib3RoIHNwZWVkIGFuZCBwcmVjaXNpb24sIHN1Y2ggYXMgc29mdHdhcmUgZGV2ZWxvcG1lbnQsIGN1c3RvbWVyIHNlcnZpY2UgYm90cywgYW5kIGRhdGEgbWFuYWdlbWVudCBzeXN0ZW1zLlxuXG5UaGlzIG1vZGVsIGlzIGN1cnJlbnRseSBwb2ludGluZyB0byBbQ2xhdWRlIDMuNSBIYWlrdSAoMjAyNC0xMC0yMildKC9hbnRocm9waWMvY2xhdWRlLTMtNS1oYWlrdS0yMDI0MTAyMikuIiwiY29udGV4dF9sZW5ndGgiOjIwMDAwMCwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dCtpbWFnZS0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCIsImltYWdlIl0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiQ2xhdWRlIiwiaW5zdHJ1Y3RfdHlwZSI6bnVsbH0sInByaWNpbmciOnsicHJvbXB0IjoiMC4wMDAwMDA4IiwiY29tcGxldGlvbiI6IjAuMDAwMDA0IiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAiLCJpbnB1dF9jYWNoZV9yZWFkIjoiMC4wMDAwMDAwOCIsImlucHV0X2NhY2hlX3dyaXRlIjoiMC4wMDAwMDEifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoyMDAwMDAsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6ODE5MiwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6ImFudGhyb3BpYy9jbGF1ZGUtMy41LWhhaWt1IiwibmFtZSI6IkFudGhyb3BpYzogQ2xhdWRlIDMuNSBIYWlrdSIsImNyZWF0ZWQiOjE3MzA2Nzg0MDAsImRlc2NyaXB0aW9uIjoiQ2xhdWRlIDMuNSBIYWlrdSBmZWF0dXJlcyBvZmZlcnMgZW5oYW5jZWQgY2FwYWJpbGl0aWVzIGluIHNwZWVkLCBjb2RpbmcgYWNjdXJhY3ksIGFuZCB0b29sIHVzZS4gRW5naW5lZXJlZCB0byBleGNlbCBpbiByZWFsLXRpbWUgYXBwbGljYXRpb25zLCBpdCBkZWxpdmVycyBxdWljayByZXNwb25zZSB0aW1lcyB0aGF0IGFyZSBlc3NlbnRpYWwgZm9yIGR5bmFtaWMgdGFza3Mgc3VjaCBhcyBjaGF0IGludGVyYWN0aW9ucyBhbmQgaW1tZWRpYXRlIGNvZGluZyBzdWdnZXN0aW9ucy5cblxuVGhpcyBtYWtlcyBpdCBoaWdobHkgc3VpdGFibGUgZm9yIGVudmlyb25tZW50cyB0aGF0IGRlbWFuZCBib3RoIHNwZWVkIGFuZCBwcmVjaXNpb24sIHN1Y2ggYXMgc29mdHdhcmUgZGV2ZWxvcG1lbnQsIGN1c3RvbWVyIHNlcnZpY2UgYm90cywgYW5kIGRhdGEgbWFuYWdlbWVudCBzeXN0ZW1zLlxuXG5UaGlzIG1vZGVsIGlzIGN1cnJlbnRseSBwb2ludGluZyB0byBbQ2xhdWRlIDMuNSBIYWlrdSAoMjAyNC0xMC0yMildKC9hbnRocm9waWMvY2xhdWRlLTMtNS1oYWlrdS0yMDI0MTAyMikuIiwiY29udGV4dF9sZW5ndGgiOjIwMDAwMCwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dCtpbWFnZS0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCIsImltYWdlIl0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiQ2xhdWRlIiwiaW5zdHJ1Y3RfdHlwZSI6bnVsbH0sInByaWNpbmciOnsicHJvbXB0IjoiMC4wMDAwMDA4IiwiY29tcGxldGlvbiI6IjAuMDAwMDA0IiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAiLCJpbnB1dF9jYWNoZV9yZWFkIjoiMC4wMDAwMDAwOCIsImlucHV0X2NhY2hlX3dyaXRlIjoiMC4wMDAwMDEifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoyMDAwMDAsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6ODE5MiwiaXNfbW9kZXJhdGVkIjp0cnVlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoiYW50aHJvcGljL2NsYXVkZS0zLjUtaGFpa3UtMjAyNDEwMjI6YmV0YSIsIm5hbWUiOiJBbnRocm9waWM6IENsYXVkZSAzLjUgSGFpa3UgKDIwMjQtMTAtMjIpIChzZWxmLW1vZGVyYXRlZCkiLCJjcmVhdGVkIjoxNzMwNjc4NDAwLCJkZXNjcmlwdGlvbiI6IkNsYXVkZSAzLjUgSGFpa3UgZmVhdHVyZXMgZW5oYW5jZW1lbnRzIGFjcm9zcyBhbGwgc2tpbGwgc2V0cyBpbmNsdWRpbmcgY29kaW5nLCB0b29sIHVzZSwgYW5kIHJlYXNvbmluZy4gQXMgdGhlIGZhc3Rlc3QgbW9kZWwgaW4gdGhlIEFudGhyb3BpYyBsaW5ldXAsIGl0IG9mZmVycyByYXBpZCByZXNwb25zZSB0aW1lcyBzdWl0YWJsZSBmb3IgYXBwbGljYXRpb25zIHRoYXQgcmVxdWlyZSBoaWdoIGludGVyYWN0aXZpdHkgYW5kIGxvdyBsYXRlbmN5LCBzdWNoIGFzIHVzZXItZmFjaW5nIGNoYXRib3RzIGFuZCBvbi10aGUtZmx5IGNvZGUgY29tcGxldGlvbnMuIEl0IGFsc28gZXhjZWxzIGluIHNwZWNpYWxpemVkIHRhc2tzIGxpa2UgZGF0YSBleHRyYWN0aW9uIGFuZCByZWFsLXRpbWUgY29udGVudCBtb2RlcmF0aW9uLCBtYWtpbmcgaXQgYSB2ZXJzYXRpbGUgdG9vbCBmb3IgYSBicm9hZCByYW5nZSBvZiBpbmR1c3RyaWVzLlxuXG5JdCBkb2VzIG5vdCBzdXBwb3J0IGltYWdlIGlucHV0cy5cblxuU2VlIHRoZSBsYXVuY2ggYW5ub3VuY2VtZW50IGFuZCBiZW5jaG1hcmsgcmVzdWx0cyBbaGVyZV0oaHR0cHM6Ly93d3cuYW50aHJvcGljLmNvbS9uZXdzLzMtNS1tb2RlbHMtYW5kLWNvbXB1dGVyLXVzZSkiLCJjb250ZXh0X2xlbmd0aCI6MjAwMDAwLCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0K2ltYWdlLT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0IiwiaW1hZ2UiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJDbGF1ZGUiLCJpbnN0cnVjdF90eXBlIjpudWxsfSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMDgiLCJjb21wbGV0aW9uIjoiMC4wMDAwMDQiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCIsImlucHV0X2NhY2hlX3JlYWQiOiIwLjAwMDAwMDA4IiwiaW5wdXRfY2FjaGVfd3JpdGUiOiIwLjAwMDAwMSJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjIwMDAwMCwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjo4MTkyLCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoiYW50aHJvcGljL2NsYXVkZS0zLjUtaGFpa3UtMjAyNDEwMjIiLCJuYW1lIjoiQW50aHJvcGljOiBDbGF1ZGUgMy41IEhhaWt1ICgyMDI0LTEwLTIyKSIsImNyZWF0ZWQiOjE3MzA2Nzg0MDAsImRlc2NyaXB0aW9uIjoiQ2xhdWRlIDMuNSBIYWlrdSBmZWF0dXJlcyBlbmhhbmNlbWVudHMgYWNyb3NzIGFsbCBza2lsbCBzZXRzIGluY2x1ZGluZyBjb2RpbmcsIHRvb2wgdXNlLCBhbmQgcmVhc29uaW5nLiBBcyB0aGUgZmFzdGVzdCBtb2RlbCBpbiB0aGUgQW50aHJvcGljIGxpbmV1cCwgaXQgb2ZmZXJzIHJhcGlkIHJlc3BvbnNlIHRpbWVzIHN1aXRhYmxlIGZvciBhcHBsaWNhdGlvbnMgdGhhdCByZXF1aXJlIGhpZ2ggaW50ZXJhY3Rpdml0eSBhbmQgbG93IGxhdGVuY3ksIHN1Y2ggYXMgdXNlci1mYWNpbmcgY2hhdGJvdHMgYW5kIG9uLXRoZS1mbHkgY29kZSBjb21wbGV0aW9ucy4gSXQgYWxzbyBleGNlbHMgaW4gc3BlY2lhbGl6ZWQgdGFza3MgbGlrZSBkYXRhIGV4dHJhY3Rpb24gYW5kIHJlYWwtdGltZSBjb250ZW50IG1vZGVyYXRpb24sIG1ha2luZyBpdCBhIHZlcnNhdGlsZSB0b29sIGZvciBhIGJyb2FkIHJhbmdlIG9mIGluZHVzdHJpZXMuXG5cbkl0IGRvZXMgbm90IHN1cHBvcnQgaW1hZ2UgaW5wdXRzLlxuXG5TZWUgdGhlIGxhdW5jaCBhbm5vdW5jZW1lbnQgYW5kIGJlbmNobWFyayByZXN1bHRzIFtoZXJlXShodHRwczovL3d3dy5hbnRocm9waWMuY29tL25ld3MvMy01LW1vZGVscy1hbmQtY29tcHV0ZXItdXNlKSIsImNvbnRleHRfbGVuZ3RoIjoyMDAwMDAsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQraW1hZ2UtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiLCJpbWFnZSJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6IkNsYXVkZSIsImluc3RydWN0X3R5cGUiOm51bGx9LCJwcmljaW5nIjp7InByb21wdCI6IjAuMDAwMDAwOCIsImNvbXBsZXRpb24iOiIwLjAwMDAwNCIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIiwiaW5wdXRfY2FjaGVfcmVhZCI6IjAuMDAwMDAwMDgiLCJpbnB1dF9jYWNoZV93cml0ZSI6IjAuMDAwMDAxIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6MjAwMDAwLCJtYXhfY29tcGxldGlvbl90b2tlbnMiOjgxOTIsImlzX21vZGVyYXRlZCI6dHJ1ZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6Im5ldmVyc2xlZXAvbGxhbWEtMy4xLWx1bWltYWlkLTcwYiIsIm5hbWUiOiJOZXZlclNsZWVwOiBMdW1pbWFpZCB2MC4yIDcwQiIsImNyZWF0ZWQiOjE3Mjk1NTUyMDAsImRlc2NyaXB0aW9uIjoiTHVtaW1haWQgdjAuMiA3MEIgaXMgYSBmaW5ldHVuZSBvZiBbTGxhbWEgMy4xIDcwQl0oL21ldGEtbGxhbWEvbGxhbWEtMy4xLTcwYi1pbnN0cnVjdCkgd2l0aCBhIFwiSFVHRSBzdGVwIHVwIGRhdGFzZXQgd2lzZVwiIGNvbXBhcmVkIHRvIEx1bWltYWlkIHYwLjEuIFNsb3BweSBjaGF0cyBvdXRwdXQgd2VyZSBwdXJnZWQuXG5cblVzYWdlIG9mIHRoaXMgbW9kZWwgaXMgc3ViamVjdCB0byBbTWV0YSdzIEFjY2VwdGFibGUgVXNlIFBvbGljeV0oaHR0cHM6Ly9sbGFtYS5tZXRhLmNvbS9sbGFtYTMvdXNlLXBvbGljeS8pLiIsImNvbnRleHRfbGVuZ3RoIjoxNjM4NCwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dC0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6IkxsYW1hMyIsImluc3RydWN0X3R5cGUiOiJsbGFtYTMifSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMTUiLCJjb21wbGV0aW9uIjoiMC4wMDAwMDIyNSIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6MTYzODQsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6MjA0OCwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6ImFudGhyYWNpdGUtb3JnL21hZ251bS12NC03MmIiLCJuYW1lIjoiTWFnbnVtIHY0IDcyQiIsImNyZWF0ZWQiOjE3Mjk1NTUyMDAsImRlc2NyaXB0aW9uIjoiVGhpcyBpcyBhIHNlcmllcyBvZiBtb2RlbHMgZGVzaWduZWQgdG8gcmVwbGljYXRlIHRoZSBwcm9zZSBxdWFsaXR5IG9mIHRoZSBDbGF1ZGUgMyBtb2RlbHMsIHNwZWNpZmljYWxseSBTb25uZXQoaHR0cHM6Ly9vcGVucm91dGVyLmFpL2FudGhyb3BpYy9jbGF1ZGUtMy41LXNvbm5ldCkgYW5kIE9wdXMoaHR0cHM6Ly9vcGVucm91dGVyLmFpL2FudGhyb3BpYy9jbGF1ZGUtMy1vcHVzKS5cblxuVGhlIG1vZGVsIGlzIGZpbmUtdHVuZWQgb24gdG9wIG9mIFtRd2VuMi41IDcyQl0oaHR0cHM6Ly9vcGVucm91dGVyLmFpL3F3ZW4vcXdlbi0yLjUtNzJiLWluc3RydWN0KS4iLCJjb250ZXh0X2xlbmd0aCI6MTYzODQsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJRd2VuIiwiaW5zdHJ1Y3RfdHlwZSI6ImNoYXRtbCJ9LCJwcmljaW5nIjp7InByb21wdCI6IjAuMDAwMDAxNSIsImNvbXBsZXRpb24iOiIwLjAwMDAwMjI1IiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoxNjM4NCwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjoxMDI0LCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoiYW50aHJvcGljL2NsYXVkZS0zLjUtc29ubmV0OmJldGEiLCJuYW1lIjoiQW50aHJvcGljOiBDbGF1ZGUgMy41IFNvbm5ldCAoc2VsZi1tb2RlcmF0ZWQpIiwiY3JlYXRlZCI6MTcyOTU1NTIwMCwiZGVzY3JpcHRpb24iOiJOZXcgQ2xhdWRlIDMuNSBTb25uZXQgZGVsaXZlcnMgYmV0dGVyLXRoYW4tT3B1cyBjYXBhYmlsaXRpZXMsIGZhc3Rlci10aGFuLVNvbm5ldCBzcGVlZHMsIGF0IHRoZSBzYW1lIFNvbm5ldCBwcmljZXMuIFNvbm5ldCBpcyBwYXJ0aWN1bGFybHkgZ29vZCBhdDpcblxuLSBDb2Rpbmc6IFNjb3JlcyB+NDklIG9uIFNXRS1CZW5jaCBWZXJpZmllZCwgaGlnaGVyIHRoYW4gdGhlIGxhc3QgYmVzdCBzY29yZSwgYW5kIHdpdGhvdXQgYW55IGZhbmN5IHByb21wdCBzY2FmZm9sZGluZ1xuLSBEYXRhIHNjaWVuY2U6IEF1Z21lbnRzIGh1bWFuIGRhdGEgc2NpZW5jZSBleHBlcnRpc2U7IG5hdmlnYXRlcyB1bnN0cnVjdHVyZWQgZGF0YSB3aGlsZSB1c2luZyBtdWx0aXBsZSB0b29scyBmb3IgaW5zaWdodHNcbi0gVmlzdWFsIHByb2Nlc3Npbmc6IGV4Y2VsbGluZyBhdCBpbnRlcnByZXRpbmcgY2hhcnRzLCBncmFwaHMsIGFuZCBpbWFnZXMsIGFjY3VyYXRlbHkgdHJhbnNjcmliaW5nIHRleHQgdG8gZGVyaXZlIGluc2lnaHRzIGJleW9uZCBqdXN0IHRoZSB0ZXh0IGFsb25lXG4tIEFnZW50aWMgdGFza3M6IGV4Y2VwdGlvbmFsIHRvb2wgdXNlLCBtYWtpbmcgaXQgZ3JlYXQgYXQgYWdlbnRpYyB0YXNrcyAoaS5lLiBjb21wbGV4LCBtdWx0aS1zdGVwIHByb2JsZW0gc29sdmluZyB0YXNrcyB0aGF0IHJlcXVpcmUgZW5nYWdpbmcgd2l0aCBvdGhlciBzeXN0ZW1zKVxuXG4jbXVsdGltb2RhbCIsImNvbnRleHRfbGVuZ3RoIjoyMDAwMDAsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQraW1hZ2UtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiLCJpbWFnZSJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6IkNsYXVkZSIsImluc3RydWN0X3R5cGUiOm51bGx9LCJwcmljaW5nIjp7InByb21wdCI6IjAuMDAwMDAzIiwiY29tcGxldGlvbiI6IjAuMDAwMDE1IiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAuMDA0OCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCIsImlucHV0X2NhY2hlX3JlYWQiOiIwLjAwMDAwMDMiLCJpbnB1dF9jYWNoZV93cml0ZSI6IjAuMDAwMDAzNzUifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoyMDAwMDAsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6ODE5MiwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6ImFudGhyb3BpYy9jbGF1ZGUtMy41LXNvbm5ldCIsIm5hbWUiOiJBbnRocm9waWM6IENsYXVkZSAzLjUgU29ubmV0IiwiY3JlYXRlZCI6MTcyOTU1NTIwMCwiZGVzY3JpcHRpb24iOiJOZXcgQ2xhdWRlIDMuNSBTb25uZXQgZGVsaXZlcnMgYmV0dGVyLXRoYW4tT3B1cyBjYXBhYmlsaXRpZXMsIGZhc3Rlci10aGFuLVNvbm5ldCBzcGVlZHMsIGF0IHRoZSBzYW1lIFNvbm5ldCBwcmljZXMuIFNvbm5ldCBpcyBwYXJ0aWN1bGFybHkgZ29vZCBhdDpcblxuLSBDb2Rpbmc6IFNjb3JlcyB+NDklIG9uIFNXRS1CZW5jaCBWZXJpZmllZCwgaGlnaGVyIHRoYW4gdGhlIGxhc3QgYmVzdCBzY29yZSwgYW5kIHdpdGhvdXQgYW55IGZhbmN5IHByb21wdCBzY2FmZm9sZGluZ1xuLSBEYXRhIHNjaWVuY2U6IEF1Z21lbnRzIGh1bWFuIGRhdGEgc2NpZW5jZSBleHBlcnRpc2U7IG5hdmlnYXRlcyB1bnN0cnVjdHVyZWQgZGF0YSB3aGlsZSB1c2luZyBtdWx0aXBsZSB0b29scyBmb3IgaW5zaWdodHNcbi0gVmlzdWFsIHByb2Nlc3Npbmc6IGV4Y2VsbGluZyBhdCBpbnRlcnByZXRpbmcgY2hhcnRzLCBncmFwaHMsIGFuZCBpbWFnZXMsIGFjY3VyYXRlbHkgdHJhbnNjcmliaW5nIHRleHQgdG8gZGVyaXZlIGluc2lnaHRzIGJleW9uZCBqdXN0IHRoZSB0ZXh0IGFsb25lXG4tIEFnZW50aWMgdGFza3M6IGV4Y2VwdGlvbmFsIHRvb2wgdXNlLCBtYWtpbmcgaXQgZ3JlYXQgYXQgYWdlbnRpYyB0YXNrcyAoaS5lLiBjb21wbGV4LCBtdWx0aS1zdGVwIHByb2JsZW0gc29sdmluZyB0YXNrcyB0aGF0IHJlcXVpcmUgZW5nYWdpbmcgd2l0aCBvdGhlciBzeXN0ZW1zKVxuXG4jbXVsdGltb2RhbCIsImNvbnRleHRfbGVuZ3RoIjoyMDAwMDAsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQraW1hZ2UtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiLCJpbWFnZSJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6IkNsYXVkZSIsImluc3RydWN0X3R5cGUiOm51bGx9LCJwcmljaW5nIjp7InByb21wdCI6IjAuMDAwMDAzIiwiY29tcGxldGlvbiI6IjAuMDAwMDE1IiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAuMDA0OCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCIsImlucHV0X2NhY2hlX3JlYWQiOiIwLjAwMDAwMDMiLCJpbnB1dF9jYWNoZV93cml0ZSI6IjAuMDAwMDAzNzUifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoyMDAwMDAsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6ODE5MiwiaXNfbW9kZXJhdGVkIjp0cnVlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoieC1haS9ncm9rLWJldGEiLCJuYW1lIjoieEFJOiBHcm9rIEJldGEiLCJjcmVhdGVkIjoxNzI5MzgyNDAwLCJkZXNjcmlwdGlvbiI6Ikdyb2sgQmV0YSBpcyB4QUkncyBleHBlcmltZW50YWwgbGFuZ3VhZ2UgbW9kZWwgd2l0aCBzdGF0ZS1vZi10aGUtYXJ0IHJlYXNvbmluZyBjYXBhYmlsaXRpZXMsIGJlc3QgZm9yIGNvbXBsZXggYW5kIG11bHRpLXN0ZXAgdXNlIGNhc2VzLlxuXG5JdCBpcyB0aGUgc3VjY2Vzc29yIG9mIFtHcm9rIDJdKGh0dHBzOi8veC5haS9ibG9nL2dyb2stMikgd2l0aCBlbmhhbmNlZCBjb250ZXh0IGxlbmd0aC4iLCJjb250ZXh0X2xlbmd0aCI6MTMxMDcyLCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiR3JvayIsImluc3RydWN0X3R5cGUiOm51bGx9LCJwcmljaW5nIjp7InByb21wdCI6IjAuMDAwMDA1IiwiY29tcGxldGlvbiI6IjAuMDAwMDE1IiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoxMzEwNzIsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6bnVsbCwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6Im1pc3RyYWxhaS9taW5pc3RyYWwtOGIiLCJuYW1lIjoiTWlzdHJhbDogTWluaXN0cmFsIDhCIiwiY3JlYXRlZCI6MTcyOTEyMzIwMCwiZGVzY3JpcHRpb24iOiJNaW5pc3RyYWwgOEIgaXMgYW4gOEIgcGFyYW1ldGVyIG1vZGVsIGZlYXR1cmluZyBhIHVuaXF1ZSBpbnRlcmxlYXZlZCBzbGlkaW5nLXdpbmRvdyBhdHRlbnRpb24gcGF0dGVybiBmb3IgZmFzdGVyLCBtZW1vcnktZWZmaWNpZW50IGluZmVyZW5jZS4gRGVzaWduZWQgZm9yIGVkZ2UgdXNlIGNhc2VzLCBpdCBzdXBwb3J0cyB1cCB0byAxMjhrIGNvbnRleHQgbGVuZ3RoIGFuZCBleGNlbHMgaW4ga25vd2xlZGdlIGFuZCByZWFzb25pbmcgdGFza3MuIEl0IG91dHBlcmZvcm1zIHBlZXJzIGluIHRoZSBzdWItMTBCIGNhdGVnb3J5LCBtYWtpbmcgaXQgcGVyZmVjdCBmb3IgbG93LWxhdGVuY3ksIHByaXZhY3ktZmlyc3QgYXBwbGljYXRpb25zLiIsImNvbnRleHRfbGVuZ3RoIjoxMjgwMDAsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJNaXN0cmFsIiwiaW5zdHJ1Y3RfdHlwZSI6bnVsbH0sInByaWNpbmciOnsicHJvbXB0IjoiMC4wMDAwMDAxIiwiY29tcGxldGlvbiI6IjAuMDAwMDAwMSIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6MTI4MDAwLCJtYXhfY29tcGxldGlvbl90b2tlbnMiOm51bGwsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJtaXN0cmFsYWkvbWluaXN0cmFsLTNiIiwibmFtZSI6Ik1pc3RyYWw6IE1pbmlzdHJhbCAzQiIsImNyZWF0ZWQiOjE3MjkxMjMyMDAsImRlc2NyaXB0aW9uIjoiTWluaXN0cmFsIDNCIGlzIGEgM0IgcGFyYW1ldGVyIG1vZGVsIG9wdGltaXplZCBmb3Igb24tZGV2aWNlIGFuZCBlZGdlIGNvbXB1dGluZy4gSXQgZXhjZWxzIGluIGtub3dsZWRnZSwgY29tbW9uc2Vuc2UgcmVhc29uaW5nLCBhbmQgZnVuY3Rpb24tY2FsbGluZywgb3V0cGVyZm9ybWluZyBsYXJnZXIgbW9kZWxzIGxpa2UgTWlzdHJhbCA3QiBvbiBtb3N0IGJlbmNobWFya3MuIFN1cHBvcnRpbmcgdXAgdG8gMTI4ayBjb250ZXh0IGxlbmd0aCwgaXTigJlzIGlkZWFsIGZvciBvcmNoZXN0cmF0aW5nIGFnZW50aWMgd29ya2Zsb3dzIGFuZCBzcGVjaWFsaXN0IHRhc2tzIHdpdGggZWZmaWNpZW50IGluZmVyZW5jZS4iLCJjb250ZXh0X2xlbmd0aCI6MTMxMDcyLCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiTWlzdHJhbCIsImluc3RydWN0X3R5cGUiOm51bGx9LCJwcmljaW5nIjp7InByb21wdCI6IjAuMDAwMDAwMDQiLCJjb21wbGV0aW9uIjoiMC4wMDAwMDAwNCIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6MTMxMDcyLCJtYXhfY29tcGxldGlvbl90b2tlbnMiOm51bGwsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJxd2VuL3F3ZW4tMi41LTdiLWluc3RydWN0OmZyZWUiLCJuYW1lIjoiUXdlbjIuNSA3QiBJbnN0cnVjdCAoZnJlZSkiLCJjcmVhdGVkIjoxNzI5MDM2ODAwLCJkZXNjcmlwdGlvbiI6IlF3ZW4yLjUgN0IgaXMgdGhlIGxhdGVzdCBzZXJpZXMgb2YgUXdlbiBsYXJnZSBsYW5ndWFnZSBtb2RlbHMuIFF3ZW4yLjUgYnJpbmdzIHRoZSBmb2xsb3dpbmcgaW1wcm92ZW1lbnRzIHVwb24gUXdlbjI6XG5cbi0gU2lnbmlmaWNhbnRseSBtb3JlIGtub3dsZWRnZSBhbmQgaGFzIGdyZWF0bHkgaW1wcm92ZWQgY2FwYWJpbGl0aWVzIGluIGNvZGluZyBhbmQgbWF0aGVtYXRpY3MsIHRoYW5rcyB0byBvdXIgc3BlY2lhbGl6ZWQgZXhwZXJ0IG1vZGVscyBpbiB0aGVzZSBkb21haW5zLlxuXG4tIFNpZ25pZmljYW50IGltcHJvdmVtZW50cyBpbiBpbnN0cnVjdGlvbiBmb2xsb3dpbmcsIGdlbmVyYXRpbmcgbG9uZyB0ZXh0cyAob3ZlciA4SyB0b2tlbnMpLCB1bmRlcnN0YW5kaW5nIHN0cnVjdHVyZWQgZGF0YSAoZS5nLCB0YWJsZXMpLCBhbmQgZ2VuZXJhdGluZyBzdHJ1Y3R1cmVkIG91dHB1dHMgZXNwZWNpYWxseSBKU09OLiBNb3JlIHJlc2lsaWVudCB0byB0aGUgZGl2ZXJzaXR5IG9mIHN5c3RlbSBwcm9tcHRzLCBlbmhhbmNpbmcgcm9sZS1wbGF5IGltcGxlbWVudGF0aW9uIGFuZCBjb25kaXRpb24tc2V0dGluZyBmb3IgY2hhdGJvdHMuXG5cbi0gTG9uZy1jb250ZXh0IFN1cHBvcnQgdXAgdG8gMTI4SyB0b2tlbnMgYW5kIGNhbiBnZW5lcmF0ZSB1cCB0byA4SyB0b2tlbnMuXG5cbi0gTXVsdGlsaW5ndWFsIHN1cHBvcnQgZm9yIG92ZXIgMjkgbGFuZ3VhZ2VzLCBpbmNsdWRpbmcgQ2hpbmVzZSwgRW5nbGlzaCwgRnJlbmNoLCBTcGFuaXNoLCBQb3J0dWd1ZXNlLCBHZXJtYW4sIEl0YWxpYW4sIFJ1c3NpYW4sIEphcGFuZXNlLCBLb3JlYW4sIFZpZXRuYW1lc2UsIFRoYWksIEFyYWJpYywgYW5kIG1vcmUuXG5cblVzYWdlIG9mIHRoaXMgbW9kZWwgaXMgc3ViamVjdCB0byBbVG9uZ3lpIFFpYW53ZW4gTElDRU5TRSBBR1JFRU1FTlRdKGh0dHBzOi8vaHVnZ2luZ2ZhY2UuY28vUXdlbi9Rd2VuMS41LTExMEItQ2hhdC9ibG9iL21haW4vTElDRU5TRSkuIiwiY29udGV4dF9sZW5ndGgiOjMyNzY4LCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiUXdlbiIsImluc3RydWN0X3R5cGUiOiJjaGF0bWwifSwicHJpY2luZyI6eyJwcm9tcHQiOiIwIiwiY29tcGxldGlvbiI6IjAiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjMyNzY4LCJtYXhfY29tcGxldGlvbl90b2tlbnMiOjMyNzY4LCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoicXdlbi9xd2VuLTIuNS03Yi1pbnN0cnVjdCIsIm5hbWUiOiJRd2VuMi41IDdCIEluc3RydWN0IiwiY3JlYXRlZCI6MTcyOTAzNjgwMCwiZGVzY3JpcHRpb24iOiJRd2VuMi41IDdCIGlzIHRoZSBsYXRlc3Qgc2VyaWVzIG9mIFF3ZW4gbGFyZ2UgbGFuZ3VhZ2UgbW9kZWxzLiBRd2VuMi41IGJyaW5ncyB0aGUgZm9sbG93aW5nIGltcHJvdmVtZW50cyB1cG9uIFF3ZW4yOlxuXG4tIFNpZ25pZmljYW50bHkgbW9yZSBrbm93bGVkZ2UgYW5kIGhhcyBncmVhdGx5IGltcHJvdmVkIGNhcGFiaWxpdGllcyBpbiBjb2RpbmcgYW5kIG1hdGhlbWF0aWNzLCB0aGFua3MgdG8gb3VyIHNwZWNpYWxpemVkIGV4cGVydCBtb2RlbHMgaW4gdGhlc2UgZG9tYWlucy5cblxuLSBTaWduaWZpY2FudCBpbXByb3ZlbWVudHMgaW4gaW5zdHJ1Y3Rpb24gZm9sbG93aW5nLCBnZW5lcmF0aW5nIGxvbmcgdGV4dHMgKG92ZXIgOEsgdG9rZW5zKSwgdW5kZXJzdGFuZGluZyBzdHJ1Y3R1cmVkIGRhdGEgKGUuZywgdGFibGVzKSwgYW5kIGdlbmVyYXRpbmcgc3RydWN0dXJlZCBvdXRwdXRzIGVzcGVjaWFsbHkgSlNPTi4gTW9yZSByZXNpbGllbnQgdG8gdGhlIGRpdmVyc2l0eSBvZiBzeXN0ZW0gcHJvbXB0cywgZW5oYW5jaW5nIHJvbGUtcGxheSBpbXBsZW1lbnRhdGlvbiBhbmQgY29uZGl0aW9uLXNldHRpbmcgZm9yIGNoYXRib3RzLlxuXG4tIExvbmctY29udGV4dCBTdXBwb3J0IHVwIHRvIDEyOEsgdG9rZW5zIGFuZCBjYW4gZ2VuZXJhdGUgdXAgdG8gOEsgdG9rZW5zLlxuXG4tIE11bHRpbGluZ3VhbCBzdXBwb3J0IGZvciBvdmVyIDI5IGxhbmd1YWdlcywgaW5jbHVkaW5nIENoaW5lc2UsIEVuZ2xpc2gsIEZyZW5jaCwgU3BhbmlzaCwgUG9ydHVndWVzZSwgR2VybWFuLCBJdGFsaWFuLCBSdXNzaWFuLCBKYXBhbmVzZSwgS29yZWFuLCBWaWV0bmFtZXNlLCBUaGFpLCBBcmFiaWMsIGFuZCBtb3JlLlxuXG5Vc2FnZSBvZiB0aGlzIG1vZGVsIGlzIHN1YmplY3QgdG8gW1Rvbmd5aSBRaWFud2VuIExJQ0VOU0UgQUdSRUVNRU5UXShodHRwczovL2h1Z2dpbmdmYWNlLmNvL1F3ZW4vUXdlbjEuNS0xMTBCLUNoYXQvYmxvYi9tYWluL0xJQ0VOU0UpLiIsImNvbnRleHRfbGVuZ3RoIjozMjc2OCwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dC0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6IlF3ZW4iLCJpbnN0cnVjdF90eXBlIjoiY2hhdG1sIn0sInByaWNpbmciOnsicHJvbXB0IjoiMC4wMDAwMDAwNSIsImNvbXBsZXRpb24iOiIwLjAwMDAwMDEiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjMyNzY4LCJtYXhfY29tcGxldGlvbl90b2tlbnMiOjE2Mzg0LCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoibnZpZGlhL2xsYW1hLTMuMS1uZW1vdHJvbi03MGItaW5zdHJ1Y3Q6ZnJlZSIsIm5hbWUiOiJOVklESUE6IExsYW1hIDMuMSBOZW1vdHJvbiA3MEIgSW5zdHJ1Y3QgKGZyZWUpIiwiY3JlYXRlZCI6MTcyODk1MDQwMCwiZGVzY3JpcHRpb24iOiJOVklESUEncyBMbGFtYSAzLjEgTmVtb3Ryb24gNzBCIGlzIGEgbGFuZ3VhZ2UgbW9kZWwgZGVzaWduZWQgZm9yIGdlbmVyYXRpbmcgcHJlY2lzZSBhbmQgdXNlZnVsIHJlc3BvbnNlcy4gTGV2ZXJhZ2luZyBbTGxhbWEgMy4xIDcwQl0oL21vZGVscy9tZXRhLWxsYW1hL2xsYW1hLTMuMS03MGItaW5zdHJ1Y3QpIGFyY2hpdGVjdHVyZSBhbmQgUmVpbmZvcmNlbWVudCBMZWFybmluZyBmcm9tIEh1bWFuIEZlZWRiYWNrIChSTEhGKSwgaXQgZXhjZWxzIGluIGF1dG9tYXRpYyBhbGlnbm1lbnQgYmVuY2htYXJrcy4gVGhpcyBtb2RlbCBpcyB0YWlsb3JlZCBmb3IgYXBwbGljYXRpb25zIHJlcXVpcmluZyBoaWdoIGFjY3VyYWN5IGluIGhlbHBmdWxuZXNzIGFuZCByZXNwb25zZSBnZW5lcmF0aW9uLCBzdWl0YWJsZSBmb3IgZGl2ZXJzZSB1c2VyIHF1ZXJpZXMgYWNyb3NzIG11bHRpcGxlIGRvbWFpbnMuXG5cblVzYWdlIG9mIHRoaXMgbW9kZWwgaXMgc3ViamVjdCB0byBbTWV0YSdzIEFjY2VwdGFibGUgVXNlIFBvbGljeV0oaHR0cHM6Ly93d3cubGxhbWEuY29tL2xsYW1hMy91c2UtcG9saWN5LykuIiwiY29udGV4dF9sZW5ndGgiOjEzMTA3MiwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dC0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6IkxsYW1hMyIsImluc3RydWN0X3R5cGUiOiJsbGFtYTMifSwicHJpY2luZyI6eyJwcm9tcHQiOiIwIiwiY29tcGxldGlvbiI6IjAiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjEzMTA3MiwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjpudWxsLCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoibnZpZGlhL2xsYW1hLTMuMS1uZW1vdHJvbi03MGItaW5zdHJ1Y3QiLCJuYW1lIjoiTlZJRElBOiBMbGFtYSAzLjEgTmVtb3Ryb24gNzBCIEluc3RydWN0IiwiY3JlYXRlZCI6MTcyODk1MDQwMCwiZGVzY3JpcHRpb24iOiJOVklESUEncyBMbGFtYSAzLjEgTmVtb3Ryb24gNzBCIGlzIGEgbGFuZ3VhZ2UgbW9kZWwgZGVzaWduZWQgZm9yIGdlbmVyYXRpbmcgcHJlY2lzZSBhbmQgdXNlZnVsIHJlc3BvbnNlcy4gTGV2ZXJhZ2luZyBbTGxhbWEgMy4xIDcwQl0oL21vZGVscy9tZXRhLWxsYW1hL2xsYW1hLTMuMS03MGItaW5zdHJ1Y3QpIGFyY2hpdGVjdHVyZSBhbmQgUmVpbmZvcmNlbWVudCBMZWFybmluZyBmcm9tIEh1bWFuIEZlZWRiYWNrIChSTEhGKSwgaXQgZXhjZWxzIGluIGF1dG9tYXRpYyBhbGlnbm1lbnQgYmVuY2htYXJrcy4gVGhpcyBtb2RlbCBpcyB0YWlsb3JlZCBmb3IgYXBwbGljYXRpb25zIHJlcXVpcmluZyBoaWdoIGFjY3VyYWN5IGluIGhlbHBmdWxuZXNzIGFuZCByZXNwb25zZSBnZW5lcmF0aW9uLCBzdWl0YWJsZSBmb3IgZGl2ZXJzZSB1c2VyIHF1ZXJpZXMgYWNyb3NzIG11bHRpcGxlIGRvbWFpbnMuXG5cblVzYWdlIG9mIHRoaXMgbW9kZWwgaXMgc3ViamVjdCB0byBbTWV0YSdzIEFjY2VwdGFibGUgVXNlIFBvbGljeV0oaHR0cHM6Ly93d3cubGxhbWEuY29tL2xsYW1hMy91c2UtcG9saWN5LykuIiwiY29udGV4dF9sZW5ndGgiOjEzMTA3MiwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dC0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6IkxsYW1hMyIsImluc3RydWN0X3R5cGUiOiJsbGFtYTMifSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMDEyIiwiY29tcGxldGlvbiI6IjAuMDAwMDAwMyIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6MTMxMDcyLCJtYXhfY29tcGxldGlvbl90b2tlbnMiOjEzMTA3MiwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6ImluZmxlY3Rpb24vaW5mbGVjdGlvbi0zLXByb2R1Y3Rpdml0eSIsIm5hbWUiOiJJbmZsZWN0aW9uOiBJbmZsZWN0aW9uIDMgUHJvZHVjdGl2aXR5IiwiY3JlYXRlZCI6MTcyODYwNDgwMCwiZGVzY3JpcHRpb24iOiJJbmZsZWN0aW9uIDMgUHJvZHVjdGl2aXR5IGlzIG9wdGltaXplZCBmb3IgZm9sbG93aW5nIGluc3RydWN0aW9ucy4gSXQgaXMgYmV0dGVyIGZvciB0YXNrcyByZXF1aXJpbmcgSlNPTiBvdXRwdXQgb3IgcHJlY2lzZSBhZGhlcmVuY2UgdG8gcHJvdmlkZWQgZ3VpZGVsaW5lcy4gSXQgaGFzIGFjY2VzcyB0byByZWNlbnQgbmV3cy5cblxuRm9yIGVtb3Rpb25hbCBpbnRlbGxpZ2VuY2Ugc2ltaWxhciB0byBQaSwgc2VlIFtJbmZsZWN0IDMgUGldKC9pbmZsZWN0aW9uL2luZmxlY3Rpb24tMy1waSlcblxuU2VlIFtJbmZsZWN0aW9uJ3MgYW5ub3VuY2VtZW50XShodHRwczovL2luZmxlY3Rpb24uYWkvYmxvZy9lbnRlcnByaXNlKSBmb3IgbW9yZSBkZXRhaWxzLiIsImNvbnRleHRfbGVuZ3RoIjo4MDAwLCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiT3RoZXIiLCJpbnN0cnVjdF90eXBlIjpudWxsfSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMjUiLCJjb21wbGV0aW9uIjoiMC4wMDAwMSIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6ODAwMCwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjoxMDI0LCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoiaW5mbGVjdGlvbi9pbmZsZWN0aW9uLTMtcGkiLCJuYW1lIjoiSW5mbGVjdGlvbjogSW5mbGVjdGlvbiAzIFBpIiwiY3JlYXRlZCI6MTcyODYwNDgwMCwiZGVzY3JpcHRpb24iOiJJbmZsZWN0aW9uIDMgUGkgcG93ZXJzIEluZmxlY3Rpb24ncyBbUGldKGh0dHBzOi8vcGkuYWkpIGNoYXRib3QsIGluY2x1ZGluZyBiYWNrc3RvcnksIGVtb3Rpb25hbCBpbnRlbGxpZ2VuY2UsIHByb2R1Y3Rpdml0eSwgYW5kIHNhZmV0eS4gSXQgaGFzIGFjY2VzcyB0byByZWNlbnQgbmV3cywgYW5kIGV4Y2VscyBpbiBzY2VuYXJpb3MgbGlrZSBjdXN0b21lciBzdXBwb3J0IGFuZCByb2xlcGxheS5cblxuUGkgaGFzIGJlZW4gdHJhaW5lZCB0byBtaXJyb3IgeW91ciB0b25lIGFuZCBzdHlsZSwgaWYgeW91IHVzZSBtb3JlIGVtb2ppcywgc28gd2lsbCBQaSEgVHJ5IGV4cGVyaW1lbnRpbmcgd2l0aCB2YXJpb3VzIHByb21wdHMgYW5kIGNvbnZlcnNhdGlvbiBzdHlsZXMuIiwiY29udGV4dF9sZW5ndGgiOjgwMDAsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJPdGhlciIsImluc3RydWN0X3R5cGUiOm51bGx9LCJwcmljaW5nIjp7InByb21wdCI6IjAuMDAwMDAyNSIsImNvbXBsZXRpb24iOiIwLjAwMDAxIiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjo4MDAwLCJtYXhfY29tcGxldGlvbl90b2tlbnMiOjEwMjQsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJnb29nbGUvZ2VtaW5pLWZsYXNoLTEuNS04YiIsIm5hbWUiOiJHb29nbGU6IEdlbWluaSAxLjUgRmxhc2ggOEIiLCJjcmVhdGVkIjoxNzI3OTEzNjAwLCJkZXNjcmlwdGlvbiI6IkdlbWluaSBGbGFzaCAxLjUgOEIgaXMgb3B0aW1pemVkIGZvciBzcGVlZCBhbmQgZWZmaWNpZW5jeSwgb2ZmZXJpbmcgZW5oYW5jZWQgcGVyZm9ybWFuY2UgaW4gc21hbGwgcHJvbXB0IHRhc2tzIGxpa2UgY2hhdCwgdHJhbnNjcmlwdGlvbiwgYW5kIHRyYW5zbGF0aW9uLiBXaXRoIHJlZHVjZWQgbGF0ZW5jeSwgaXQgaXMgaGlnaGx5IGVmZmVjdGl2ZSBmb3IgcmVhbC10aW1lIGFuZCBsYXJnZS1zY2FsZSBvcGVyYXRpb25zLiBUaGlzIG1vZGVsIGZvY3VzZXMgb24gY29zdC1lZmZlY3RpdmUgc29sdXRpb25zIHdoaWxlIG1haW50YWluaW5nIGhpZ2gtcXVhbGl0eSByZXN1bHRzLlxuXG5bQ2xpY2sgaGVyZSB0byBsZWFybiBtb3JlIGFib3V0IHRoaXMgbW9kZWxdKGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGVibG9nLmNvbS9lbi9nZW1pbmktMTUtZmxhc2gtOGItaXMtbm93LWdlbmVyYWxseS1hdmFpbGFibGUtZm9yLXVzZS8pLlxuXG5Vc2FnZSBvZiBHZW1pbmkgaXMgc3ViamVjdCB0byBHb29nbGUncyBbR2VtaW5pIFRlcm1zIG9mIFVzZV0oaHR0cHM6Ly9haS5nb29nbGUuZGV2L3Rlcm1zKS4iLCJjb250ZXh0X2xlbmd0aCI6MTAwMDAwMCwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dCtpbWFnZS0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCIsImltYWdlIl0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiR2VtaW5pIiwiaW5zdHJ1Y3RfdHlwZSI6bnVsbH0sInByaWNpbmciOnsicHJvbXB0IjoiMC4wMDAwMDAwMzc1IiwiY29tcGxldGlvbiI6IjAuMDAwMDAwMTUiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCIsImlucHV0X2NhY2hlX3JlYWQiOiIwLjAwMDAwMDAxIiwiaW5wdXRfY2FjaGVfd3JpdGUiOiIwLjAwMDAwMDA1ODMifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoxMDAwMDAwLCJtYXhfY29tcGxldGlvbl90b2tlbnMiOjgxOTIsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJ0aGVkcnVtbWVyL3JvY2luYW50ZS0xMmIiLCJuYW1lIjoiUm9jaW5hbnRlIDEyQiIsImNyZWF0ZWQiOjE3Mjc2NTQ0MDAsImRlc2NyaXB0aW9uIjoiUm9jaW5hbnRlIDEyQiBpcyBkZXNpZ25lZCBmb3IgZW5nYWdpbmcgc3Rvcnl0ZWxsaW5nIGFuZCByaWNoIHByb3NlLlxuXG5FYXJseSB0ZXN0ZXJzIGhhdmUgcmVwb3J0ZWQ6XG4tIEV4cGFuZGVkIHZvY2FidWxhcnkgd2l0aCB1bmlxdWUgYW5kIGV4cHJlc3NpdmUgd29yZCBjaG9pY2VzXG4tIEVuaGFuY2VkIGNyZWF0aXZpdHkgZm9yIHZpdmlkIG5hcnJhdGl2ZXNcbi0gQWR2ZW50dXJlLWZpbGxlZCBhbmQgY2FwdGl2YXRpbmcgc3RvcmllcyIsImNvbnRleHRfbGVuZ3RoIjozMjc2OCwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dC0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6IlF3ZW4iLCJpbnN0cnVjdF90eXBlIjoiY2hhdG1sIn0sInByaWNpbmciOnsicHJvbXB0IjoiMC4wMDAwMDAyNSIsImNvbXBsZXRpb24iOiIwLjAwMDAwMDUiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjMyNzY4LCJtYXhfY29tcGxldGlvbl90b2tlbnMiOm51bGwsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJhbnRocmFjaXRlLW9yZy9tYWdudW0tdjItNzJiIiwibmFtZSI6Ik1hZ251bSB2MiA3MkIiLCJjcmVhdGVkIjoxNzI3NjU0NDAwLCJkZXNjcmlwdGlvbiI6IkZyb20gdGhlIG1ha2VyIG9mIFtHb2xpYXRoXShodHRwczovL29wZW5yb3V0ZXIuYWkvbW9kZWxzL2FscGluZGFsZS9nb2xpYXRoLTEyMGIpLCBNYWdudW0gNzJCIGlzIHRoZSBzZXZlbnRoIGluIGEgZmFtaWx5IG9mIG1vZGVscyBkZXNpZ25lZCB0byBhY2hpZXZlIHRoZSBwcm9zZSBxdWFsaXR5IG9mIHRoZSBDbGF1ZGUgMyBtb2RlbHMsIG5vdGFibHkgT3B1cyAmIFNvbm5ldC5cblxuVGhlIG1vZGVsIGlzIGJhc2VkIG9uIFtRd2VuMiA3MkJdKGh0dHBzOi8vb3BlbnJvdXRlci5haS9tb2RlbHMvcXdlbi9xd2VuLTItNzJiLWluc3RydWN0KSBhbmQgdHJhaW5lZCB3aXRoIDU1IG1pbGxpb24gdG9rZW5zIG9mIGhpZ2hseSBjdXJhdGVkIHJvbGVwbGF5IChSUCkgZGF0YS4iLCJjb250ZXh0X2xlbmd0aCI6MzI3NjgsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJRd2VuIiwiaW5zdHJ1Y3RfdHlwZSI6ImNoYXRtbCJ9LCJwcmljaW5nIjp7InByb21wdCI6IjAuMDAwMDAzIiwiY29tcGxldGlvbiI6IjAuMDAwMDAzIiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjozMjc2OCwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjpudWxsLCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoibGlxdWlkL2xmbS00MGIiLCJuYW1lIjoiTGlxdWlkOiBMRk0gNDBCIE1vRSIsImNyZWF0ZWQiOjE3Mjc2NTQ0MDAsImRlc2NyaXB0aW9uIjoiTGlxdWlkJ3MgNDAuM0IgTWl4dHVyZSBvZiBFeHBlcnRzIChNb0UpIG1vZGVsLiBMaXF1aWQgRm91bmRhdGlvbiBNb2RlbHMgKExGTXMpIGFyZSBsYXJnZSBuZXVyYWwgbmV0d29ya3MgYnVpbHQgd2l0aCBjb21wdXRhdGlvbmFsIHVuaXRzIHJvb3RlZCBpbiBkeW5hbWljIHN5c3RlbXMuXG5cbkxGTXMgYXJlIGdlbmVyYWwtcHVycG9zZSBBSSBtb2RlbHMgdGhhdCBjYW4gYmUgdXNlZCB0byBtb2RlbCBhbnkga2luZCBvZiBzZXF1ZW50aWFsIGRhdGEsIGluY2x1ZGluZyB2aWRlbywgYXVkaW8sIHRleHQsIHRpbWUgc2VyaWVzLCBhbmQgc2lnbmFscy5cblxuU2VlIHRoZSBbbGF1bmNoIGFubm91bmNlbWVudF0oaHR0cHM6Ly93d3cubGlxdWlkLmFpL2xpcXVpZC1mb3VuZGF0aW9uLW1vZGVscykgZm9yIGJlbmNobWFya3MgYW5kIG1vcmUgaW5mby4iLCJjb250ZXh0X2xlbmd0aCI6MzI3NjgsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJPdGhlciIsImluc3RydWN0X3R5cGUiOiJjaGF0bWwifSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMDE1IiwiY29tcGxldGlvbiI6IjAuMDAwMDAwMTUiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjMyNzY4LCJtYXhfY29tcGxldGlvbl90b2tlbnMiOm51bGwsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJtZXRhLWxsYW1hL2xsYW1hLTMuMi0zYi1pbnN0cnVjdDpmcmVlIiwibmFtZSI6Ik1ldGE6IExsYW1hIDMuMiAzQiBJbnN0cnVjdCAoZnJlZSkiLCJjcmVhdGVkIjoxNzI3MjIyNDAwLCJkZXNjcmlwdGlvbiI6IkxsYW1hIDMuMiAzQiBpcyBhIDMtYmlsbGlvbi1wYXJhbWV0ZXIgbXVsdGlsaW5ndWFsIGxhcmdlIGxhbmd1YWdlIG1vZGVsLCBvcHRpbWl6ZWQgZm9yIGFkdmFuY2VkIG5hdHVyYWwgbGFuZ3VhZ2UgcHJvY2Vzc2luZyB0YXNrcyBsaWtlIGRpYWxvZ3VlIGdlbmVyYXRpb24sIHJlYXNvbmluZywgYW5kIHN1bW1hcml6YXRpb24uIERlc2lnbmVkIHdpdGggdGhlIGxhdGVzdCB0cmFuc2Zvcm1lciBhcmNoaXRlY3R1cmUsIGl0IHN1cHBvcnRzIGVpZ2h0IGxhbmd1YWdlcywgaW5jbHVkaW5nIEVuZ2xpc2gsIFNwYW5pc2gsIGFuZCBIaW5kaSwgYW5kIGlzIGFkYXB0YWJsZSBmb3IgYWRkaXRpb25hbCBsYW5ndWFnZXMuXG5cblRyYWluZWQgb24gOSB0cmlsbGlvbiB0b2tlbnMsIHRoZSBMbGFtYSAzLjIgM0IgbW9kZWwgZXhjZWxzIGluIGluc3RydWN0aW9uLWZvbGxvd2luZywgY29tcGxleCByZWFzb25pbmcsIGFuZCB0b29sIHVzZS4gSXRzIGJhbGFuY2VkIHBlcmZvcm1hbmNlIG1ha2VzIGl0IGlkZWFsIGZvciBhcHBsaWNhdGlvbnMgbmVlZGluZyBhY2N1cmFjeSBhbmQgZWZmaWNpZW5jeSBpbiB0ZXh0IGdlbmVyYXRpb24gYWNyb3NzIG11bHRpbGluZ3VhbCBzZXR0aW5ncy5cblxuQ2xpY2sgaGVyZSBmb3IgdGhlIFtvcmlnaW5hbCBtb2RlbCBjYXJkXShodHRwczovL2dpdGh1Yi5jb20vbWV0YS1sbGFtYS9sbGFtYS1tb2RlbHMvYmxvYi9tYWluL21vZGVscy9sbGFtYTNfMi9NT0RFTF9DQVJELm1kKS5cblxuVXNhZ2Ugb2YgdGhpcyBtb2RlbCBpcyBzdWJqZWN0IHRvIFtNZXRhJ3MgQWNjZXB0YWJsZSBVc2UgUG9saWN5XShodHRwczovL3d3dy5sbGFtYS5jb20vbGxhbWEzL3VzZS1wb2xpY3kvKS4iLCJjb250ZXh0X2xlbmd0aCI6MjAwMDAsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJMbGFtYTMiLCJpbnN0cnVjdF90eXBlIjoibGxhbWEzIn0sInByaWNpbmciOnsicHJvbXB0IjoiMCIsImNvbXBsZXRpb24iOiIwIiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoyMDAwMCwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjoyMDAwMCwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6Im1ldGEtbGxhbWEvbGxhbWEtMy4yLTNiLWluc3RydWN0IiwibmFtZSI6Ik1ldGE6IExsYW1hIDMuMiAzQiBJbnN0cnVjdCIsImNyZWF0ZWQiOjE3MjcyMjI0MDAsImRlc2NyaXB0aW9uIjoiTGxhbWEgMy4yIDNCIGlzIGEgMy1iaWxsaW9uLXBhcmFtZXRlciBtdWx0aWxpbmd1YWwgbGFyZ2UgbGFuZ3VhZ2UgbW9kZWwsIG9wdGltaXplZCBmb3IgYWR2YW5jZWQgbmF0dXJhbCBsYW5ndWFnZSBwcm9jZXNzaW5nIHRhc2tzIGxpa2UgZGlhbG9ndWUgZ2VuZXJhdGlvbiwgcmVhc29uaW5nLCBhbmQgc3VtbWFyaXphdGlvbi4gRGVzaWduZWQgd2l0aCB0aGUgbGF0ZXN0IHRyYW5zZm9ybWVyIGFyY2hpdGVjdHVyZSwgaXQgc3VwcG9ydHMgZWlnaHQgbGFuZ3VhZ2VzLCBpbmNsdWRpbmcgRW5nbGlzaCwgU3BhbmlzaCwgYW5kIEhpbmRpLCBhbmQgaXMgYWRhcHRhYmxlIGZvciBhZGRpdGlvbmFsIGxhbmd1YWdlcy5cblxuVHJhaW5lZCBvbiA5IHRyaWxsaW9uIHRva2VucywgdGhlIExsYW1hIDMuMiAzQiBtb2RlbCBleGNlbHMgaW4gaW5zdHJ1Y3Rpb24tZm9sbG93aW5nLCBjb21wbGV4IHJlYXNvbmluZywgYW5kIHRvb2wgdXNlLiBJdHMgYmFsYW5jZWQgcGVyZm9ybWFuY2UgbWFrZXMgaXQgaWRlYWwgZm9yIGFwcGxpY2F0aW9ucyBuZWVkaW5nIGFjY3VyYWN5IGFuZCBlZmZpY2llbmN5IGluIHRleHQgZ2VuZXJhdGlvbiBhY3Jvc3MgbXVsdGlsaW5ndWFsIHNldHRpbmdzLlxuXG5DbGljayBoZXJlIGZvciB0aGUgW29yaWdpbmFsIG1vZGVsIGNhcmRdKGh0dHBzOi8vZ2l0aHViLmNvbS9tZXRhLWxsYW1hL2xsYW1hLW1vZGVscy9ibG9iL21haW4vbW9kZWxzL2xsYW1hM18yL01PREVMX0NBUkQubWQpLlxuXG5Vc2FnZSBvZiB0aGlzIG1vZGVsIGlzIHN1YmplY3QgdG8gW01ldGEncyBBY2NlcHRhYmxlIFVzZSBQb2xpY3ldKGh0dHBzOi8vd3d3LmxsYW1hLmNvbS9sbGFtYTMvdXNlLXBvbGljeS8pLiIsImNvbnRleHRfbGVuZ3RoIjoxMzEwNzIsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJMbGFtYTMiLCJpbnN0cnVjdF90eXBlIjoibGxhbWEzIn0sInByaWNpbmciOnsicHJvbXB0IjoiMC4wMDAwMDAwMTUiLCJjb21wbGV0aW9uIjoiMC4wMDAwMDAwMjUiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjEzMTA3MiwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjoxMzEwNzIsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJtZXRhLWxsYW1hL2xsYW1hLTMuMi0xYi1pbnN0cnVjdDpmcmVlIiwibmFtZSI6Ik1ldGE6IExsYW1hIDMuMiAxQiBJbnN0cnVjdCAoZnJlZSkiLCJjcmVhdGVkIjoxNzI3MjIyNDAwLCJkZXNjcmlwdGlvbiI6IkxsYW1hIDMuMiAxQiBpcyBhIDEtYmlsbGlvbi1wYXJhbWV0ZXIgbGFuZ3VhZ2UgbW9kZWwgZm9jdXNlZCBvbiBlZmZpY2llbnRseSBwZXJmb3JtaW5nIG5hdHVyYWwgbGFuZ3VhZ2UgdGFza3MsIHN1Y2ggYXMgc3VtbWFyaXphdGlvbiwgZGlhbG9ndWUsIGFuZCBtdWx0aWxpbmd1YWwgdGV4dCBhbmFseXNpcy4gSXRzIHNtYWxsZXIgc2l6ZSBhbGxvd3MgaXQgdG8gb3BlcmF0ZSBlZmZpY2llbnRseSBpbiBsb3ctcmVzb3VyY2UgZW52aXJvbm1lbnRzIHdoaWxlIG1haW50YWluaW5nIHN0cm9uZyB0YXNrIHBlcmZvcm1hbmNlLlxuXG5TdXBwb3J0aW5nIGVpZ2h0IGNvcmUgbGFuZ3VhZ2VzIGFuZCBmaW5lLXR1bmFibGUgZm9yIG1vcmUsIExsYW1hIDEuM0IgaXMgaWRlYWwgZm9yIGJ1c2luZXNzZXMgb3IgZGV2ZWxvcGVycyBzZWVraW5nIGxpZ2h0d2VpZ2h0IHlldCBwb3dlcmZ1bCBBSSBzb2x1dGlvbnMgdGhhdCBjYW4gb3BlcmF0ZSBpbiBkaXZlcnNlIG11bHRpbGluZ3VhbCBzZXR0aW5ncyB3aXRob3V0IHRoZSBoaWdoIGNvbXB1dGF0aW9uYWwgZGVtYW5kIG9mIGxhcmdlciBtb2RlbHMuXG5cbkNsaWNrIGhlcmUgZm9yIHRoZSBbb3JpZ2luYWwgbW9kZWwgY2FyZF0oaHR0cHM6Ly9naXRodWIuY29tL21ldGEtbGxhbWEvbGxhbWEtbW9kZWxzL2Jsb2IvbWFpbi9tb2RlbHMvbGxhbWEzXzIvTU9ERUxfQ0FSRC5tZCkuXG5cblVzYWdlIG9mIHRoaXMgbW9kZWwgaXMgc3ViamVjdCB0byBbTWV0YSdzIEFjY2VwdGFibGUgVXNlIFBvbGljeV0oaHR0cHM6Ly93d3cubGxhbWEuY29tL2xsYW1hMy91c2UtcG9saWN5LykuIiwiY29udGV4dF9sZW5ndGgiOjEzMTA3MiwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dC0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6IkxsYW1hMyIsImluc3RydWN0X3R5cGUiOiJsbGFtYTMifSwicHJpY2luZyI6eyJwcm9tcHQiOiIwIiwiY29tcGxldGlvbiI6IjAiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjEzMTA3MiwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjoxMzEwNzIsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJtZXRhLWxsYW1hL2xsYW1hLTMuMi0xYi1pbnN0cnVjdCIsIm5hbWUiOiJNZXRhOiBMbGFtYSAzLjIgMUIgSW5zdHJ1Y3QiLCJjcmVhdGVkIjoxNzI3MjIyNDAwLCJkZXNjcmlwdGlvbiI6IkxsYW1hIDMuMiAxQiBpcyBhIDEtYmlsbGlvbi1wYXJhbWV0ZXIgbGFuZ3VhZ2UgbW9kZWwgZm9jdXNlZCBvbiBlZmZpY2llbnRseSBwZXJmb3JtaW5nIG5hdHVyYWwgbGFuZ3VhZ2UgdGFza3MsIHN1Y2ggYXMgc3VtbWFyaXphdGlvbiwgZGlhbG9ndWUsIGFuZCBtdWx0aWxpbmd1YWwgdGV4dCBhbmFseXNpcy4gSXRzIHNtYWxsZXIgc2l6ZSBhbGxvd3MgaXQgdG8gb3BlcmF0ZSBlZmZpY2llbnRseSBpbiBsb3ctcmVzb3VyY2UgZW52aXJvbm1lbnRzIHdoaWxlIG1haW50YWluaW5nIHN0cm9uZyB0YXNrIHBlcmZvcm1hbmNlLlxuXG5TdXBwb3J0aW5nIGVpZ2h0IGNvcmUgbGFuZ3VhZ2VzIGFuZCBmaW5lLXR1bmFibGUgZm9yIG1vcmUsIExsYW1hIDEuM0IgaXMgaWRlYWwgZm9yIGJ1c2luZXNzZXMgb3IgZGV2ZWxvcGVycyBzZWVraW5nIGxpZ2h0d2VpZ2h0IHlldCBwb3dlcmZ1bCBBSSBzb2x1dGlvbnMgdGhhdCBjYW4gb3BlcmF0ZSBpbiBkaXZlcnNlIG11bHRpbGluZ3VhbCBzZXR0aW5ncyB3aXRob3V0IHRoZSBoaWdoIGNvbXB1dGF0aW9uYWwgZGVtYW5kIG9mIGxhcmdlciBtb2RlbHMuXG5cbkNsaWNrIGhlcmUgZm9yIHRoZSBbb3JpZ2luYWwgbW9kZWwgY2FyZF0oaHR0cHM6Ly9naXRodWIuY29tL21ldGEtbGxhbWEvbGxhbWEtbW9kZWxzL2Jsb2IvbWFpbi9tb2RlbHMvbGxhbWEzXzIvTU9ERUxfQ0FSRC5tZCkuXG5cblVzYWdlIG9mIHRoaXMgbW9kZWwgaXMgc3ViamVjdCB0byBbTWV0YSdzIEFjY2VwdGFibGUgVXNlIFBvbGljeV0oaHR0cHM6Ly93d3cubGxhbWEuY29tL2xsYW1hMy91c2UtcG9saWN5LykuIiwiY29udGV4dF9sZW5ndGgiOjEzMTA3MiwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dC0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6IkxsYW1hMyIsImluc3RydWN0X3R5cGUiOiJsbGFtYTMifSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMDAxIiwiY29tcGxldGlvbiI6IjAuMDAwMDAwMDEiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjEzMTA3MiwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjpudWxsLCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoibWV0YS1sbGFtYS9sbGFtYS0zLjItOTBiLXZpc2lvbi1pbnN0cnVjdCIsIm5hbWUiOiJNZXRhOiBMbGFtYSAzLjIgOTBCIFZpc2lvbiBJbnN0cnVjdCIsImNyZWF0ZWQiOjE3MjcyMjI0MDAsImRlc2NyaXB0aW9uIjoiVGhlIExsYW1hIDkwQiBWaXNpb24gbW9kZWwgaXMgYSB0b3AtdGllciwgOTAtYmlsbGlvbi1wYXJhbWV0ZXIgbXVsdGltb2RhbCBtb2RlbCBkZXNpZ25lZCBmb3IgdGhlIG1vc3QgY2hhbGxlbmdpbmcgdmlzdWFsIHJlYXNvbmluZyBhbmQgbGFuZ3VhZ2UgdGFza3MuIEl0IG9mZmVycyB1bnBhcmFsbGVsZWQgYWNjdXJhY3kgaW4gaW1hZ2UgY2FwdGlvbmluZywgdmlzdWFsIHF1ZXN0aW9uIGFuc3dlcmluZywgYW5kIGFkdmFuY2VkIGltYWdlLXRleHQgY29tcHJlaGVuc2lvbi4gUHJlLXRyYWluZWQgb24gdmFzdCBtdWx0aW1vZGFsIGRhdGFzZXRzIGFuZCBmaW5lLXR1bmVkIHdpdGggaHVtYW4gZmVlZGJhY2ssIHRoZSBMbGFtYSA5MEIgVmlzaW9uIGlzIGVuZ2luZWVyZWQgdG8gaGFuZGxlIHRoZSBtb3N0IGRlbWFuZGluZyBpbWFnZS1iYXNlZCBBSSB0YXNrcy5cblxuVGhpcyBtb2RlbCBpcyBwZXJmZWN0IGZvciBpbmR1c3RyaWVzIHJlcXVpcmluZyBjdXR0aW5nLWVkZ2UgbXVsdGltb2RhbCBBSSBjYXBhYmlsaXRpZXMsIHBhcnRpY3VsYXJseSB0aG9zZSBkZWFsaW5nIHdpdGggY29tcGxleCwgcmVhbC10aW1lIHZpc3VhbCBhbmQgdGV4dHVhbCBhbmFseXNpcy5cblxuQ2xpY2sgaGVyZSBmb3IgdGhlIFtvcmlnaW5hbCBtb2RlbCBjYXJkXShodHRwczovL2dpdGh1Yi5jb20vbWV0YS1sbGFtYS9sbGFtYS1tb2RlbHMvYmxvYi9tYWluL21vZGVscy9sbGFtYTNfMi9NT0RFTF9DQVJEX1ZJU0lPTi5tZCkuXG5cblVzYWdlIG9mIHRoaXMgbW9kZWwgaXMgc3ViamVjdCB0byBbTWV0YSdzIEFjY2VwdGFibGUgVXNlIFBvbGljeV0oaHR0cHM6Ly93d3cubGxhbWEuY29tL2xsYW1hMy91c2UtcG9saWN5LykuIiwiY29udGV4dF9sZW5ndGgiOjEzMTA3MiwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dCtpbWFnZS0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCIsImltYWdlIl0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiTGxhbWEzIiwiaW5zdHJ1Y3RfdHlwZSI6ImxsYW1hMyJ9LCJwcmljaW5nIjp7InByb21wdCI6IjAuMDAwMDAwOSIsImNvbXBsZXRpb24iOiIwLjAwMDAwMDkiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMC4wMDEzMDEiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoxMzEwNzIsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6bnVsbCwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6Im1ldGEtbGxhbWEvbGxhbWEtMy4yLTExYi12aXNpb24taW5zdHJ1Y3Q6ZnJlZSIsIm5hbWUiOiJNZXRhOiBMbGFtYSAzLjIgMTFCIFZpc2lvbiBJbnN0cnVjdCAoZnJlZSkiLCJjcmVhdGVkIjoxNzI3MjIyNDAwLCJkZXNjcmlwdGlvbiI6IkxsYW1hIDMuMiAxMUIgVmlzaW9uIGlzIGEgbXVsdGltb2RhbCBtb2RlbCB3aXRoIDExIGJpbGxpb24gcGFyYW1ldGVycywgZGVzaWduZWQgdG8gaGFuZGxlIHRhc2tzIGNvbWJpbmluZyB2aXN1YWwgYW5kIHRleHR1YWwgZGF0YS4gSXQgZXhjZWxzIGluIHRhc2tzIHN1Y2ggYXMgaW1hZ2UgY2FwdGlvbmluZyBhbmQgdmlzdWFsIHF1ZXN0aW9uIGFuc3dlcmluZywgYnJpZGdpbmcgdGhlIGdhcCBiZXR3ZWVuIGxhbmd1YWdlIGdlbmVyYXRpb24gYW5kIHZpc3VhbCByZWFzb25pbmcuIFByZS10cmFpbmVkIG9uIGEgbWFzc2l2ZSBkYXRhc2V0IG9mIGltYWdlLXRleHQgcGFpcnMsIGl0IHBlcmZvcm1zIHdlbGwgaW4gY29tcGxleCwgaGlnaC1hY2N1cmFjeSBpbWFnZSBhbmFseXNpcy5cblxuSXRzIGFiaWxpdHkgdG8gaW50ZWdyYXRlIHZpc3VhbCB1bmRlcnN0YW5kaW5nIHdpdGggbGFuZ3VhZ2UgcHJvY2Vzc2luZyBtYWtlcyBpdCBhbiBpZGVhbCBzb2x1dGlvbiBmb3IgaW5kdXN0cmllcyByZXF1aXJpbmcgY29tcHJlaGVuc2l2ZSB2aXN1YWwtbGluZ3Vpc3RpYyBBSSBhcHBsaWNhdGlvbnMsIHN1Y2ggYXMgY29udGVudCBjcmVhdGlvbiwgQUktZHJpdmVuIGN1c3RvbWVyIHNlcnZpY2UsIGFuZCByZXNlYXJjaC5cblxuQ2xpY2sgaGVyZSBmb3IgdGhlIFtvcmlnaW5hbCBtb2RlbCBjYXJkXShodHRwczovL2dpdGh1Yi5jb20vbWV0YS1sbGFtYS9sbGFtYS1tb2RlbHMvYmxvYi9tYWluL21vZGVscy9sbGFtYTNfMi9NT0RFTF9DQVJEX1ZJU0lPTi5tZCkuXG5cblVzYWdlIG9mIHRoaXMgbW9kZWwgaXMgc3ViamVjdCB0byBbTWV0YSdzIEFjY2VwdGFibGUgVXNlIFBvbGljeV0oaHR0cHM6Ly93d3cubGxhbWEuY29tL2xsYW1hMy91c2UtcG9saWN5LykuIiwiY29udGV4dF9sZW5ndGgiOjEzMTA3MiwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dCtpbWFnZS0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCIsImltYWdlIl0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiTGxhbWEzIiwiaW5zdHJ1Y3RfdHlwZSI6ImxsYW1hMyJ9LCJwcmljaW5nIjp7InByb21wdCI6IjAiLCJjb21wbGV0aW9uIjoiMCIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6MTMxMDcyLCJtYXhfY29tcGxldGlvbl90b2tlbnMiOjIwNDgsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJtZXRhLWxsYW1hL2xsYW1hLTMuMi0xMWItdmlzaW9uLWluc3RydWN0IiwibmFtZSI6Ik1ldGE6IExsYW1hIDMuMiAxMUIgVmlzaW9uIEluc3RydWN0IiwiY3JlYXRlZCI6MTcyNzIyMjQwMCwiZGVzY3JpcHRpb24iOiJMbGFtYSAzLjIgMTFCIFZpc2lvbiBpcyBhIG11bHRpbW9kYWwgbW9kZWwgd2l0aCAxMSBiaWxsaW9uIHBhcmFtZXRlcnMsIGRlc2lnbmVkIHRvIGhhbmRsZSB0YXNrcyBjb21iaW5pbmcgdmlzdWFsIGFuZCB0ZXh0dWFsIGRhdGEuIEl0IGV4Y2VscyBpbiB0YXNrcyBzdWNoIGFzIGltYWdlIGNhcHRpb25pbmcgYW5kIHZpc3VhbCBxdWVzdGlvbiBhbnN3ZXJpbmcsIGJyaWRnaW5nIHRoZSBnYXAgYmV0d2VlbiBsYW5ndWFnZSBnZW5lcmF0aW9uIGFuZCB2aXN1YWwgcmVhc29uaW5nLiBQcmUtdHJhaW5lZCBvbiBhIG1hc3NpdmUgZGF0YXNldCBvZiBpbWFnZS10ZXh0IHBhaXJzLCBpdCBwZXJmb3JtcyB3ZWxsIGluIGNvbXBsZXgsIGhpZ2gtYWNjdXJhY3kgaW1hZ2UgYW5hbHlzaXMuXG5cbkl0cyBhYmlsaXR5IHRvIGludGVncmF0ZSB2aXN1YWwgdW5kZXJzdGFuZGluZyB3aXRoIGxhbmd1YWdlIHByb2Nlc3NpbmcgbWFrZXMgaXQgYW4gaWRlYWwgc29sdXRpb24gZm9yIGluZHVzdHJpZXMgcmVxdWlyaW5nIGNvbXByZWhlbnNpdmUgdmlzdWFsLWxpbmd1aXN0aWMgQUkgYXBwbGljYXRpb25zLCBzdWNoIGFzIGNvbnRlbnQgY3JlYXRpb24sIEFJLWRyaXZlbiBjdXN0b21lciBzZXJ2aWNlLCBhbmQgcmVzZWFyY2guXG5cbkNsaWNrIGhlcmUgZm9yIHRoZSBbb3JpZ2luYWwgbW9kZWwgY2FyZF0oaHR0cHM6Ly9naXRodWIuY29tL21ldGEtbGxhbWEvbGxhbWEtbW9kZWxzL2Jsb2IvbWFpbi9tb2RlbHMvbGxhbWEzXzIvTU9ERUxfQ0FSRF9WSVNJT04ubWQpLlxuXG5Vc2FnZSBvZiB0aGlzIG1vZGVsIGlzIHN1YmplY3QgdG8gW01ldGEncyBBY2NlcHRhYmxlIFVzZSBQb2xpY3ldKGh0dHBzOi8vd3d3LmxsYW1hLmNvbS9sbGFtYTMvdXNlLXBvbGljeS8pLiIsImNvbnRleHRfbGVuZ3RoIjoxMzEwNzIsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQraW1hZ2UtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiLCJpbWFnZSJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6IkxsYW1hMyIsImluc3RydWN0X3R5cGUiOiJsbGFtYTMifSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMDA0OSIsImNvbXBsZXRpb24iOiIwLjAwMDAwMDA0OSIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwLjAwMDA3OTQ4Iiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6MTMxMDcyLCJtYXhfY29tcGxldGlvbl90b2tlbnMiOjE2Mzg0LCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoicXdlbi9xd2VuLTIuNS03MmItaW5zdHJ1Y3Q6ZnJlZSIsIm5hbWUiOiJRd2VuMi41IDcyQiBJbnN0cnVjdCAoZnJlZSkiLCJjcmVhdGVkIjoxNzI2NzA0MDAwLCJkZXNjcmlwdGlvbiI6IlF3ZW4yLjUgNzJCIGlzIHRoZSBsYXRlc3Qgc2VyaWVzIG9mIFF3ZW4gbGFyZ2UgbGFuZ3VhZ2UgbW9kZWxzLiBRd2VuMi41IGJyaW5ncyB0aGUgZm9sbG93aW5nIGltcHJvdmVtZW50cyB1cG9uIFF3ZW4yOlxuXG4tIFNpZ25pZmljYW50bHkgbW9yZSBrbm93bGVkZ2UgYW5kIGhhcyBncmVhdGx5IGltcHJvdmVkIGNhcGFiaWxpdGllcyBpbiBjb2RpbmcgYW5kIG1hdGhlbWF0aWNzLCB0aGFua3MgdG8gb3VyIHNwZWNpYWxpemVkIGV4cGVydCBtb2RlbHMgaW4gdGhlc2UgZG9tYWlucy5cblxuLSBTaWduaWZpY2FudCBpbXByb3ZlbWVudHMgaW4gaW5zdHJ1Y3Rpb24gZm9sbG93aW5nLCBnZW5lcmF0aW5nIGxvbmcgdGV4dHMgKG92ZXIgOEsgdG9rZW5zKSwgdW5kZXJzdGFuZGluZyBzdHJ1Y3R1cmVkIGRhdGEgKGUuZywgdGFibGVzKSwgYW5kIGdlbmVyYXRpbmcgc3RydWN0dXJlZCBvdXRwdXRzIGVzcGVjaWFsbHkgSlNPTi4gTW9yZSByZXNpbGllbnQgdG8gdGhlIGRpdmVyc2l0eSBvZiBzeXN0ZW0gcHJvbXB0cywgZW5oYW5jaW5nIHJvbGUtcGxheSBpbXBsZW1lbnRhdGlvbiBhbmQgY29uZGl0aW9uLXNldHRpbmcgZm9yIGNoYXRib3RzLlxuXG4tIExvbmctY29udGV4dCBTdXBwb3J0IHVwIHRvIDEyOEsgdG9rZW5zIGFuZCBjYW4gZ2VuZXJhdGUgdXAgdG8gOEsgdG9rZW5zLlxuXG4tIE11bHRpbGluZ3VhbCBzdXBwb3J0IGZvciBvdmVyIDI5IGxhbmd1YWdlcywgaW5jbHVkaW5nIENoaW5lc2UsIEVuZ2xpc2gsIEZyZW5jaCwgU3BhbmlzaCwgUG9ydHVndWVzZSwgR2VybWFuLCBJdGFsaWFuLCBSdXNzaWFuLCBKYXBhbmVzZSwgS29yZWFuLCBWaWV0bmFtZXNlLCBUaGFpLCBBcmFiaWMsIGFuZCBtb3JlLlxuXG5Vc2FnZSBvZiB0aGlzIG1vZGVsIGlzIHN1YmplY3QgdG8gW1Rvbmd5aSBRaWFud2VuIExJQ0VOU0UgQUdSRUVNRU5UXShodHRwczovL2h1Z2dpbmdmYWNlLmNvL1F3ZW4vUXdlbjEuNS0xMTBCLUNoYXQvYmxvYi9tYWluL0xJQ0VOU0UpLiIsImNvbnRleHRfbGVuZ3RoIjozMjc2OCwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dC0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6IlF3ZW4iLCJpbnN0cnVjdF90eXBlIjoiY2hhdG1sIn0sInByaWNpbmciOnsicHJvbXB0IjoiMCIsImNvbXBsZXRpb24iOiIwIiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjozMjc2OCwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjpudWxsLCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoicXdlbi9xd2VuLTIuNS03MmItaW5zdHJ1Y3QiLCJuYW1lIjoiUXdlbjIuNSA3MkIgSW5zdHJ1Y3QiLCJjcmVhdGVkIjoxNzI2NzA0MDAwLCJkZXNjcmlwdGlvbiI6IlF3ZW4yLjUgNzJCIGlzIHRoZSBsYXRlc3Qgc2VyaWVzIG9mIFF3ZW4gbGFyZ2UgbGFuZ3VhZ2UgbW9kZWxzLiBRd2VuMi41IGJyaW5ncyB0aGUgZm9sbG93aW5nIGltcHJvdmVtZW50cyB1cG9uIFF3ZW4yOlxuXG4tIFNpZ25pZmljYW50bHkgbW9yZSBrbm93bGVkZ2UgYW5kIGhhcyBncmVhdGx5IGltcHJvdmVkIGNhcGFiaWxpdGllcyBpbiBjb2RpbmcgYW5kIG1hdGhlbWF0aWNzLCB0aGFua3MgdG8gb3VyIHNwZWNpYWxpemVkIGV4cGVydCBtb2RlbHMgaW4gdGhlc2UgZG9tYWlucy5cblxuLSBTaWduaWZpY2FudCBpbXByb3ZlbWVudHMgaW4gaW5zdHJ1Y3Rpb24gZm9sbG93aW5nLCBnZW5lcmF0aW5nIGxvbmcgdGV4dHMgKG92ZXIgOEsgdG9rZW5zKSwgdW5kZXJzdGFuZGluZyBzdHJ1Y3R1cmVkIGRhdGEgKGUuZywgdGFibGVzKSwgYW5kIGdlbmVyYXRpbmcgc3RydWN0dXJlZCBvdXRwdXRzIGVzcGVjaWFsbHkgSlNPTi4gTW9yZSByZXNpbGllbnQgdG8gdGhlIGRpdmVyc2l0eSBvZiBzeXN0ZW0gcHJvbXB0cywgZW5oYW5jaW5nIHJvbGUtcGxheSBpbXBsZW1lbnRhdGlvbiBhbmQgY29uZGl0aW9uLXNldHRpbmcgZm9yIGNoYXRib3RzLlxuXG4tIExvbmctY29udGV4dCBTdXBwb3J0IHVwIHRvIDEyOEsgdG9rZW5zIGFuZCBjYW4gZ2VuZXJhdGUgdXAgdG8gOEsgdG9rZW5zLlxuXG4tIE11bHRpbGluZ3VhbCBzdXBwb3J0IGZvciBvdmVyIDI5IGxhbmd1YWdlcywgaW5jbHVkaW5nIENoaW5lc2UsIEVuZ2xpc2gsIEZyZW5jaCwgU3BhbmlzaCwgUG9ydHVndWVzZSwgR2VybWFuLCBJdGFsaWFuLCBSdXNzaWFuLCBKYXBhbmVzZSwgS29yZWFuLCBWaWV0bmFtZXNlLCBUaGFpLCBBcmFiaWMsIGFuZCBtb3JlLlxuXG5Vc2FnZSBvZiB0aGlzIG1vZGVsIGlzIHN1YmplY3QgdG8gW1Rvbmd5aSBRaWFud2VuIExJQ0VOU0UgQUdSRUVNRU5UXShodHRwczovL2h1Z2dpbmdmYWNlLmNvL1F3ZW4vUXdlbjEuNS0xMTBCLUNoYXQvYmxvYi9tYWluL0xJQ0VOU0UpLiIsImNvbnRleHRfbGVuZ3RoIjozMjc2OCwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dC0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6IlF3ZW4iLCJpbnN0cnVjdF90eXBlIjoiY2hhdG1sIn0sInByaWNpbmciOnsicHJvbXB0IjoiMC4wMDAwMDAxMiIsImNvbXBsZXRpb24iOiIwLjAwMDAwMDM5IiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjozMjc2OCwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjoxNjM4NCwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6InF3ZW4vcXdlbi0yLjUtdmwtNzJiLWluc3RydWN0IiwibmFtZSI6IlF3ZW46IFF3ZW4yLjUtVkwgNzJCIEluc3RydWN0IiwiY3JlYXRlZCI6MTcyNjYxNzYwMCwiZGVzY3JpcHRpb24iOiJRd2VuMi41IFZMIDcyQiBpcyBhIG11bHRpbW9kYWwgTExNIGZyb20gdGhlIFF3ZW4gVGVhbSB3aXRoIHRoZSBmb2xsb3dpbmcga2V5IGVuaGFuY2VtZW50czpcblxuLSBTb1RBIHVuZGVyc3RhbmRpbmcgb2YgaW1hZ2VzIG9mIHZhcmlvdXMgcmVzb2x1dGlvbiAmIHJhdGlvOiBRd2VuMi41LVZMIGFjaGlldmVzIHN0YXRlLW9mLXRoZS1hcnQgcGVyZm9ybWFuY2Ugb24gdmlzdWFsIHVuZGVyc3RhbmRpbmcgYmVuY2htYXJrcywgaW5jbHVkaW5nIE1hdGhWaXN0YSwgRG9jVlFBLCBSZWFsV29ybGRRQSwgTVRWUUEsIGV0Yy5cblxuLSBVbmRlcnN0YW5kaW5nIHZpZGVvcyBvZiAyMG1pbis6IFF3ZW4yLjUtVkwgY2FuIHVuZGVyc3RhbmQgdmlkZW9zIG92ZXIgMjAgbWludXRlcyBmb3IgaGlnaC1xdWFsaXR5IHZpZGVvLWJhc2VkIHF1ZXN0aW9uIGFuc3dlcmluZywgZGlhbG9nLCBjb250ZW50IGNyZWF0aW9uLCBldGMuXG5cbi0gQWdlbnQgdGhhdCBjYW4gb3BlcmF0ZSB5b3VyIG1vYmlsZXMsIHJvYm90cywgZXRjLjogd2l0aCB0aGUgYWJpbGl0aWVzIG9mIGNvbXBsZXggcmVhc29uaW5nIGFuZCBkZWNpc2lvbiBtYWtpbmcsIFF3ZW4yLjUtVkwgY2FuIGJlIGludGVncmF0ZWQgd2l0aCBkZXZpY2VzIGxpa2UgbW9iaWxlIHBob25lcywgcm9ib3RzLCBldGMuLCBmb3IgYXV0b21hdGljIG9wZXJhdGlvbiBiYXNlZCBvbiB2aXN1YWwgZW52aXJvbm1lbnQgYW5kIHRleHQgaW5zdHJ1Y3Rpb25zLlxuXG4tIE11bHRpbGluZ3VhbCBTdXBwb3J0OiB0byBzZXJ2ZSBnbG9iYWwgdXNlcnMsIGJlc2lkZXMgRW5nbGlzaCBhbmQgQ2hpbmVzZSwgUXdlbjIuNS1WTCBub3cgc3VwcG9ydHMgdGhlIHVuZGVyc3RhbmRpbmcgb2YgdGV4dHMgaW4gZGlmZmVyZW50IGxhbmd1YWdlcyBpbnNpZGUgaW1hZ2VzLCBpbmNsdWRpbmcgbW9zdCBFdXJvcGVhbiBsYW5ndWFnZXMsIEphcGFuZXNlLCBLb3JlYW4sIEFyYWJpYywgVmlldG5hbWVzZSwgZXRjLlxuXG5Gb3IgbW9yZSBkZXRhaWxzLCBzZWUgdGhpcyBbYmxvZyBwb3N0XShodHRwczovL3F3ZW5sbS5naXRodWIuaW8vYmxvZy9xd2VuMi12bC8pIGFuZCBbR2l0SHViIHJlcG9dKGh0dHBzOi8vZ2l0aHViLmNvbS9Rd2VuTE0vUXdlbjItVkwpLlxuXG5Vc2FnZSBvZiB0aGlzIG1vZGVsIGlzIHN1YmplY3QgdG8gW1Rvbmd5aSBRaWFud2VuIExJQ0VOU0UgQUdSRUVNRU5UXShodHRwczovL2h1Z2dpbmdmYWNlLmNvL1F3ZW4vUXdlbjEuNS0xMTBCLUNoYXQvYmxvYi9tYWluL0xJQ0VOU0UpLiIsImNvbnRleHRfbGVuZ3RoIjozMjc2OCwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dCtpbWFnZS0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCIsImltYWdlIl0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiUXdlbiIsImluc3RydWN0X3R5cGUiOm51bGx9LCJwcmljaW5nIjp7InByb21wdCI6IjAuMDAwMDAwNiIsImNvbXBsZXRpb24iOiIwLjAwMDAwMDYiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMC4wMDA1NzgiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjozMjc2OCwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjpudWxsLCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoibmV2ZXJzbGVlcC9sbGFtYS0zLjEtbHVtaW1haWQtOGIiLCJuYW1lIjoiTmV2ZXJTbGVlcDogTHVtaW1haWQgdjAuMiA4QiIsImNyZWF0ZWQiOjE3MjYzNTg0MDAsImRlc2NyaXB0aW9uIjoiTHVtaW1haWQgdjAuMiA4QiBpcyBhIGZpbmV0dW5lIG9mIFtMbGFtYSAzLjEgOEJdKC9tb2RlbHMvbWV0YS1sbGFtYS9sbGFtYS0zLjEtOGItaW5zdHJ1Y3QpIHdpdGggYSBcIkhVR0Ugc3RlcCB1cCBkYXRhc2V0IHdpc2VcIiBjb21wYXJlZCB0byBMdW1pbWFpZCB2MC4xLiBTbG9wcHkgY2hhdHMgb3V0cHV0IHdlcmUgcHVyZ2VkLlxuXG5Vc2FnZSBvZiB0aGlzIG1vZGVsIGlzIHN1YmplY3QgdG8gW01ldGEncyBBY2NlcHRhYmxlIFVzZSBQb2xpY3ldKGh0dHBzOi8vbGxhbWEubWV0YS5jb20vbGxhbWEzL3VzZS1wb2xpY3kvKS4iLCJjb250ZXh0X2xlbmd0aCI6MzI3NjgsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJMbGFtYTMiLCJpbnN0cnVjdF90eXBlIjoibGxhbWEzIn0sInByaWNpbmciOnsicHJvbXB0IjoiMC4wMDAwMDAwOTM3NSIsImNvbXBsZXRpb24iOiIwLjAwMDAwMDc1IiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjozMjc2OCwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjoyMDQ4LCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoib3BlbmFpL28xLXByZXZpZXciLCJuYW1lIjoiT3BlbkFJOiBvMS1wcmV2aWV3IiwiY3JlYXRlZCI6MTcyNjA5OTIwMCwiZGVzY3JpcHRpb24iOiJUaGUgbGF0ZXN0IGFuZCBzdHJvbmdlc3QgbW9kZWwgZmFtaWx5IGZyb20gT3BlbkFJLCBvMSBpcyBkZXNpZ25lZCB0byBzcGVuZCBtb3JlIHRpbWUgdGhpbmtpbmcgYmVmb3JlIHJlc3BvbmRpbmcuXG5cblRoZSBvMSBtb2RlbHMgYXJlIG9wdGltaXplZCBmb3IgbWF0aCwgc2NpZW5jZSwgcHJvZ3JhbW1pbmcsIGFuZCBvdGhlciBTVEVNLXJlbGF0ZWQgdGFza3MuIFRoZXkgY29uc2lzdGVudGx5IGV4aGliaXQgUGhELWxldmVsIGFjY3VyYWN5IG9uIGJlbmNobWFya3MgaW4gcGh5c2ljcywgY2hlbWlzdHJ5LCBhbmQgYmlvbG9neS4gTGVhcm4gbW9yZSBpbiB0aGUgW2xhdW5jaCBhbm5vdW5jZW1lbnRdKGh0dHBzOi8vb3BlbmFpLmNvbS9vMSkuXG5cbk5vdGU6IFRoaXMgbW9kZWwgaXMgY3VycmVudGx5IGV4cGVyaW1lbnRhbCBhbmQgbm90IHN1aXRhYmxlIGZvciBwcm9kdWN0aW9uIHVzZS1jYXNlcywgYW5kIG1heSBiZSBoZWF2aWx5IHJhdGUtbGltaXRlZC4iLCJjb250ZXh0X2xlbmd0aCI6MTI4MDAwLCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiR1BUIiwiaW5zdHJ1Y3RfdHlwZSI6bnVsbH0sInByaWNpbmciOnsicHJvbXB0IjoiMC4wMDAwMTUiLCJjb21wbGV0aW9uIjoiMC4wMDAwNiIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIiwiaW5wdXRfY2FjaGVfcmVhZCI6IjAuMDAwMDA3NSJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjEyODAwMCwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjozMjc2OCwiaXNfbW9kZXJhdGVkIjp0cnVlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoib3BlbmFpL28xLXByZXZpZXctMjAyNC0wOS0xMiIsIm5hbWUiOiJPcGVuQUk6IG8xLXByZXZpZXcgKDIwMjQtMDktMTIpIiwiY3JlYXRlZCI6MTcyNjA5OTIwMCwiZGVzY3JpcHRpb24iOiJUaGUgbGF0ZXN0IGFuZCBzdHJvbmdlc3QgbW9kZWwgZmFtaWx5IGZyb20gT3BlbkFJLCBvMSBpcyBkZXNpZ25lZCB0byBzcGVuZCBtb3JlIHRpbWUgdGhpbmtpbmcgYmVmb3JlIHJlc3BvbmRpbmcuXG5cblRoZSBvMSBtb2RlbHMgYXJlIG9wdGltaXplZCBmb3IgbWF0aCwgc2NpZW5jZSwgcHJvZ3JhbW1pbmcsIGFuZCBvdGhlciBTVEVNLXJlbGF0ZWQgdGFza3MuIFRoZXkgY29uc2lzdGVudGx5IGV4aGliaXQgUGhELWxldmVsIGFjY3VyYWN5IG9uIGJlbmNobWFya3MgaW4gcGh5c2ljcywgY2hlbWlzdHJ5LCBhbmQgYmlvbG9neS4gTGVhcm4gbW9yZSBpbiB0aGUgW2xhdW5jaCBhbm5vdW5jZW1lbnRdKGh0dHBzOi8vb3BlbmFpLmNvbS9vMSkuXG5cbk5vdGU6IFRoaXMgbW9kZWwgaXMgY3VycmVudGx5IGV4cGVyaW1lbnRhbCBhbmQgbm90IHN1aXRhYmxlIGZvciBwcm9kdWN0aW9uIHVzZS1jYXNlcywgYW5kIG1heSBiZSBoZWF2aWx5IHJhdGUtbGltaXRlZC4iLCJjb250ZXh0X2xlbmd0aCI6MTI4MDAwLCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiR1BUIiwiaW5zdHJ1Y3RfdHlwZSI6bnVsbH0sInByaWNpbmciOnsicHJvbXB0IjoiMC4wMDAwMTUiLCJjb21wbGV0aW9uIjoiMC4wMDAwNiIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIiwiaW5wdXRfY2FjaGVfcmVhZCI6IjAuMDAwMDA3NSJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjEyODAwMCwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjozMjc2OCwiaXNfbW9kZXJhdGVkIjp0cnVlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoib3BlbmFpL28xLW1pbmkiLCJuYW1lIjoiT3BlbkFJOiBvMS1taW5pIiwiY3JlYXRlZCI6MTcyNjA5OTIwMCwiZGVzY3JpcHRpb24iOiJUaGUgbGF0ZXN0IGFuZCBzdHJvbmdlc3QgbW9kZWwgZmFtaWx5IGZyb20gT3BlbkFJLCBvMSBpcyBkZXNpZ25lZCB0byBzcGVuZCBtb3JlIHRpbWUgdGhpbmtpbmcgYmVmb3JlIHJlc3BvbmRpbmcuXG5cblRoZSBvMSBtb2RlbHMgYXJlIG9wdGltaXplZCBmb3IgbWF0aCwgc2NpZW5jZSwgcHJvZ3JhbW1pbmcsIGFuZCBvdGhlciBTVEVNLXJlbGF0ZWQgdGFza3MuIFRoZXkgY29uc2lzdGVudGx5IGV4aGliaXQgUGhELWxldmVsIGFjY3VyYWN5IG9uIGJlbmNobWFya3MgaW4gcGh5c2ljcywgY2hlbWlzdHJ5LCBhbmQgYmlvbG9neS4gTGVhcm4gbW9yZSBpbiB0aGUgW2xhdW5jaCBhbm5vdW5jZW1lbnRdKGh0dHBzOi8vb3BlbmFpLmNvbS9vMSkuXG5cbk5vdGU6IFRoaXMgbW9kZWwgaXMgY3VycmVudGx5IGV4cGVyaW1lbnRhbCBhbmQgbm90IHN1aXRhYmxlIGZvciBwcm9kdWN0aW9uIHVzZS1jYXNlcywgYW5kIG1heSBiZSBoZWF2aWx5IHJhdGUtbGltaXRlZC4iLCJjb250ZXh0X2xlbmd0aCI6MTI4MDAwLCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiR1BUIiwiaW5zdHJ1Y3RfdHlwZSI6bnVsbH0sInByaWNpbmciOnsicHJvbXB0IjoiMC4wMDAwMDExIiwiY29tcGxldGlvbiI6IjAuMDAwMDA0NCIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIiwiaW5wdXRfY2FjaGVfcmVhZCI6IjAuMDAwMDAwNTUifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoxMjgwMDAsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6NjU1MzYsImlzX21vZGVyYXRlZCI6dHJ1ZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6Im9wZW5haS9vMS1taW5pLTIwMjQtMDktMTIiLCJuYW1lIjoiT3BlbkFJOiBvMS1taW5pICgyMDI0LTA5LTEyKSIsImNyZWF0ZWQiOjE3MjYwOTkyMDAsImRlc2NyaXB0aW9uIjoiVGhlIGxhdGVzdCBhbmQgc3Ryb25nZXN0IG1vZGVsIGZhbWlseSBmcm9tIE9wZW5BSSwgbzEgaXMgZGVzaWduZWQgdG8gc3BlbmQgbW9yZSB0aW1lIHRoaW5raW5nIGJlZm9yZSByZXNwb25kaW5nLlxuXG5UaGUgbzEgbW9kZWxzIGFyZSBvcHRpbWl6ZWQgZm9yIG1hdGgsIHNjaWVuY2UsIHByb2dyYW1taW5nLCBhbmQgb3RoZXIgU1RFTS1yZWxhdGVkIHRhc2tzLiBUaGV5IGNvbnNpc3RlbnRseSBleGhpYml0IFBoRC1sZXZlbCBhY2N1cmFjeSBvbiBiZW5jaG1hcmtzIGluIHBoeXNpY3MsIGNoZW1pc3RyeSwgYW5kIGJpb2xvZ3kuIExlYXJuIG1vcmUgaW4gdGhlIFtsYXVuY2ggYW5ub3VuY2VtZW50XShodHRwczovL29wZW5haS5jb20vbzEpLlxuXG5Ob3RlOiBUaGlzIG1vZGVsIGlzIGN1cnJlbnRseSBleHBlcmltZW50YWwgYW5kIG5vdCBzdWl0YWJsZSBmb3IgcHJvZHVjdGlvbiB1c2UtY2FzZXMsIGFuZCBtYXkgYmUgaGVhdmlseSByYXRlLWxpbWl0ZWQuIiwiY29udGV4dF9sZW5ndGgiOjEyODAwMCwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dC0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6IkdQVCIsImluc3RydWN0X3R5cGUiOm51bGx9LCJwcmljaW5nIjp7InByb21wdCI6IjAuMDAwMDAxMSIsImNvbXBsZXRpb24iOiIwLjAwMDAwNDQiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCIsImlucHV0X2NhY2hlX3JlYWQiOiIwLjAwMDAwMDU1In0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6MTI4MDAwLCJtYXhfY29tcGxldGlvbl90b2tlbnMiOjY1NTM2LCJpc19tb2RlcmF0ZWQiOnRydWV9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJtaXN0cmFsYWkvcGl4dHJhbC0xMmIiLCJuYW1lIjoiTWlzdHJhbDogUGl4dHJhbCAxMkIiLCJjcmVhdGVkIjoxNzI1OTI2NDAwLCJkZXNjcmlwdGlvbiI6IlRoZSBmaXJzdCBtdWx0aS1tb2RhbCwgdGV4dCtpbWFnZS10by10ZXh0IG1vZGVsIGZyb20gTWlzdHJhbCBBSS4gSXRzIHdlaWdodHMgd2VyZSBsYXVuY2hlZCB2aWEgdG9ycmVudDogaHR0cHM6Ly94LmNvbS9taXN0cmFsYWkvc3RhdHVzLzE4MzM3NTgyODUxNjc3MjI4MzYuIiwiY29udGV4dF9sZW5ndGgiOjMyNzY4LCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0K2ltYWdlLT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0IiwiaW1hZ2UiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJNaXN0cmFsIiwiaW5zdHJ1Y3RfdHlwZSI6bnVsbH0sInByaWNpbmciOnsicHJvbXB0IjoiMC4wMDAwMDAxIiwiY29tcGxldGlvbiI6IjAuMDAwMDAwMSIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwLjAwMDE0NDUiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjozMjc2OCwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjpudWxsLCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoiY29oZXJlL2NvbW1hbmQtci1wbHVzLTA4LTIwMjQiLCJuYW1lIjoiQ29oZXJlOiBDb21tYW5kIFIrICgwOC0yMDI0KSIsImNyZWF0ZWQiOjE3MjQ5NzYwMDAsImRlc2NyaXB0aW9uIjoiY29tbWFuZC1yLXBsdXMtMDgtMjAyNCBpcyBhbiB1cGRhdGUgb2YgdGhlIFtDb21tYW5kIFIrXSgvbW9kZWxzL2NvaGVyZS9jb21tYW5kLXItcGx1cykgd2l0aCByb3VnaGx5IDUwJSBoaWdoZXIgdGhyb3VnaHB1dCBhbmQgMjUlIGxvd2VyIGxhdGVuY2llcyBhcyBjb21wYXJlZCB0byB0aGUgcHJldmlvdXMgQ29tbWFuZCBSKyB2ZXJzaW9uLCB3aGlsZSBrZWVwaW5nIHRoZSBoYXJkd2FyZSBmb290cHJpbnQgdGhlIHNhbWUuXG5cblJlYWQgdGhlIGxhdW5jaCBwb3N0IFtoZXJlXShodHRwczovL2RvY3MuY29oZXJlLmNvbS9jaGFuZ2Vsb2cvY29tbWFuZC1nZXRzLXJlZnJlc2hlZCkuXG5cblVzZSBvZiB0aGlzIG1vZGVsIGlzIHN1YmplY3QgdG8gQ29oZXJlJ3MgW1VzYWdlIFBvbGljeV0oaHR0cHM6Ly9kb2NzLmNvaGVyZS5jb20vZG9jcy91c2FnZS1wb2xpY3kpIGFuZCBbU2FhUyBBZ3JlZW1lbnRdKGh0dHBzOi8vY29oZXJlLmNvbS9zYWFzLWFncmVlbWVudCkuIiwiY29udGV4dF9sZW5ndGgiOjEyODAwMCwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dC0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6IkNvaGVyZSIsImluc3RydWN0X3R5cGUiOm51bGx9LCJwcmljaW5nIjp7InByb21wdCI6IjAuMDAwMDAyNSIsImNvbXBsZXRpb24iOiIwLjAwMDAxIiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoxMjgwMDAsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6NDAwMCwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6ImNvaGVyZS9jb21tYW5kLXItMDgtMjAyNCIsIm5hbWUiOiJDb2hlcmU6IENvbW1hbmQgUiAoMDgtMjAyNCkiLCJjcmVhdGVkIjoxNzI0OTc2MDAwLCJkZXNjcmlwdGlvbiI6ImNvbW1hbmQtci0wOC0yMDI0IGlzIGFuIHVwZGF0ZSBvZiB0aGUgW0NvbW1hbmQgUl0oL21vZGVscy9jb2hlcmUvY29tbWFuZC1yKSB3aXRoIGltcHJvdmVkIHBlcmZvcm1hbmNlIGZvciBtdWx0aWxpbmd1YWwgcmV0cmlldmFsLWF1Z21lbnRlZCBnZW5lcmF0aW9uIChSQUcpIGFuZCB0b29sIHVzZS4gTW9yZSBicm9hZGx5LCBpdCBpcyBiZXR0ZXIgYXQgbWF0aCwgY29kZSBhbmQgcmVhc29uaW5nIGFuZCBpcyBjb21wZXRpdGl2ZSB3aXRoIHRoZSBwcmV2aW91cyB2ZXJzaW9uIG9mIHRoZSBsYXJnZXIgQ29tbWFuZCBSKyBtb2RlbC5cblxuUmVhZCB0aGUgbGF1bmNoIHBvc3QgW2hlcmVdKGh0dHBzOi8vZG9jcy5jb2hlcmUuY29tL2NoYW5nZWxvZy9jb21tYW5kLWdldHMtcmVmcmVzaGVkKS5cblxuVXNlIG9mIHRoaXMgbW9kZWwgaXMgc3ViamVjdCB0byBDb2hlcmUncyBbVXNhZ2UgUG9saWN5XShodHRwczovL2RvY3MuY29oZXJlLmNvbS9kb2NzL3VzYWdlLXBvbGljeSkgYW5kIFtTYWFTIEFncmVlbWVudF0oaHR0cHM6Ly9jb2hlcmUuY29tL3NhYXMtYWdyZWVtZW50KS4iLCJjb250ZXh0X2xlbmd0aCI6MTI4MDAwLCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiQ29oZXJlIiwiaW5zdHJ1Y3RfdHlwZSI6bnVsbH0sInByaWNpbmciOnsicHJvbXB0IjoiMC4wMDAwMDAxNSIsImNvbXBsZXRpb24iOiIwLjAwMDAwMDYiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjEyODAwMCwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjo0MDAwLCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoicXdlbi9xd2VuLTIuNS12bC03Yi1pbnN0cnVjdDpmcmVlIiwibmFtZSI6IlF3ZW46IFF3ZW4yLjUtVkwgN0IgSW5zdHJ1Y3QgKGZyZWUpIiwiY3JlYXRlZCI6MTcyNDgwMzIwMCwiZGVzY3JpcHRpb24iOiJRd2VuMi41IFZMIDdCIGlzIGEgbXVsdGltb2RhbCBMTE0gZnJvbSB0aGUgUXdlbiBUZWFtIHdpdGggdGhlIGZvbGxvd2luZyBrZXkgZW5oYW5jZW1lbnRzOlxuXG4tIFNvVEEgdW5kZXJzdGFuZGluZyBvZiBpbWFnZXMgb2YgdmFyaW91cyByZXNvbHV0aW9uICYgcmF0aW86IFF3ZW4yLjUtVkwgYWNoaWV2ZXMgc3RhdGUtb2YtdGhlLWFydCBwZXJmb3JtYW5jZSBvbiB2aXN1YWwgdW5kZXJzdGFuZGluZyBiZW5jaG1hcmtzLCBpbmNsdWRpbmcgTWF0aFZpc3RhLCBEb2NWUUEsIFJlYWxXb3JsZFFBLCBNVFZRQSwgZXRjLlxuXG4tIFVuZGVyc3RhbmRpbmcgdmlkZW9zIG9mIDIwbWluKzogUXdlbjIuNS1WTCBjYW4gdW5kZXJzdGFuZCB2aWRlb3Mgb3ZlciAyMCBtaW51dGVzIGZvciBoaWdoLXF1YWxpdHkgdmlkZW8tYmFzZWQgcXVlc3Rpb24gYW5zd2VyaW5nLCBkaWFsb2csIGNvbnRlbnQgY3JlYXRpb24sIGV0Yy5cblxuLSBBZ2VudCB0aGF0IGNhbiBvcGVyYXRlIHlvdXIgbW9iaWxlcywgcm9ib3RzLCBldGMuOiB3aXRoIHRoZSBhYmlsaXRpZXMgb2YgY29tcGxleCByZWFzb25pbmcgYW5kIGRlY2lzaW9uIG1ha2luZywgUXdlbjIuNS1WTCBjYW4gYmUgaW50ZWdyYXRlZCB3aXRoIGRldmljZXMgbGlrZSBtb2JpbGUgcGhvbmVzLCByb2JvdHMsIGV0Yy4sIGZvciBhdXRvbWF0aWMgb3BlcmF0aW9uIGJhc2VkIG9uIHZpc3VhbCBlbnZpcm9ubWVudCBhbmQgdGV4dCBpbnN0cnVjdGlvbnMuXG5cbi0gTXVsdGlsaW5ndWFsIFN1cHBvcnQ6IHRvIHNlcnZlIGdsb2JhbCB1c2VycywgYmVzaWRlcyBFbmdsaXNoIGFuZCBDaGluZXNlLCBRd2VuMi41LVZMIG5vdyBzdXBwb3J0cyB0aGUgdW5kZXJzdGFuZGluZyBvZiB0ZXh0cyBpbiBkaWZmZXJlbnQgbGFuZ3VhZ2VzIGluc2lkZSBpbWFnZXMsIGluY2x1ZGluZyBtb3N0IEV1cm9wZWFuIGxhbmd1YWdlcywgSmFwYW5lc2UsIEtvcmVhbiwgQXJhYmljLCBWaWV0bmFtZXNlLCBldGMuXG5cbkZvciBtb3JlIGRldGFpbHMsIHNlZSB0aGlzIFtibG9nIHBvc3RdKGh0dHBzOi8vcXdlbmxtLmdpdGh1Yi5pby9ibG9nL3F3ZW4yLXZsLykgYW5kIFtHaXRIdWIgcmVwb10oaHR0cHM6Ly9naXRodWIuY29tL1F3ZW5MTS9Rd2VuMi1WTCkuXG5cblVzYWdlIG9mIHRoaXMgbW9kZWwgaXMgc3ViamVjdCB0byBbVG9uZ3lpIFFpYW53ZW4gTElDRU5TRSBBR1JFRU1FTlRdKGh0dHBzOi8vaHVnZ2luZ2ZhY2UuY28vUXdlbi9Rd2VuMS41LTExMEItQ2hhdC9ibG9iL21haW4vTElDRU5TRSkuIiwiY29udGV4dF9sZW5ndGgiOjY0MDAwLCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0K2ltYWdlLT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0IiwiaW1hZ2UiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJRd2VuIiwiaW5zdHJ1Y3RfdHlwZSI6bnVsbH0sInByaWNpbmciOnsicHJvbXB0IjoiMCIsImNvbXBsZXRpb24iOiIwIiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjo2NDAwMCwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjo2NDAwMCwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6InF3ZW4vcXdlbi0yLjUtdmwtN2ItaW5zdHJ1Y3QiLCJuYW1lIjoiUXdlbjogUXdlbjIuNS1WTCA3QiBJbnN0cnVjdCIsImNyZWF0ZWQiOjE3MjQ4MDMyMDAsImRlc2NyaXB0aW9uIjoiUXdlbjIuNSBWTCA3QiBpcyBhIG11bHRpbW9kYWwgTExNIGZyb20gdGhlIFF3ZW4gVGVhbSB3aXRoIHRoZSBmb2xsb3dpbmcga2V5IGVuaGFuY2VtZW50czpcblxuLSBTb1RBIHVuZGVyc3RhbmRpbmcgb2YgaW1hZ2VzIG9mIHZhcmlvdXMgcmVzb2x1dGlvbiAmIHJhdGlvOiBRd2VuMi41LVZMIGFjaGlldmVzIHN0YXRlLW9mLXRoZS1hcnQgcGVyZm9ybWFuY2Ugb24gdmlzdWFsIHVuZGVyc3RhbmRpbmcgYmVuY2htYXJrcywgaW5jbHVkaW5nIE1hdGhWaXN0YSwgRG9jVlFBLCBSZWFsV29ybGRRQSwgTVRWUUEsIGV0Yy5cblxuLSBVbmRlcnN0YW5kaW5nIHZpZGVvcyBvZiAyMG1pbis6IFF3ZW4yLjUtVkwgY2FuIHVuZGVyc3RhbmQgdmlkZW9zIG92ZXIgMjAgbWludXRlcyBmb3IgaGlnaC1xdWFsaXR5IHZpZGVvLWJhc2VkIHF1ZXN0aW9uIGFuc3dlcmluZywgZGlhbG9nLCBjb250ZW50IGNyZWF0aW9uLCBldGMuXG5cbi0gQWdlbnQgdGhhdCBjYW4gb3BlcmF0ZSB5b3VyIG1vYmlsZXMsIHJvYm90cywgZXRjLjogd2l0aCB0aGUgYWJpbGl0aWVzIG9mIGNvbXBsZXggcmVhc29uaW5nIGFuZCBkZWNpc2lvbiBtYWtpbmcsIFF3ZW4yLjUtVkwgY2FuIGJlIGludGVncmF0ZWQgd2l0aCBkZXZpY2VzIGxpa2UgbW9iaWxlIHBob25lcywgcm9ib3RzLCBldGMuLCBmb3IgYXV0b21hdGljIG9wZXJhdGlvbiBiYXNlZCBvbiB2aXN1YWwgZW52aXJvbm1lbnQgYW5kIHRleHQgaW5zdHJ1Y3Rpb25zLlxuXG4tIE11bHRpbGluZ3VhbCBTdXBwb3J0OiB0byBzZXJ2ZSBnbG9iYWwgdXNlcnMsIGJlc2lkZXMgRW5nbGlzaCBhbmQgQ2hpbmVzZSwgUXdlbjIuNS1WTCBub3cgc3VwcG9ydHMgdGhlIHVuZGVyc3RhbmRpbmcgb2YgdGV4dHMgaW4gZGlmZmVyZW50IGxhbmd1YWdlcyBpbnNpZGUgaW1hZ2VzLCBpbmNsdWRpbmcgbW9zdCBFdXJvcGVhbiBsYW5ndWFnZXMsIEphcGFuZXNlLCBLb3JlYW4sIEFyYWJpYywgVmlldG5hbWVzZSwgZXRjLlxuXG5Gb3IgbW9yZSBkZXRhaWxzLCBzZWUgdGhpcyBbYmxvZyBwb3N0XShodHRwczovL3F3ZW5sbS5naXRodWIuaW8vYmxvZy9xd2VuMi12bC8pIGFuZCBbR2l0SHViIHJlcG9dKGh0dHBzOi8vZ2l0aHViLmNvbS9Rd2VuTE0vUXdlbjItVkwpLlxuXG5Vc2FnZSBvZiB0aGlzIG1vZGVsIGlzIHN1YmplY3QgdG8gW1Rvbmd5aSBRaWFud2VuIExJQ0VOU0UgQUdSRUVNRU5UXShodHRwczovL2h1Z2dpbmdmYWNlLmNvL1F3ZW4vUXdlbjEuNS0xMTBCLUNoYXQvYmxvYi9tYWluL0xJQ0VOU0UpLiIsImNvbnRleHRfbGVuZ3RoIjozMjc2OCwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dCtpbWFnZS0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCIsImltYWdlIl0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiUXdlbiIsImluc3RydWN0X3R5cGUiOm51bGx9LCJwcmljaW5nIjp7InByb21wdCI6IjAuMDAwMDAwMiIsImNvbXBsZXRpb24iOiIwLjAwMDAwMDIiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMC4wMDAxNDQ1Iiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6MzI3NjgsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6bnVsbCwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6InNhbzEway9sMy4xLWV1cnlhbGUtNzBiIiwibmFtZSI6IlNhbzEwSzogTGxhbWEgMy4xIEV1cnlhbGUgNzBCIHYyLjIiLCJjcmVhdGVkIjoxNzI0ODAzMjAwLCJkZXNjcmlwdGlvbiI6IkV1cnlhbGUgTDMuMSA3MEIgdjIuMiBpcyBhIG1vZGVsIGZvY3VzZWQgb24gY3JlYXRpdmUgcm9sZXBsYXkgZnJvbSBbU2FvMTBrXShodHRwczovL2tvLWZpLmNvbS9zYW8xMGspLiBJdCBpcyB0aGUgc3VjY2Vzc29yIG9mIFtFdXJ5YWxlIEwzIDcwQiB2Mi4xXSgvbW9kZWxzL3NhbzEway9sMy1ldXJ5YWxlLTcwYikuIiwiY29udGV4dF9sZW5ndGgiOjEzMTA3MiwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dC0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6IkxsYW1hMyIsImluc3RydWN0X3R5cGUiOiJsbGFtYTMifSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMDciLCJjb21wbGV0aW9uIjoiMC4wMDAwMDA4IiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoxMzEwNzIsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6MTYzODQsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJnb29nbGUvZ2VtaW5pLWZsYXNoLTEuNS04Yi1leHAiLCJuYW1lIjoiR29vZ2xlOiBHZW1pbmkgMS41IEZsYXNoIDhCIEV4cGVyaW1lbnRhbCIsImNyZWF0ZWQiOjE3MjQ4MDMyMDAsImRlc2NyaXB0aW9uIjoiR2VtaW5pIEZsYXNoIDEuNSA4QiBFeHBlcmltZW50YWwgaXMgYW4gZXhwZXJpbWVudGFsLCA4QiBwYXJhbWV0ZXIgdmVyc2lvbiBvZiB0aGUgW0dlbWluaSBGbGFzaCAxLjVdKC9tb2RlbHMvZ29vZ2xlL2dlbWluaS1mbGFzaC0xLjUpIG1vZGVsLlxuXG5Vc2FnZSBvZiBHZW1pbmkgaXMgc3ViamVjdCB0byBHb29nbGUncyBbR2VtaW5pIFRlcm1zIG9mIFVzZV0oaHR0cHM6Ly9haS5nb29nbGUuZGV2L3Rlcm1zKS5cblxuI211bHRpbW9kYWxcblxuTm90ZTogVGhpcyBtb2RlbCBpcyBjdXJyZW50bHkgZXhwZXJpbWVudGFsIGFuZCBub3Qgc3VpdGFibGUgZm9yIHByb2R1Y3Rpb24gdXNlLWNhc2VzLCBhbmQgbWF5IGJlIGhlYXZpbHkgcmF0ZS1saW1pdGVkLiIsImNvbnRleHRfbGVuZ3RoIjoxMDAwMDAwLCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0K2ltYWdlLT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0IiwiaW1hZ2UiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJHZW1pbmkiLCJpbnN0cnVjdF90eXBlIjpudWxsfSwicHJpY2luZyI6eyJwcm9tcHQiOiIwIiwiY29tcGxldGlvbiI6IjAiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjEwMDAwMDAsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6ODE5MiwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6ImFpMjEvamFtYmEtMS01LW1pbmkiLCJuYW1lIjoiQUkyMTogSmFtYmEgMS41IE1pbmkiLCJjcmVhdGVkIjoxNzI0MzcxMjAwLCJkZXNjcmlwdGlvbiI6IkphbWJhIDEuNSBNaW5pIGlzIHRoZSB3b3JsZCdzIGZpcnN0IHByb2R1Y3Rpb24tZ3JhZGUgTWFtYmEtYmFzZWQgbW9kZWwsIGNvbWJpbmluZyBTU00gYW5kIFRyYW5zZm9ybWVyIGFyY2hpdGVjdHVyZXMgZm9yIGEgMjU2SyBjb250ZXh0IHdpbmRvdyBhbmQgaGlnaCBlZmZpY2llbmN5LlxuXG5JdCB3b3JrcyB3aXRoIDkgbGFuZ3VhZ2VzIGFuZCBjYW4gaGFuZGxlIHZhcmlvdXMgd3JpdGluZyBhbmQgYW5hbHlzaXMgdGFza3MgYXMgd2VsbCBhcyBvciBiZXR0ZXIgdGhhbiBzaW1pbGFyIHNtYWxsIG1vZGVscy5cblxuVGhpcyBtb2RlbCB1c2VzIGxlc3MgY29tcHV0ZXIgbWVtb3J5IGFuZCB3b3JrcyBmYXN0ZXIgd2l0aCBsb25nZXIgdGV4dHMgdGhhbiBwcmV2aW91cyBkZXNpZ25zLlxuXG5SZWFkIHRoZWlyIFthbm5vdW5jZW1lbnRdKGh0dHBzOi8vd3d3LmFpMjEuY29tL2Jsb2cvYW5ub3VuY2luZy1qYW1iYS1tb2RlbC1mYW1pbHkpIHRvIGxlYXJuIG1vcmUuIiwiY29udGV4dF9sZW5ndGgiOjI1NjAwMCwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dC0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6Ik90aGVyIiwiaW5zdHJ1Y3RfdHlwZSI6bnVsbH0sInByaWNpbmciOnsicHJvbXB0IjoiMC4wMDAwMDAyIiwiY29tcGxldGlvbiI6IjAuMDAwMDAwNCIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6MjU2MDAwLCJtYXhfY29tcGxldGlvbl90b2tlbnMiOjQwOTYsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJhaTIxL2phbWJhLTEtNS1sYXJnZSIsIm5hbWUiOiJBSTIxOiBKYW1iYSAxLjUgTGFyZ2UiLCJjcmVhdGVkIjoxNzI0MzcxMjAwLCJkZXNjcmlwdGlvbiI6IkphbWJhIDEuNSBMYXJnZSBpcyBwYXJ0IG9mIEFJMjEncyBuZXcgZmFtaWx5IG9mIG9wZW4gbW9kZWxzLCBvZmZlcmluZyBzdXBlcmlvciBzcGVlZCwgZWZmaWNpZW5jeSwgYW5kIHF1YWxpdHkuXG5cbkl0IGZlYXR1cmVzIGEgMjU2SyBlZmZlY3RpdmUgY29udGV4dCB3aW5kb3csIHRoZSBsb25nZXN0IGFtb25nIG9wZW4gbW9kZWxzLCBlbmFibGluZyBpbXByb3ZlZCBwZXJmb3JtYW5jZSBvbiB0YXNrcyBsaWtlIGRvY3VtZW50IHN1bW1hcml6YXRpb24gYW5kIGFuYWx5c2lzLlxuXG5CdWlsdCBvbiBhIG5vdmVsIFNTTS1UcmFuc2Zvcm1lciBhcmNoaXRlY3R1cmUsIGl0IG91dHBlcmZvcm1zIGxhcmdlciBtb2RlbHMgbGlrZSBMbGFtYSAzLjEgNzBCIG9uIGJlbmNobWFya3Mgd2hpbGUgbWFpbnRhaW5pbmcgcmVzb3VyY2UgZWZmaWNpZW5jeS5cblxuUmVhZCB0aGVpciBbYW5ub3VuY2VtZW50XShodHRwczovL3d3dy5haTIxLmNvbS9ibG9nL2Fubm91bmNpbmctamFtYmEtbW9kZWwtZmFtaWx5KSB0byBsZWFybiBtb3JlLiIsImNvbnRleHRfbGVuZ3RoIjoyNTYwMDAsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJPdGhlciIsImluc3RydWN0X3R5cGUiOm51bGx9LCJwcmljaW5nIjp7InByb21wdCI6IjAuMDAwMDAyIiwiY29tcGxldGlvbiI6IjAuMDAwMDA4IiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoyNTYwMDAsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6NDA5NiwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6Im1pY3Jvc29mdC9waGktMy41LW1pbmktMTI4ay1pbnN0cnVjdCIsIm5hbWUiOiJNaWNyb3NvZnQ6IFBoaS0zLjUgTWluaSAxMjhLIEluc3RydWN0IiwiY3JlYXRlZCI6MTcyNDE5ODQwMCwiZGVzY3JpcHRpb24iOiJQaGktMy41IG1vZGVscyBhcmUgbGlnaHR3ZWlnaHQsIHN0YXRlLW9mLXRoZS1hcnQgb3BlbiBtb2RlbHMuIFRoZXNlIG1vZGVscyB3ZXJlIHRyYWluZWQgd2l0aCBQaGktMyBkYXRhc2V0cyB0aGF0IGluY2x1ZGUgYm90aCBzeW50aGV0aWMgZGF0YSBhbmQgdGhlIGZpbHRlcmVkLCBwdWJsaWNseSBhdmFpbGFibGUgd2Vic2l0ZXMgZGF0YSwgd2l0aCBhIGZvY3VzIG9uIGhpZ2ggcXVhbGl0eSBhbmQgcmVhc29uaW5nLWRlbnNlIHByb3BlcnRpZXMuIFBoaS0zLjUgTWluaSB1c2VzIDMuOEIgcGFyYW1ldGVycywgYW5kIGlzIGEgZGVuc2UgZGVjb2Rlci1vbmx5IHRyYW5zZm9ybWVyIG1vZGVsIHVzaW5nIHRoZSBzYW1lIHRva2VuaXplciBhcyBbUGhpLTMgTWluaV0oL21vZGVscy9taWNyb3NvZnQvcGhpLTMtbWluaS0xMjhrLWluc3RydWN0KS5cblxuVGhlIG1vZGVscyB1bmRlcndlbnQgYSByaWdvcm91cyBlbmhhbmNlbWVudCBwcm9jZXNzLCBpbmNvcnBvcmF0aW5nIGJvdGggc3VwZXJ2aXNlZCBmaW5lLXR1bmluZywgcHJveGltYWwgcG9saWN5IG9wdGltaXphdGlvbiwgYW5kIGRpcmVjdCBwcmVmZXJlbmNlIG9wdGltaXphdGlvbiB0byBlbnN1cmUgcHJlY2lzZSBpbnN0cnVjdGlvbiBhZGhlcmVuY2UgYW5kIHJvYnVzdCBzYWZldHkgbWVhc3VyZXMuIFdoZW4gYXNzZXNzZWQgYWdhaW5zdCBiZW5jaG1hcmtzIHRoYXQgdGVzdCBjb21tb24gc2Vuc2UsIGxhbmd1YWdlIHVuZGVyc3RhbmRpbmcsIG1hdGgsIGNvZGUsIGxvbmcgY29udGV4dCBhbmQgbG9naWNhbCByZWFzb25pbmcsIFBoaS0zLjUgbW9kZWxzIHNob3djYXNlZCByb2J1c3QgYW5kIHN0YXRlLW9mLXRoZS1hcnQgcGVyZm9ybWFuY2UgYW1vbmcgbW9kZWxzIHdpdGggbGVzcyB0aGFuIDEzIGJpbGxpb24gcGFyYW1ldGVycy4iLCJjb250ZXh0X2xlbmd0aCI6MTI4MDAwLCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiT3RoZXIiLCJpbnN0cnVjdF90eXBlIjoicGhpMyJ9LCJwcmljaW5nIjp7InByb21wdCI6IjAuMDAwMDAwMSIsImNvbXBsZXRpb24iOiIwLjAwMDAwMDEiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjEyODAwMCwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjpudWxsLCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoibm91c3Jlc2VhcmNoL2hlcm1lcy0zLWxsYW1hLTMuMS03MGIiLCJuYW1lIjoiTm91czogSGVybWVzIDMgNzBCIEluc3RydWN0IiwiY3JlYXRlZCI6MTcyMzkzOTIwMCwiZGVzY3JpcHRpb24iOiJIZXJtZXMgMyBpcyBhIGdlbmVyYWxpc3QgbGFuZ3VhZ2UgbW9kZWwgd2l0aCBtYW55IGltcHJvdmVtZW50cyBvdmVyIFtIZXJtZXMgMl0oL21vZGVscy9ub3VzcmVzZWFyY2gvbm91cy1oZXJtZXMtMi1taXN0cmFsLTdiLWRwbyksIGluY2x1ZGluZyBhZHZhbmNlZCBhZ2VudGljIGNhcGFiaWxpdGllcywgbXVjaCBiZXR0ZXIgcm9sZXBsYXlpbmcsIHJlYXNvbmluZywgbXVsdGktdHVybiBjb252ZXJzYXRpb24sIGxvbmcgY29udGV4dCBjb2hlcmVuY2UsIGFuZCBpbXByb3ZlbWVudHMgYWNyb3NzIHRoZSBib2FyZC5cblxuSGVybWVzIDMgNzBCIGlzIGEgY29tcGV0aXRpdmUsIGlmIG5vdCBzdXBlcmlvciBmaW5ldHVuZSBvZiB0aGUgW0xsYW1hLTMuMSA3MEIgZm91bmRhdGlvbiBtb2RlbF0oL21vZGVscy9tZXRhLWxsYW1hL2xsYW1hLTMuMS03MGItaW5zdHJ1Y3QpLCBmb2N1c2VkIG9uIGFsaWduaW5nIExMTXMgdG8gdGhlIHVzZXIsIHdpdGggcG93ZXJmdWwgc3RlZXJpbmcgY2FwYWJpbGl0aWVzIGFuZCBjb250cm9sIGdpdmVuIHRvIHRoZSBlbmQgdXNlci5cblxuVGhlIEhlcm1lcyAzIHNlcmllcyBidWlsZHMgYW5kIGV4cGFuZHMgb24gdGhlIEhlcm1lcyAyIHNldCBvZiBjYXBhYmlsaXRpZXMsIGluY2x1ZGluZyBtb3JlIHBvd2VyZnVsIGFuZCByZWxpYWJsZSBmdW5jdGlvbiBjYWxsaW5nIGFuZCBzdHJ1Y3R1cmVkIG91dHB1dCBjYXBhYmlsaXRpZXMsIGdlbmVyYWxpc3QgYXNzaXN0YW50IGNhcGFiaWxpdGllcywgYW5kIGltcHJvdmVkIGNvZGUgZ2VuZXJhdGlvbiBza2lsbHMuIiwiY29udGV4dF9sZW5ndGgiOjEzMTA3MiwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dC0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6IkxsYW1hMyIsImluc3RydWN0X3R5cGUiOiJjaGF0bWwifSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMDEyIiwiY29tcGxldGlvbiI6IjAuMDAwMDAwMyIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6MTMxMDcyLCJtYXhfY29tcGxldGlvbl90b2tlbnMiOjEzMTA3MiwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6Im5vdXNyZXNlYXJjaC9oZXJtZXMtMy1sbGFtYS0zLjEtNDA1YiIsIm5hbWUiOiJOb3VzOiBIZXJtZXMgMyA0MDVCIEluc3RydWN0IiwiY3JlYXRlZCI6MTcyMzc2NjQwMCwiZGVzY3JpcHRpb24iOiJIZXJtZXMgMyBpcyBhIGdlbmVyYWxpc3QgbGFuZ3VhZ2UgbW9kZWwgd2l0aCBtYW55IGltcHJvdmVtZW50cyBvdmVyIEhlcm1lcyAyLCBpbmNsdWRpbmcgYWR2YW5jZWQgYWdlbnRpYyBjYXBhYmlsaXRpZXMsIG11Y2ggYmV0dGVyIHJvbGVwbGF5aW5nLCByZWFzb25pbmcsIG11bHRpLXR1cm4gY29udmVyc2F0aW9uLCBsb25nIGNvbnRleHQgY29oZXJlbmNlLCBhbmQgaW1wcm92ZW1lbnRzIGFjcm9zcyB0aGUgYm9hcmQuXG5cbkhlcm1lcyAzIDQwNUIgaXMgYSBmcm9udGllci1sZXZlbCwgZnVsbC1wYXJhbWV0ZXIgZmluZXR1bmUgb2YgdGhlIExsYW1hLTMuMSA0MDVCIGZvdW5kYXRpb24gbW9kZWwsIGZvY3VzZWQgb24gYWxpZ25pbmcgTExNcyB0byB0aGUgdXNlciwgd2l0aCBwb3dlcmZ1bCBzdGVlcmluZyBjYXBhYmlsaXRpZXMgYW5kIGNvbnRyb2wgZ2l2ZW4gdG8gdGhlIGVuZCB1c2VyLlxuXG5UaGUgSGVybWVzIDMgc2VyaWVzIGJ1aWxkcyBhbmQgZXhwYW5kcyBvbiB0aGUgSGVybWVzIDIgc2V0IG9mIGNhcGFiaWxpdGllcywgaW5jbHVkaW5nIG1vcmUgcG93ZXJmdWwgYW5kIHJlbGlhYmxlIGZ1bmN0aW9uIGNhbGxpbmcgYW5kIHN0cnVjdHVyZWQgb3V0cHV0IGNhcGFiaWxpdGllcywgZ2VuZXJhbGlzdCBhc3Npc3RhbnQgY2FwYWJpbGl0aWVzLCBhbmQgaW1wcm92ZWQgY29kZSBnZW5lcmF0aW9uIHNraWxscy5cblxuSGVybWVzIDMgaXMgY29tcGV0aXRpdmUsIGlmIG5vdCBzdXBlcmlvciwgdG8gTGxhbWEtMy4xIEluc3RydWN0IG1vZGVscyBhdCBnZW5lcmFsIGNhcGFiaWxpdGllcywgd2l0aCB2YXJ5aW5nIHN0cmVuZ3RocyBhbmQgd2Vha25lc3NlcyBhdHRyaWJ1dGFibGUgYmV0d2VlbiB0aGUgdHdvLiIsImNvbnRleHRfbGVuZ3RoIjoxMzEwNzIsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJMbGFtYTMiLCJpbnN0cnVjdF90eXBlIjoiY2hhdG1sIn0sInByaWNpbmciOnsicHJvbXB0IjoiMC4wMDAwMDA4IiwiY29tcGxldGlvbiI6IjAuMDAwMDAwOCIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6MTMxMDcyLCJtYXhfY29tcGxldGlvbl90b2tlbnMiOjEzMTA3MiwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6Im9wZW5haS9jaGF0Z3B0LTRvLWxhdGVzdCIsIm5hbWUiOiJPcGVuQUk6IENoYXRHUFQtNG8iLCJjcmVhdGVkIjoxNzIzNTkzNjAwLCJkZXNjcmlwdGlvbiI6Ik9wZW5BSSBDaGF0R1BUIDRvIGlzIGNvbnRpbnVhbGx5IHVwZGF0ZWQgYnkgT3BlbkFJIHRvIHBvaW50IHRvIHRoZSBjdXJyZW50IHZlcnNpb24gb2YgR1BULTRvIHVzZWQgYnkgQ2hhdEdQVC4gSXQgdGhlcmVmb3JlIGRpZmZlcnMgc2xpZ2h0bHkgZnJvbSB0aGUgQVBJIHZlcnNpb24gb2YgW0dQVC00b10oL21vZGVscy9vcGVuYWkvZ3B0LTRvKSBpbiB0aGF0IGl0IGhhcyBhZGRpdGlvbmFsIFJMSEYuIEl0IGlzIGludGVuZGVkIGZvciByZXNlYXJjaCBhbmQgZXZhbHVhdGlvbi5cblxuT3BlbkFJIG5vdGVzIHRoYXQgdGhpcyBtb2RlbCBpcyBub3Qgc3VpdGVkIGZvciBwcm9kdWN0aW9uIHVzZS1jYXNlcyBhcyBpdCBtYXkgYmUgcmVtb3ZlZCBvciByZWRpcmVjdGVkIHRvIGFub3RoZXIgbW9kZWwgaW4gdGhlIGZ1dHVyZS4iLCJjb250ZXh0X2xlbmd0aCI6MTI4MDAwLCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0K2ltYWdlLT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0IiwiaW1hZ2UiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJHUFQiLCJpbnN0cnVjdF90eXBlIjpudWxsfSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwNSIsImNvbXBsZXRpb24iOiIwLjAwMDAxNSIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwLjAwNzIyNSIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjEyODAwMCwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjoxNjM4NCwiaXNfbW9kZXJhdGVkIjp0cnVlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoic2FvMTBrL2wzLWx1bmFyaXMtOGIiLCJuYW1lIjoiU2FvMTBLOiBMbGFtYSAzIDhCIEx1bmFyaXMiLCJjcmVhdGVkIjoxNzIzNTA3MjAwLCJkZXNjcmlwdGlvbiI6Ikx1bmFyaXMgOEIgaXMgYSB2ZXJzYXRpbGUgZ2VuZXJhbGlzdCBhbmQgcm9sZXBsYXlpbmcgbW9kZWwgYmFzZWQgb24gTGxhbWEgMy4gSXQncyBhIHN0cmF0ZWdpYyBtZXJnZSBvZiBtdWx0aXBsZSBtb2RlbHMsIGRlc2lnbmVkIHRvIGJhbGFuY2UgY3JlYXRpdml0eSB3aXRoIGltcHJvdmVkIGxvZ2ljIGFuZCBnZW5lcmFsIGtub3dsZWRnZS5cblxuQ3JlYXRlZCBieSBbU2FvMTBrXShodHRwczovL2h1Z2dpbmdmYWNlLmNvL1NhbzEwayksIHRoaXMgbW9kZWwgYWltcyB0byBvZmZlciBhbiBpbXByb3ZlZCBleHBlcmllbmNlIG92ZXIgU3RoZW5vIHYzLjIsIHdpdGggZW5oYW5jZWQgY3JlYXRpdml0eSBhbmQgbG9naWNhbCByZWFzb25pbmcuXG5cbkZvciBiZXN0IHJlc3VsdHMsIHVzZSB3aXRoIExsYW1hIDMgSW5zdHJ1Y3QgY29udGV4dCB0ZW1wbGF0ZSwgdGVtcGVyYXR1cmUgMS40LCBhbmQgbWluX3AgMC4xLiIsImNvbnRleHRfbGVuZ3RoIjo4MTkyLCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiTGxhbWEzIiwiaW5zdHJ1Y3RfdHlwZSI6ImxsYW1hMyJ9LCJwcmljaW5nIjp7InByb21wdCI6IjAuMDAwMDAwMDIiLCJjb21wbGV0aW9uIjoiMC4wMDAwMDAwNSIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6ODE5MiwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjpudWxsLCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoiYWV0aGVyd2lpbmcvbW4tc3RhcmNhbm5vbi0xMmIiLCJuYW1lIjoiQWV0aGVyd2lpbmc6IFN0YXJjYW5ub24gMTJCIiwiY3JlYXRlZCI6MTcyMzUwNzIwMCwiZGVzY3JpcHRpb24iOiJTdGFyY2Fubm9uIDEyQiB2MiBpcyBhIGNyZWF0aXZlIHJvbGVwbGF5IGFuZCBzdG9yeSB3cml0aW5nIG1vZGVsLCBiYXNlZCBvbiBNaXN0cmFsIE5lbW8sIHVzaW5nIFtub3RoaW5naWlzcmVhbC9tbi1jZWxlc3RlLTEyYl0oL25vdGhpbmdpaXNyZWFsL21uLWNlbGVzdGUtMTJiKSBhcyBhIGJhc2UsIHdpdGggW2ludGVydml0ZW5zL21pbmktbWFnbnVtLTEyYi12MS4xXShodHRwczovL2h1Z2dpbmdmYWNlLmNvL2ludGVydml0ZW5zL21pbmktbWFnbnVtLTEyYi12MS4xKSBtZXJnZWQgaW4gdXNpbmcgdGhlIFtUSUVTXShodHRwczovL2FyeGl2Lm9yZy9hYnMvMjMwNi4wMTcwOCkgbWV0aG9kLlxuXG5BbHRob3VnaCBtb3JlIHNpbWlsYXIgdG8gTWFnbnVtIG92ZXJhbGwsIHRoZSBtb2RlbCByZW1haW5zIHZlcnkgY3JlYXRpdmUsIHdpdGggYSBwbGVhc2FudCB3cml0aW5nIHN0eWxlLiBJdCBpcyByZWNvbW1lbmRlZCBmb3IgcGVvcGxlIHdhbnRpbmcgbW9yZSB2YXJpZXR5IHRoYW4gTWFnbnVtLCBhbmQgeWV0IG1vcmUgdmVyYm9zZSBwcm9zZSB0aGFuIENlbGVzdGUuIiwiY29udGV4dF9sZW5ndGgiOjE2Mzg0LCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiTWlzdHJhbCIsImluc3RydWN0X3R5cGUiOiJjaGF0bWwifSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMDgiLCJjb21wbGV0aW9uIjoiMC4wMDAwMDEyIiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoxNjM4NCwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjo0MDk2LCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoib3BlbmFpL2dwdC00by0yMDI0LTA4LTA2IiwibmFtZSI6Ik9wZW5BSTogR1BULTRvICgyMDI0LTA4LTA2KSIsImNyZWF0ZWQiOjE3MjI5MDI0MDAsImRlc2NyaXB0aW9uIjoiVGhlIDIwMjQtMDgtMDYgdmVyc2lvbiBvZiBHUFQtNG8gb2ZmZXJzIGltcHJvdmVkIHBlcmZvcm1hbmNlIGluIHN0cnVjdHVyZWQgb3V0cHV0cywgd2l0aCB0aGUgYWJpbGl0eSB0byBzdXBwbHkgYSBKU09OIHNjaGVtYSBpbiB0aGUgcmVzcG9uZV9mb3JtYXQuIFJlYWQgbW9yZSBbaGVyZV0oaHR0cHM6Ly9vcGVuYWkuY29tL2luZGV4L2ludHJvZHVjaW5nLXN0cnVjdHVyZWQtb3V0cHV0cy1pbi10aGUtYXBpLykuXG5cbkdQVC00byAoXCJvXCIgZm9yIFwib21uaVwiKSBpcyBPcGVuQUkncyBsYXRlc3QgQUkgbW9kZWwsIHN1cHBvcnRpbmcgYm90aCB0ZXh0IGFuZCBpbWFnZSBpbnB1dHMgd2l0aCB0ZXh0IG91dHB1dHMuIEl0IG1haW50YWlucyB0aGUgaW50ZWxsaWdlbmNlIGxldmVsIG9mIFtHUFQtNCBUdXJib10oL21vZGVscy9vcGVuYWkvZ3B0LTQtdHVyYm8pIHdoaWxlIGJlaW5nIHR3aWNlIGFzIGZhc3QgYW5kIDUwJSBtb3JlIGNvc3QtZWZmZWN0aXZlLiBHUFQtNG8gYWxzbyBvZmZlcnMgaW1wcm92ZWQgcGVyZm9ybWFuY2UgaW4gcHJvY2Vzc2luZyBub24tRW5nbGlzaCBsYW5ndWFnZXMgYW5kIGVuaGFuY2VkIHZpc3VhbCBjYXBhYmlsaXRpZXMuXG5cbkZvciBiZW5jaG1hcmtpbmcgYWdhaW5zdCBvdGhlciBtb2RlbHMsIGl0IHdhcyBicmllZmx5IGNhbGxlZCBbXCJpbS1hbHNvLWEtZ29vZC1ncHQyLWNoYXRib3RcIl0oaHR0cHM6Ly90d2l0dGVyLmNvbS9MaWFtRmVkdXMvc3RhdHVzLzE3OTAwNjQ5NjM5NjYzNzAyMDkpIiwiY29udGV4dF9sZW5ndGgiOjEyODAwMCwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dCtpbWFnZS0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCIsImltYWdlIl0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiR1BUIiwiaW5zdHJ1Y3RfdHlwZSI6bnVsbH0sInByaWNpbmciOnsicHJvbXB0IjoiMC4wMDAwMDI1IiwiY29tcGxldGlvbiI6IjAuMDAwMDEiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMC4wMDM2MTMiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAiLCJpbnB1dF9jYWNoZV9yZWFkIjoiMC4wMDAwMDEyNSJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjEyODAwMCwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjoxNjM4NCwiaXNfbW9kZXJhdGVkIjp0cnVlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoibWV0YS1sbGFtYS9sbGFtYS0zLjEtNDA1YjpmcmVlIiwibmFtZSI6Ik1ldGE6IExsYW1hIDMuMSA0MDVCIChiYXNlKSAoZnJlZSkiLCJjcmVhdGVkIjoxNzIyNTU2ODAwLCJkZXNjcmlwdGlvbiI6Ik1ldGEncyBsYXRlc3QgY2xhc3Mgb2YgbW9kZWwgKExsYW1hIDMuMSkgbGF1bmNoZWQgd2l0aCBhIHZhcmlldHkgb2Ygc2l6ZXMgJiBmbGF2b3JzLiBUaGlzIGlzIHRoZSBiYXNlIDQwNUIgcHJlLXRyYWluZWQgdmVyc2lvbi5cblxuSXQgaGFzIGRlbW9uc3RyYXRlZCBzdHJvbmcgcGVyZm9ybWFuY2UgY29tcGFyZWQgdG8gbGVhZGluZyBjbG9zZWQtc291cmNlIG1vZGVscyBpbiBodW1hbiBldmFsdWF0aW9ucy5cblxuVG8gcmVhZCBtb3JlIGFib3V0IHRoZSBtb2RlbCByZWxlYXNlLCBbY2xpY2sgaGVyZV0oaHR0cHM6Ly9haS5tZXRhLmNvbS9ibG9nL21ldGEtbGxhbWEtMy8pLiBVc2FnZSBvZiB0aGlzIG1vZGVsIGlzIHN1YmplY3QgdG8gW01ldGEncyBBY2NlcHRhYmxlIFVzZSBQb2xpY3ldKGh0dHBzOi8vbGxhbWEubWV0YS5jb20vbGxhbWEzL3VzZS1wb2xpY3kvKS4iLCJjb250ZXh0X2xlbmd0aCI6NjQwMDAsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJMbGFtYTMiLCJpbnN0cnVjdF90eXBlIjoibm9uZSJ9LCJwcmljaW5nIjp7InByb21wdCI6IjAiLCJjb21wbGV0aW9uIjoiMCIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6NjQwMDAsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6bnVsbCwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6Im1ldGEtbGxhbWEvbGxhbWEtMy4xLTQwNWIiLCJuYW1lIjoiTWV0YTogTGxhbWEgMy4xIDQwNUIgKGJhc2UpIiwiY3JlYXRlZCI6MTcyMjU1NjgwMCwiZGVzY3JpcHRpb24iOiJNZXRhJ3MgbGF0ZXN0IGNsYXNzIG9mIG1vZGVsIChMbGFtYSAzLjEpIGxhdW5jaGVkIHdpdGggYSB2YXJpZXR5IG9mIHNpemVzICYgZmxhdm9ycy4gVGhpcyBpcyB0aGUgYmFzZSA0MDVCIHByZS10cmFpbmVkIHZlcnNpb24uXG5cbkl0IGhhcyBkZW1vbnN0cmF0ZWQgc3Ryb25nIHBlcmZvcm1hbmNlIGNvbXBhcmVkIHRvIGxlYWRpbmcgY2xvc2VkLXNvdXJjZSBtb2RlbHMgaW4gaHVtYW4gZXZhbHVhdGlvbnMuXG5cblRvIHJlYWQgbW9yZSBhYm91dCB0aGUgbW9kZWwgcmVsZWFzZSwgW2NsaWNrIGhlcmVdKGh0dHBzOi8vYWkubWV0YS5jb20vYmxvZy9tZXRhLWxsYW1hLTMvKS4gVXNhZ2Ugb2YgdGhpcyBtb2RlbCBpcyBzdWJqZWN0IHRvIFtNZXRhJ3MgQWNjZXB0YWJsZSBVc2UgUG9saWN5XShodHRwczovL2xsYW1hLm1ldGEuY29tL2xsYW1hMy91c2UtcG9saWN5LykuIiwiY29udGV4dF9sZW5ndGgiOjMyNzY4LCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiTGxhbWEzIiwiaW5zdHJ1Y3RfdHlwZSI6Im5vbmUifSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMiIsImNvbXBsZXRpb24iOiIwLjAwMDAwMiIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6MzI3NjgsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6bnVsbCwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6Im5vdGhpbmdpaXNyZWFsL21uLWNlbGVzdGUtMTJiIiwibmFtZSI6Ik1pc3RyYWwgTmVtbyAxMkIgQ2VsZXN0ZSIsImNyZWF0ZWQiOjE3MjI1NTY4MDAsImRlc2NyaXB0aW9uIjoiQSBzcGVjaWFsaXplZCBzdG9yeSB3cml0aW5nIGFuZCByb2xlcGxheWluZyBtb2RlbCBiYXNlZCBvbiBNaXN0cmFsJ3MgTmVNbyAxMkIgSW5zdHJ1Y3QuIEZpbmUtdHVuZWQgb24gY3VyYXRlZCBkYXRhc2V0cyBpbmNsdWRpbmcgUmVkZGl0IFdyaXRpbmcgUHJvbXB0cyBhbmQgT3B1cyBJbnN0cnVjdCAyNUsuXG5cblRoaXMgbW9kZWwgZXhjZWxzIGF0IGNyZWF0aXZlIHdyaXRpbmcsIG9mZmVyaW5nIGltcHJvdmVkIE5TRlcgY2FwYWJpbGl0aWVzLCB3aXRoIHNtYXJ0ZXIgYW5kIG1vcmUgYWN0aXZlIG5hcnJhdGlvbi4gSXQgZGVtb25zdHJhdGVzIHJlbWFya2FibGUgdmVyc2F0aWxpdHkgaW4gYm90aCBTRlcgYW5kIE5TRlcgc2NlbmFyaW9zLCB3aXRoIHN0cm9uZyBPdXQgb2YgQ2hhcmFjdGVyIChPT0MpIHN0ZWVyaW5nIGNhcGFiaWxpdGllcywgYWxsb3dpbmcgZmluZS10dW5lZCBjb250cm9sIG92ZXIgbmFycmF0aXZlIGRpcmVjdGlvbiBhbmQgY2hhcmFjdGVyIGJlaGF2aW9yLlxuXG5DaGVjayBvdXQgdGhlIG1vZGVsJ3MgW0h1Z2dpbmdGYWNlIHBhZ2VdKGh0dHBzOi8vaHVnZ2luZ2ZhY2UuY28vbm90aGluZ2lpc3JlYWwvTU4tMTJCLUNlbGVzdGUtVjEuOSkgZm9yIGRldGFpbHMgb24gd2hhdCBwYXJhbWV0ZXJzIGFuZCBwcm9tcHRzIHdvcmsgYmVzdCEiLCJjb250ZXh0X2xlbmd0aCI6MTYzODQsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJNaXN0cmFsIiwiaW5zdHJ1Y3RfdHlwZSI6ImNoYXRtbCJ9LCJwcmljaW5nIjp7InByb21wdCI6IjAuMDAwMDAwOCIsImNvbXBsZXRpb24iOiIwLjAwMDAwMTIiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjE2Mzg0LCJtYXhfY29tcGxldGlvbl90b2tlbnMiOjQwOTYsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJwZXJwbGV4aXR5L2xsYW1hLTMuMS1zb25hci1zbWFsbC0xMjhrLW9ubGluZSIsIm5hbWUiOiJQZXJwbGV4aXR5OiBMbGFtYSAzLjEgU29uYXIgOEIgT25saW5lIiwiY3JlYXRlZCI6MTcyMjQ3MDQwMCwiZGVzY3JpcHRpb24iOiJMbGFtYSAzLjEgU29uYXIgaXMgUGVycGxleGl0eSdzIGxhdGVzdCBtb2RlbCBmYW1pbHkuIEl0IHN1cnBhc3NlcyB0aGVpciBlYXJsaWVyIFNvbmFyIG1vZGVscyBpbiBjb3N0LWVmZmljaWVuY3ksIHNwZWVkLCBhbmQgcGVyZm9ybWFuY2UuXG5cblRoaXMgaXMgdGhlIG9ubGluZSB2ZXJzaW9uIG9mIHRoZSBbb2ZmbGluZSBjaGF0IG1vZGVsXSgvbW9kZWxzL3BlcnBsZXhpdHkvbGxhbWEtMy4xLXNvbmFyLXNtYWxsLTEyOGstY2hhdCkuIEl0IGlzIGZvY3VzZWQgb24gZGVsaXZlcmluZyBoZWxwZnVsLCB1cC10by1kYXRlLCBhbmQgZmFjdHVhbCByZXNwb25zZXMuICNvbmxpbmUiLCJjb250ZXh0X2xlbmd0aCI6MTI3MDcyLCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiTGxhbWEzIiwiaW5zdHJ1Y3RfdHlwZSI6bnVsbH0sInByaWNpbmciOnsicHJvbXB0IjoiMC4wMDAwMDAyIiwiY29tcGxldGlvbiI6IjAuMDAwMDAwMiIsInJlcXVlc3QiOiIwLjAwNSIsImltYWdlIjoiMCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjEyNzA3MiwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjpudWxsLCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoicGVycGxleGl0eS9sbGFtYS0zLjEtc29uYXItbGFyZ2UtMTI4ay1vbmxpbmUiLCJuYW1lIjoiUGVycGxleGl0eTogTGxhbWEgMy4xIFNvbmFyIDcwQiBPbmxpbmUiLCJjcmVhdGVkIjoxNzIyNDcwNDAwLCJkZXNjcmlwdGlvbiI6IkxsYW1hIDMuMSBTb25hciBpcyBQZXJwbGV4aXR5J3MgbGF0ZXN0IG1vZGVsIGZhbWlseS4gSXQgc3VycGFzc2VzIHRoZWlyIGVhcmxpZXIgU29uYXIgbW9kZWxzIGluIGNvc3QtZWZmaWNpZW5jeSwgc3BlZWQsIGFuZCBwZXJmb3JtYW5jZS5cblxuVGhpcyBpcyB0aGUgb25saW5lIHZlcnNpb24gb2YgdGhlIFtvZmZsaW5lIGNoYXQgbW9kZWxdKC9tb2RlbHMvcGVycGxleGl0eS9sbGFtYS0zLjEtc29uYXItbGFyZ2UtMTI4ay1jaGF0KS4gSXQgaXMgZm9jdXNlZCBvbiBkZWxpdmVyaW5nIGhlbHBmdWwsIHVwLXRvLWRhdGUsIGFuZCBmYWN0dWFsIHJlc3BvbnNlcy4gI29ubGluZSIsImNvbnRleHRfbGVuZ3RoIjoxMjcwNzIsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJMbGFtYTMiLCJpbnN0cnVjdF90eXBlIjpudWxsfSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMSIsImNvbXBsZXRpb24iOiIwLjAwMDAwMSIsInJlcXVlc3QiOiIwLjAwNSIsImltYWdlIjoiMCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjEyNzA3MiwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjpudWxsLCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoibWV0YS1sbGFtYS9sbGFtYS0zLjEtOGItaW5zdHJ1Y3Q6ZnJlZSIsIm5hbWUiOiJNZXRhOiBMbGFtYSAzLjEgOEIgSW5zdHJ1Y3QgKGZyZWUpIiwiY3JlYXRlZCI6MTcyMTY5MjgwMCwiZGVzY3JpcHRpb24iOiJNZXRhJ3MgbGF0ZXN0IGNsYXNzIG9mIG1vZGVsIChMbGFtYSAzLjEpIGxhdW5jaGVkIHdpdGggYSB2YXJpZXR5IG9mIHNpemVzICYgZmxhdm9ycy4gVGhpcyA4QiBpbnN0cnVjdC10dW5lZCB2ZXJzaW9uIGlzIGZhc3QgYW5kIGVmZmljaWVudC5cblxuSXQgaGFzIGRlbW9uc3RyYXRlZCBzdHJvbmcgcGVyZm9ybWFuY2UgY29tcGFyZWQgdG8gbGVhZGluZyBjbG9zZWQtc291cmNlIG1vZGVscyBpbiBodW1hbiBldmFsdWF0aW9ucy5cblxuVG8gcmVhZCBtb3JlIGFib3V0IHRoZSBtb2RlbCByZWxlYXNlLCBbY2xpY2sgaGVyZV0oaHR0cHM6Ly9haS5tZXRhLmNvbS9ibG9nL21ldGEtbGxhbWEtMy0xLykuIFVzYWdlIG9mIHRoaXMgbW9kZWwgaXMgc3ViamVjdCB0byBbTWV0YSdzIEFjY2VwdGFibGUgVXNlIFBvbGljeV0oaHR0cHM6Ly9sbGFtYS5tZXRhLmNvbS9sbGFtYTMvdXNlLXBvbGljeS8pLiIsImNvbnRleHRfbGVuZ3RoIjoxMzEwNzIsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJMbGFtYTMiLCJpbnN0cnVjdF90eXBlIjoibGxhbWEzIn0sInByaWNpbmciOnsicHJvbXB0IjoiMCIsImNvbXBsZXRpb24iOiIwIiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoxMzEwNzIsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6NDA5NiwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6Im1ldGEtbGxhbWEvbGxhbWEtMy4xLThiLWluc3RydWN0IiwibmFtZSI6Ik1ldGE6IExsYW1hIDMuMSA4QiBJbnN0cnVjdCIsImNyZWF0ZWQiOjE3MjE2OTI4MDAsImRlc2NyaXB0aW9uIjoiTWV0YSdzIGxhdGVzdCBjbGFzcyBvZiBtb2RlbCAoTGxhbWEgMy4xKSBsYXVuY2hlZCB3aXRoIGEgdmFyaWV0eSBvZiBzaXplcyAmIGZsYXZvcnMuIFRoaXMgOEIgaW5zdHJ1Y3QtdHVuZWQgdmVyc2lvbiBpcyBmYXN0IGFuZCBlZmZpY2llbnQuXG5cbkl0IGhhcyBkZW1vbnN0cmF0ZWQgc3Ryb25nIHBlcmZvcm1hbmNlIGNvbXBhcmVkIHRvIGxlYWRpbmcgY2xvc2VkLXNvdXJjZSBtb2RlbHMgaW4gaHVtYW4gZXZhbHVhdGlvbnMuXG5cblRvIHJlYWQgbW9yZSBhYm91dCB0aGUgbW9kZWwgcmVsZWFzZSwgW2NsaWNrIGhlcmVdKGh0dHBzOi8vYWkubWV0YS5jb20vYmxvZy9tZXRhLWxsYW1hLTMtMS8pLiBVc2FnZSBvZiB0aGlzIG1vZGVsIGlzIHN1YmplY3QgdG8gW01ldGEncyBBY2NlcHRhYmxlIFVzZSBQb2xpY3ldKGh0dHBzOi8vbGxhbWEubWV0YS5jb20vbGxhbWEzL3VzZS1wb2xpY3kvKS4iLCJjb250ZXh0X2xlbmd0aCI6MTYzODQsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJMbGFtYTMiLCJpbnN0cnVjdF90eXBlIjoibGxhbWEzIn0sInByaWNpbmciOnsicHJvbXB0IjoiMC4wMDAwMDAwMiIsImNvbXBsZXRpb24iOiIwLjAwMDAwMDAzIiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoxNjM4NCwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjoxNjM4NCwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6Im1ldGEtbGxhbWEvbGxhbWEtMy4xLTQwNWItaW5zdHJ1Y3QiLCJuYW1lIjoiTWV0YTogTGxhbWEgMy4xIDQwNUIgSW5zdHJ1Y3QiLCJjcmVhdGVkIjoxNzIxNjkyODAwLCJkZXNjcmlwdGlvbiI6IlRoZSBoaWdobHkgYW50aWNpcGF0ZWQgNDAwQiBjbGFzcyBvZiBMbGFtYTMgaXMgaGVyZSEgQ2xvY2tpbmcgaW4gYXQgMTI4ayBjb250ZXh0IHdpdGggaW1wcmVzc2l2ZSBldmFsIHNjb3JlcywgdGhlIE1ldGEgQUkgdGVhbSBjb250aW51ZXMgdG8gcHVzaCB0aGUgZnJvbnRpZXIgb2Ygb3Blbi1zb3VyY2UgTExNcy5cblxuTWV0YSdzIGxhdGVzdCBjbGFzcyBvZiBtb2RlbCAoTGxhbWEgMy4xKSBsYXVuY2hlZCB3aXRoIGEgdmFyaWV0eSBvZiBzaXplcyAmIGZsYXZvcnMuIFRoaXMgNDA1QiBpbnN0cnVjdC10dW5lZCB2ZXJzaW9uIGlzIG9wdGltaXplZCBmb3IgaGlnaCBxdWFsaXR5IGRpYWxvZ3VlIHVzZWNhc2VzLlxuXG5JdCBoYXMgZGVtb25zdHJhdGVkIHN0cm9uZyBwZXJmb3JtYW5jZSBjb21wYXJlZCB0byBsZWFkaW5nIGNsb3NlZC1zb3VyY2UgbW9kZWxzIGluY2x1ZGluZyBHUFQtNG8gYW5kIENsYXVkZSAzLjUgU29ubmV0IGluIGV2YWx1YXRpb25zLlxuXG5UbyByZWFkIG1vcmUgYWJvdXQgdGhlIG1vZGVsIHJlbGVhc2UsIFtjbGljayBoZXJlXShodHRwczovL2FpLm1ldGEuY29tL2Jsb2cvbWV0YS1sbGFtYS0zLTEvKS4gVXNhZ2Ugb2YgdGhpcyBtb2RlbCBpcyBzdWJqZWN0IHRvIFtNZXRhJ3MgQWNjZXB0YWJsZSBVc2UgUG9saWN5XShodHRwczovL2xsYW1hLm1ldGEuY29tL2xsYW1hMy91c2UtcG9saWN5LykuIiwiY29udGV4dF9sZW5ndGgiOjMyNzY4LCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiTGxhbWEzIiwiaW5zdHJ1Y3RfdHlwZSI6ImxsYW1hMyJ9LCJwcmljaW5nIjp7InByb21wdCI6IjAuMDAwMDAwOCIsImNvbXBsZXRpb24iOiIwLjAwMDAwMDgiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjMyNzY4LCJtYXhfY29tcGxldGlvbl90b2tlbnMiOjE2Mzg0LCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoibWV0YS1sbGFtYS9sbGFtYS0zLjEtNzBiLWluc3RydWN0IiwibmFtZSI6Ik1ldGE6IExsYW1hIDMuMSA3MEIgSW5zdHJ1Y3QiLCJjcmVhdGVkIjoxNzIxNjkyODAwLCJkZXNjcmlwdGlvbiI6Ik1ldGEncyBsYXRlc3QgY2xhc3Mgb2YgbW9kZWwgKExsYW1hIDMuMSkgbGF1bmNoZWQgd2l0aCBhIHZhcmlldHkgb2Ygc2l6ZXMgJiBmbGF2b3JzLiBUaGlzIDcwQiBpbnN0cnVjdC10dW5lZCB2ZXJzaW9uIGlzIG9wdGltaXplZCBmb3IgaGlnaCBxdWFsaXR5IGRpYWxvZ3VlIHVzZWNhc2VzLlxuXG5JdCBoYXMgZGVtb25zdHJhdGVkIHN0cm9uZyBwZXJmb3JtYW5jZSBjb21wYXJlZCB0byBsZWFkaW5nIGNsb3NlZC1zb3VyY2UgbW9kZWxzIGluIGh1bWFuIGV2YWx1YXRpb25zLlxuXG5UbyByZWFkIG1vcmUgYWJvdXQgdGhlIG1vZGVsIHJlbGVhc2UsIFtjbGljayBoZXJlXShodHRwczovL2FpLm1ldGEuY29tL2Jsb2cvbWV0YS1sbGFtYS0zLTEvKS4gVXNhZ2Ugb2YgdGhpcyBtb2RlbCBpcyBzdWJqZWN0IHRvIFtNZXRhJ3MgQWNjZXB0YWJsZSBVc2UgUG9saWN5XShodHRwczovL2xsYW1hLm1ldGEuY29tL2xsYW1hMy91c2UtcG9saWN5LykuIiwiY29udGV4dF9sZW5ndGgiOjEzMTA3MiwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dC0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6IkxsYW1hMyIsImluc3RydWN0X3R5cGUiOiJsbGFtYTMifSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMDEiLCJjb21wbGV0aW9uIjoiMC4wMDAwMDAyOCIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6MTMxMDcyLCJtYXhfY29tcGxldGlvbl90b2tlbnMiOjE2Mzg0LCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoibWlzdHJhbGFpL2NvZGVzdHJhbC1tYW1iYSIsIm5hbWUiOiJNaXN0cmFsOiBDb2Rlc3RyYWwgTWFtYmEiLCJjcmVhdGVkIjoxNzIxMzQ3MjAwLCJkZXNjcmlwdGlvbiI6IkEgNy4zQiBwYXJhbWV0ZXIgTWFtYmEtYmFzZWQgbW9kZWwgZGVzaWduZWQgZm9yIGNvZGUgYW5kIHJlYXNvbmluZyB0YXNrcy5cblxuLSBMaW5lYXIgdGltZSBpbmZlcmVuY2UsIGFsbG93aW5nIGZvciB0aGVvcmV0aWNhbGx5IGluZmluaXRlIHNlcXVlbmNlIGxlbmd0aHNcbi0gMjU2ayB0b2tlbiBjb250ZXh0IHdpbmRvd1xuLSBPcHRpbWl6ZWQgZm9yIHF1aWNrIHJlc3BvbnNlcywgZXNwZWNpYWxseSBiZW5lZmljaWFsIGZvciBjb2RlIHByb2R1Y3Rpdml0eVxuLSBQZXJmb3JtcyBjb21wYXJhYmx5IHRvIHN0YXRlLW9mLXRoZS1hcnQgdHJhbnNmb3JtZXIgbW9kZWxzIGluIGNvZGUgYW5kIHJlYXNvbmluZyB0YXNrc1xuLSBBdmFpbGFibGUgdW5kZXIgdGhlIEFwYWNoZSAyLjAgbGljZW5zZSBmb3IgZnJlZSB1c2UsIG1vZGlmaWNhdGlvbiwgYW5kIGRpc3RyaWJ1dGlvbiIsImNvbnRleHRfbGVuZ3RoIjoyNjIxNDQsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJNaXN0cmFsIiwiaW5zdHJ1Y3RfdHlwZSI6bnVsbH0sInByaWNpbmciOnsicHJvbXB0IjoiMC4wMDAwMDAyNSIsImNvbXBsZXRpb24iOiIwLjAwMDAwMDI1IiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoyNjIxNDQsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6bnVsbCwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6Im1pc3RyYWxhaS9taXN0cmFsLW5lbW86ZnJlZSIsIm5hbWUiOiJNaXN0cmFsOiBNaXN0cmFsIE5lbW8gKGZyZWUpIiwiY3JlYXRlZCI6MTcyMTM0NzIwMCwiZGVzY3JpcHRpb24iOiJBIDEyQiBwYXJhbWV0ZXIgbW9kZWwgd2l0aCBhIDEyOGsgdG9rZW4gY29udGV4dCBsZW5ndGggYnVpbHQgYnkgTWlzdHJhbCBpbiBjb2xsYWJvcmF0aW9uIHdpdGggTlZJRElBLlxuXG5UaGUgbW9kZWwgaXMgbXVsdGlsaW5ndWFsLCBzdXBwb3J0aW5nIEVuZ2xpc2gsIEZyZW5jaCwgR2VybWFuLCBTcGFuaXNoLCBJdGFsaWFuLCBQb3J0dWd1ZXNlLCBDaGluZXNlLCBKYXBhbmVzZSwgS29yZWFuLCBBcmFiaWMsIGFuZCBIaW5kaS5cblxuSXQgc3VwcG9ydHMgZnVuY3Rpb24gY2FsbGluZyBhbmQgaXMgcmVsZWFzZWQgdW5kZXIgdGhlIEFwYWNoZSAyLjAgbGljZW5zZS4iLCJjb250ZXh0X2xlbmd0aCI6MTI4MDAwLCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiTWlzdHJhbCIsImluc3RydWN0X3R5cGUiOiJtaXN0cmFsIn0sInByaWNpbmciOnsicHJvbXB0IjoiMCIsImNvbXBsZXRpb24iOiIwIiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoxMjgwMDAsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6MTI4MDAwLCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoibWlzdHJhbGFpL21pc3RyYWwtbmVtbyIsIm5hbWUiOiJNaXN0cmFsOiBNaXN0cmFsIE5lbW8iLCJjcmVhdGVkIjoxNzIxMzQ3MjAwLCJkZXNjcmlwdGlvbiI6IkEgMTJCIHBhcmFtZXRlciBtb2RlbCB3aXRoIGEgMTI4ayB0b2tlbiBjb250ZXh0IGxlbmd0aCBidWlsdCBieSBNaXN0cmFsIGluIGNvbGxhYm9yYXRpb24gd2l0aCBOVklESUEuXG5cblRoZSBtb2RlbCBpcyBtdWx0aWxpbmd1YWwsIHN1cHBvcnRpbmcgRW5nbGlzaCwgRnJlbmNoLCBHZXJtYW4sIFNwYW5pc2gsIEl0YWxpYW4sIFBvcnR1Z3Vlc2UsIENoaW5lc2UsIEphcGFuZXNlLCBLb3JlYW4sIEFyYWJpYywgYW5kIEhpbmRpLlxuXG5JdCBzdXBwb3J0cyBmdW5jdGlvbiBjYWxsaW5nIGFuZCBpcyByZWxlYXNlZCB1bmRlciB0aGUgQXBhY2hlIDIuMCBsaWNlbnNlLiIsImNvbnRleHRfbGVuZ3RoIjoxMzEwNzIsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJNaXN0cmFsIiwiaW5zdHJ1Y3RfdHlwZSI6Im1pc3RyYWwifSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMDAzNSIsImNvbXBsZXRpb24iOiIwLjAwMDAwMDA4IiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoxMzEwNzIsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6MTYzODQsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJvcGVuYWkvZ3B0LTRvLW1pbmkiLCJuYW1lIjoiT3BlbkFJOiBHUFQtNG8tbWluaSIsImNyZWF0ZWQiOjE3MjEyNjA4MDAsImRlc2NyaXB0aW9uIjoiR1BULTRvIG1pbmkgaXMgT3BlbkFJJ3MgbmV3ZXN0IG1vZGVsIGFmdGVyIFtHUFQtNCBPbW5pXSgvbW9kZWxzL29wZW5haS9ncHQtNG8pLCBzdXBwb3J0aW5nIGJvdGggdGV4dCBhbmQgaW1hZ2UgaW5wdXRzIHdpdGggdGV4dCBvdXRwdXRzLlxuXG5BcyB0aGVpciBtb3N0IGFkdmFuY2VkIHNtYWxsIG1vZGVsLCBpdCBpcyBtYW55IG11bHRpcGxlcyBtb3JlIGFmZm9yZGFibGUgdGhhbiBvdGhlciByZWNlbnQgZnJvbnRpZXIgbW9kZWxzLCBhbmQgbW9yZSB0aGFuIDYwJSBjaGVhcGVyIHRoYW4gW0dQVC0zLjUgVHVyYm9dKC9tb2RlbHMvb3BlbmFpL2dwdC0zLjUtdHVyYm8pLiBJdCBtYWludGFpbnMgU09UQSBpbnRlbGxpZ2VuY2UsIHdoaWxlIGJlaW5nIHNpZ25pZmljYW50bHkgbW9yZSBjb3N0LWVmZmVjdGl2ZS5cblxuR1BULTRvIG1pbmkgYWNoaWV2ZXMgYW4gODIlIHNjb3JlIG9uIE1NTFUgYW5kIHByZXNlbnRseSByYW5rcyBoaWdoZXIgdGhhbiBHUFQtNCBvbiBjaGF0IHByZWZlcmVuY2VzIFtjb21tb24gbGVhZGVyYm9hcmRzXShodHRwczovL2FyZW5hLmxtc3lzLm9yZy8pLlxuXG5DaGVjayBvdXQgdGhlIFtsYXVuY2ggYW5ub3VuY2VtZW50XShodHRwczovL29wZW5haS5jb20vaW5kZXgvZ3B0LTRvLW1pbmktYWR2YW5jaW5nLWNvc3QtZWZmaWNpZW50LWludGVsbGlnZW5jZS8pIHRvIGxlYXJuIG1vcmUuXG5cbiNtdWx0aW1vZGFsIiwiY29udGV4dF9sZW5ndGgiOjEyODAwMCwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dCtpbWFnZS0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCIsImltYWdlIl0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiR1BUIiwiaW5zdHJ1Y3RfdHlwZSI6bnVsbH0sInByaWNpbmciOnsicHJvbXB0IjoiMC4wMDAwMDAxNSIsImNvbXBsZXRpb24iOiIwLjAwMDAwMDYiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMC4wMDAyMTciLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAiLCJpbnB1dF9jYWNoZV9yZWFkIjoiMC4wMDAwMDAwNzUifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoxMjgwMDAsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6MTYzODQsImlzX21vZGVyYXRlZCI6dHJ1ZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6Im9wZW5haS9ncHQtNG8tbWluaS0yMDI0LTA3LTE4IiwibmFtZSI6Ik9wZW5BSTogR1BULTRvLW1pbmkgKDIwMjQtMDctMTgpIiwiY3JlYXRlZCI6MTcyMTI2MDgwMCwiZGVzY3JpcHRpb24iOiJHUFQtNG8gbWluaSBpcyBPcGVuQUkncyBuZXdlc3QgbW9kZWwgYWZ0ZXIgW0dQVC00IE9tbmldKC9tb2RlbHMvb3BlbmFpL2dwdC00byksIHN1cHBvcnRpbmcgYm90aCB0ZXh0IGFuZCBpbWFnZSBpbnB1dHMgd2l0aCB0ZXh0IG91dHB1dHMuXG5cbkFzIHRoZWlyIG1vc3QgYWR2YW5jZWQgc21hbGwgbW9kZWwsIGl0IGlzIG1hbnkgbXVsdGlwbGVzIG1vcmUgYWZmb3JkYWJsZSB0aGFuIG90aGVyIHJlY2VudCBmcm9udGllciBtb2RlbHMsIGFuZCBtb3JlIHRoYW4gNjAlIGNoZWFwZXIgdGhhbiBbR1BULTMuNSBUdXJib10oL21vZGVscy9vcGVuYWkvZ3B0LTMuNS10dXJibykuIEl0IG1haW50YWlucyBTT1RBIGludGVsbGlnZW5jZSwgd2hpbGUgYmVpbmcgc2lnbmlmaWNhbnRseSBtb3JlIGNvc3QtZWZmZWN0aXZlLlxuXG5HUFQtNG8gbWluaSBhY2hpZXZlcyBhbiA4MiUgc2NvcmUgb24gTU1MVSBhbmQgcHJlc2VudGx5IHJhbmtzIGhpZ2hlciB0aGFuIEdQVC00IG9uIGNoYXQgcHJlZmVyZW5jZXMgW2NvbW1vbiBsZWFkZXJib2FyZHNdKGh0dHBzOi8vYXJlbmEubG1zeXMub3JnLykuXG5cbkNoZWNrIG91dCB0aGUgW2xhdW5jaCBhbm5vdW5jZW1lbnRdKGh0dHBzOi8vb3BlbmFpLmNvbS9pbmRleC9ncHQtNG8tbWluaS1hZHZhbmNpbmctY29zdC1lZmZpY2llbnQtaW50ZWxsaWdlbmNlLykgdG8gbGVhcm4gbW9yZS5cblxuI211bHRpbW9kYWwiLCJjb250ZXh0X2xlbmd0aCI6MTI4MDAwLCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0K2ltYWdlLT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0IiwiaW1hZ2UiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJHUFQiLCJpbnN0cnVjdF90eXBlIjpudWxsfSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMDE1IiwiY29tcGxldGlvbiI6IjAuMDAwMDAwNiIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwLjAwNzIyNSIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCIsImlucHV0X2NhY2hlX3JlYWQiOiIwLjAwMDAwMDA3NSJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjEyODAwMCwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjoxNjM4NCwiaXNfbW9kZXJhdGVkIjp0cnVlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoiZ29vZ2xlL2dlbW1hLTItMjdiLWl0IiwibmFtZSI6Ikdvb2dsZTogR2VtbWEgMiAyN0IiLCJjcmVhdGVkIjoxNzIwODI4ODAwLCJkZXNjcmlwdGlvbiI6IkdlbW1hIDIgMjdCIGJ5IEdvb2dsZSBpcyBhbiBvcGVuIG1vZGVsIGJ1aWx0IGZyb20gdGhlIHNhbWUgcmVzZWFyY2ggYW5kIHRlY2hub2xvZ3kgdXNlZCB0byBjcmVhdGUgdGhlIFtHZW1pbmkgbW9kZWxzXSgvbW9kZWxzP3E9Z2VtaW5pKS5cblxuR2VtbWEgbW9kZWxzIGFyZSB3ZWxsLXN1aXRlZCBmb3IgYSB2YXJpZXR5IG9mIHRleHQgZ2VuZXJhdGlvbiB0YXNrcywgaW5jbHVkaW5nIHF1ZXN0aW9uIGFuc3dlcmluZywgc3VtbWFyaXphdGlvbiwgYW5kIHJlYXNvbmluZy5cblxuU2VlIHRoZSBbbGF1bmNoIGFubm91bmNlbWVudF0oaHR0cHM6Ly9ibG9nLmdvb2dsZS90ZWNobm9sb2d5L2RldmVsb3BlcnMvZ29vZ2xlLWdlbW1hLTIvKSBmb3IgbW9yZSBkZXRhaWxzLiBVc2FnZSBvZiBHZW1tYSBpcyBzdWJqZWN0IHRvIEdvb2dsZSdzIFtHZW1tYSBUZXJtcyBvZiBVc2VdKGh0dHBzOi8vYWkuZ29vZ2xlLmRldi9nZW1tYS90ZXJtcykuIiwiY29udGV4dF9sZW5ndGgiOjgxOTIsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJHZW1pbmkiLCJpbnN0cnVjdF90eXBlIjoiZ2VtbWEifSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMDgiLCJjb21wbGV0aW9uIjoiMC4wMDAwMDA4IiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjo4MTkyLCJtYXhfY29tcGxldGlvbl90b2tlbnMiOjIwNDgsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJhbHBpbmRhbGUvbWFnbnVtLTcyYiIsIm5hbWUiOiJNYWdudW0gNzJCIiwiY3JlYXRlZCI6MTcyMDY1NjAwMCwiZGVzY3JpcHRpb24iOiJGcm9tIHRoZSBtYWtlciBvZiBbR29saWF0aF0oaHR0cHM6Ly9vcGVucm91dGVyLmFpL21vZGVscy9hbHBpbmRhbGUvZ29saWF0aC0xMjBiKSwgTWFnbnVtIDcyQiBpcyB0aGUgZmlyc3QgaW4gYSBuZXcgZmFtaWx5IG9mIG1vZGVscyBkZXNpZ25lZCB0byBhY2hpZXZlIHRoZSBwcm9zZSBxdWFsaXR5IG9mIHRoZSBDbGF1ZGUgMyBtb2RlbHMsIG5vdGFibHkgT3B1cyAmIFNvbm5ldC5cblxuVGhlIG1vZGVsIGlzIGJhc2VkIG9uIFtRd2VuMiA3MkJdKGh0dHBzOi8vb3BlbnJvdXRlci5haS9tb2RlbHMvcXdlbi9xd2VuLTItNzJiLWluc3RydWN0KSBhbmQgdHJhaW5lZCB3aXRoIDU1IG1pbGxpb24gdG9rZW5zIG9mIGhpZ2hseSBjdXJhdGVkIHJvbGVwbGF5IChSUCkgZGF0YS4iLCJjb250ZXh0X2xlbmd0aCI6MTYzODQsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJRd2VuIiwiaW5zdHJ1Y3RfdHlwZSI6ImNoYXRtbCJ9LCJwcmljaW5nIjp7InByb21wdCI6IjAuMDAwMDA0IiwiY29tcGxldGlvbiI6IjAuMDAwMDA2IiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoxNjM4NCwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjo0MDk2LCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoiZ29vZ2xlL2dlbW1hLTItOWItaXQ6ZnJlZSIsIm5hbWUiOiJHb29nbGU6IEdlbW1hIDIgOUIgKGZyZWUpIiwiY3JlYXRlZCI6MTcxOTUzMjgwMCwiZGVzY3JpcHRpb24iOiJHZW1tYSAyIDlCIGJ5IEdvb2dsZSBpcyBhbiBhZHZhbmNlZCwgb3Blbi1zb3VyY2UgbGFuZ3VhZ2UgbW9kZWwgdGhhdCBzZXRzIGEgbmV3IHN0YW5kYXJkIGZvciBlZmZpY2llbmN5IGFuZCBwZXJmb3JtYW5jZSBpbiBpdHMgc2l6ZSBjbGFzcy5cblxuRGVzaWduZWQgZm9yIGEgd2lkZSB2YXJpZXR5IG9mIHRhc2tzLCBpdCBlbXBvd2VycyBkZXZlbG9wZXJzIGFuZCByZXNlYXJjaGVycyB0byBidWlsZCBpbm5vdmF0aXZlIGFwcGxpY2F0aW9ucywgd2hpbGUgbWFpbnRhaW5pbmcgYWNjZXNzaWJpbGl0eSwgc2FmZXR5LCBhbmQgY29zdC1lZmZlY3RpdmVuZXNzLlxuXG5TZWUgdGhlIFtsYXVuY2ggYW5ub3VuY2VtZW50XShodHRwczovL2Jsb2cuZ29vZ2xlL3RlY2hub2xvZ3kvZGV2ZWxvcGVycy9nb29nbGUtZ2VtbWEtMi8pIGZvciBtb3JlIGRldGFpbHMuIFVzYWdlIG9mIEdlbW1hIGlzIHN1YmplY3QgdG8gR29vZ2xlJ3MgW0dlbW1hIFRlcm1zIG9mIFVzZV0oaHR0cHM6Ly9haS5nb29nbGUuZGV2L2dlbW1hL3Rlcm1zKS4iLCJjb250ZXh0X2xlbmd0aCI6ODE5MiwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dC0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6IkdlbWluaSIsImluc3RydWN0X3R5cGUiOiJnZW1tYSJ9LCJwcmljaW5nIjp7InByb21wdCI6IjAiLCJjb21wbGV0aW9uIjoiMCIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6ODE5MiwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjo4MTkyLCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoiZ29vZ2xlL2dlbW1hLTItOWItaXQiLCJuYW1lIjoiR29vZ2xlOiBHZW1tYSAyIDlCIiwiY3JlYXRlZCI6MTcxOTUzMjgwMCwiZGVzY3JpcHRpb24iOiJHZW1tYSAyIDlCIGJ5IEdvb2dsZSBpcyBhbiBhZHZhbmNlZCwgb3Blbi1zb3VyY2UgbGFuZ3VhZ2UgbW9kZWwgdGhhdCBzZXRzIGEgbmV3IHN0YW5kYXJkIGZvciBlZmZpY2llbmN5IGFuZCBwZXJmb3JtYW5jZSBpbiBpdHMgc2l6ZSBjbGFzcy5cblxuRGVzaWduZWQgZm9yIGEgd2lkZSB2YXJpZXR5IG9mIHRhc2tzLCBpdCBlbXBvd2VycyBkZXZlbG9wZXJzIGFuZCByZXNlYXJjaGVycyB0byBidWlsZCBpbm5vdmF0aXZlIGFwcGxpY2F0aW9ucywgd2hpbGUgbWFpbnRhaW5pbmcgYWNjZXNzaWJpbGl0eSwgc2FmZXR5LCBhbmQgY29zdC1lZmZlY3RpdmVuZXNzLlxuXG5TZWUgdGhlIFtsYXVuY2ggYW5ub3VuY2VtZW50XShodHRwczovL2Jsb2cuZ29vZ2xlL3RlY2hub2xvZ3kvZGV2ZWxvcGVycy9nb29nbGUtZ2VtbWEtMi8pIGZvciBtb3JlIGRldGFpbHMuIFVzYWdlIG9mIEdlbW1hIGlzIHN1YmplY3QgdG8gR29vZ2xlJ3MgW0dlbW1hIFRlcm1zIG9mIFVzZV0oaHR0cHM6Ly9haS5nb29nbGUuZGV2L2dlbW1hL3Rlcm1zKS4iLCJjb250ZXh0X2xlbmd0aCI6ODE5MiwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dC0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6IkdlbWluaSIsImluc3RydWN0X3R5cGUiOiJnZW1tYSJ9LCJwcmljaW5nIjp7InByb21wdCI6IjAuMDAwMDAwMDciLCJjb21wbGV0aW9uIjoiMC4wMDAwMDAwNyIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6ODE5MiwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjpudWxsLCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoiMDEtYWkveWktbGFyZ2UiLCJuYW1lIjoiMDEuQUk6IFlpIExhcmdlIiwiY3JlYXRlZCI6MTcxOTI3MzYwMCwiZGVzY3JpcHRpb24iOiJUaGUgWWkgTGFyZ2UgbW9kZWwgd2FzIGRlc2lnbmVkIGJ5IDAxLkFJIHdpdGggdGhlIGZvbGxvd2luZyB1c2VjYXNlcyBpbiBtaW5kOiBrbm93bGVkZ2Ugc2VhcmNoLCBkYXRhIGNsYXNzaWZpY2F0aW9uLCBodW1hbi1saWtlIGNoYXQgYm90cywgYW5kIGN1c3RvbWVyIHNlcnZpY2UuXG5cbkl0IHN0YW5kcyBvdXQgZm9yIGl0cyBtdWx0aWxpbmd1YWwgcHJvZmljaWVuY3ksIHBhcnRpY3VsYXJseSBpbiBTcGFuaXNoLCBDaGluZXNlLCBKYXBhbmVzZSwgR2VybWFuLCBhbmQgRnJlbmNoLlxuXG5DaGVjayBvdXQgdGhlIFtsYXVuY2ggYW5ub3VuY2VtZW50XShodHRwczovLzAxLWFpLmdpdGh1Yi5pby9ibG9nLzAxLmFpLXlpLWxhcmdlLWxsbS1sYXVuY2gpIHRvIGxlYXJuIG1vcmUuIiwiY29udGV4dF9sZW5ndGgiOjMyNzY4LCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiWWkiLCJpbnN0cnVjdF90eXBlIjpudWxsfSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMyIsImNvbXBsZXRpb24iOiIwLjAwMDAwMyIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6MzI3NjgsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6NDA5NiwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6ImFpMjEvamFtYmEtaW5zdHJ1Y3QiLCJuYW1lIjoiQUkyMTogSmFtYmEgSW5zdHJ1Y3QiLCJjcmVhdGVkIjoxNzE5MjczNjAwLCJkZXNjcmlwdGlvbiI6IlRoZSBKYW1iYS1JbnN0cnVjdCBtb2RlbCwgaW50cm9kdWNlZCBieSBBSTIxIExhYnMsIGlzIGFuIGluc3RydWN0aW9uLXR1bmVkIHZhcmlhbnQgb2YgdGhlaXIgaHlicmlkIFNTTS1UcmFuc2Zvcm1lciBKYW1iYSBtb2RlbCwgc3BlY2lmaWNhbGx5IG9wdGltaXplZCBmb3IgZW50ZXJwcmlzZSBhcHBsaWNhdGlvbnMuXG5cbi0gMjU2SyBDb250ZXh0IFdpbmRvdzogSXQgY2FuIHByb2Nlc3MgZXh0ZW5zaXZlIGluZm9ybWF0aW9uLCBlcXVpdmFsZW50IHRvIGEgNDAwLXBhZ2Ugbm92ZWwsIHdoaWNoIGlzIGJlbmVmaWNpYWwgZm9yIHRhc2tzIGludm9sdmluZyBsYXJnZSBkb2N1bWVudHMgc3VjaCBhcyBmaW5hbmNpYWwgcmVwb3J0cyBvciBsZWdhbCBkb2N1bWVudHNcbi0gU2FmZXR5IGFuZCBBY2N1cmFjeTogSmFtYmEtSW5zdHJ1Y3QgaXMgZGVzaWduZWQgd2l0aCBlbmhhbmNlZCBzYWZldHkgZmVhdHVyZXMgdG8gZW5zdXJlIHNlY3VyZSBkZXBsb3ltZW50IGluIGVudGVycHJpc2UgZW52aXJvbm1lbnRzLCByZWR1Y2luZyB0aGUgcmlzayBhbmQgY29zdCBvZiBpbXBsZW1lbnRhdGlvblxuXG5SZWFkIHRoZWlyIFthbm5vdW5jZW1lbnRdKGh0dHBzOi8vd3d3LmFpMjEuY29tL2Jsb2cvYW5ub3VuY2luZy1qYW1iYSkgdG8gbGVhcm4gbW9yZS5cblxuSmFtYmEgaGFzIGEga25vd2xlZGdlIGN1dG9mZiBvZiBGZWJydWFyeSAyMDI0LiIsImNvbnRleHRfbGVuZ3RoIjoyNTYwMDAsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJPdGhlciIsImluc3RydWN0X3R5cGUiOm51bGx9LCJwcmljaW5nIjp7InByb21wdCI6IjAuMDAwMDAwNSIsImNvbXBsZXRpb24iOiIwLjAwMDAwMDciLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjI1NjAwMCwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjo0MDk2LCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoiYW50aHJvcGljL2NsYXVkZS0zLjUtc29ubmV0LTIwMjQwNjIwOmJldGEiLCJuYW1lIjoiQW50aHJvcGljOiBDbGF1ZGUgMy41IFNvbm5ldCAoMjAyNC0wNi0yMCkgKHNlbGYtbW9kZXJhdGVkKSIsImNyZWF0ZWQiOjE3MTg4NDE2MDAsImRlc2NyaXB0aW9uIjoiQ2xhdWRlIDMuNSBTb25uZXQgZGVsaXZlcnMgYmV0dGVyLXRoYW4tT3B1cyBjYXBhYmlsaXRpZXMsIGZhc3Rlci10aGFuLVNvbm5ldCBzcGVlZHMsIGF0IHRoZSBzYW1lIFNvbm5ldCBwcmljZXMuIFNvbm5ldCBpcyBwYXJ0aWN1bGFybHkgZ29vZCBhdDpcblxuLSBDb2Rpbmc6IEF1dG9ub21vdXNseSB3cml0ZXMsIGVkaXRzLCBhbmQgcnVucyBjb2RlIHdpdGggcmVhc29uaW5nIGFuZCB0cm91Ymxlc2hvb3Rpbmdcbi0gRGF0YSBzY2llbmNlOiBBdWdtZW50cyBodW1hbiBkYXRhIHNjaWVuY2UgZXhwZXJ0aXNlOyBuYXZpZ2F0ZXMgdW5zdHJ1Y3R1cmVkIGRhdGEgd2hpbGUgdXNpbmcgbXVsdGlwbGUgdG9vbHMgZm9yIGluc2lnaHRzXG4tIFZpc3VhbCBwcm9jZXNzaW5nOiBleGNlbGxpbmcgYXQgaW50ZXJwcmV0aW5nIGNoYXJ0cywgZ3JhcGhzLCBhbmQgaW1hZ2VzLCBhY2N1cmF0ZWx5IHRyYW5zY3JpYmluZyB0ZXh0IHRvIGRlcml2ZSBpbnNpZ2h0cyBiZXlvbmQganVzdCB0aGUgdGV4dCBhbG9uZVxuLSBBZ2VudGljIHRhc2tzOiBleGNlcHRpb25hbCB0b29sIHVzZSwgbWFraW5nIGl0IGdyZWF0IGF0IGFnZW50aWMgdGFza3MgKGkuZS4gY29tcGxleCwgbXVsdGktc3RlcCBwcm9ibGVtIHNvbHZpbmcgdGFza3MgdGhhdCByZXF1aXJlIGVuZ2FnaW5nIHdpdGggb3RoZXIgc3lzdGVtcylcblxuRm9yIHRoZSBsYXRlc3QgdmVyc2lvbiAoMjAyNC0xMC0yMyksIGNoZWNrIG91dCBbQ2xhdWRlIDMuNSBTb25uZXRdKC9hbnRocm9waWMvY2xhdWRlLTMuNS1zb25uZXQpLlxuXG4jbXVsdGltb2RhbCIsImNvbnRleHRfbGVuZ3RoIjoyMDAwMDAsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQraW1hZ2UtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiLCJpbWFnZSJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6IkNsYXVkZSIsImluc3RydWN0X3R5cGUiOm51bGx9LCJwcmljaW5nIjp7InByb21wdCI6IjAuMDAwMDAzIiwiY29tcGxldGlvbiI6IjAuMDAwMDE1IiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAuMDA0OCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCIsImlucHV0X2NhY2hlX3JlYWQiOiIwLjAwMDAwMDMiLCJpbnB1dF9jYWNoZV93cml0ZSI6IjAuMDAwMDAzNzUifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoyMDAwMDAsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6ODE5MiwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6ImFudGhyb3BpYy9jbGF1ZGUtMy41LXNvbm5ldC0yMDI0MDYyMCIsIm5hbWUiOiJBbnRocm9waWM6IENsYXVkZSAzLjUgU29ubmV0ICgyMDI0LTA2LTIwKSIsImNyZWF0ZWQiOjE3MTg4NDE2MDAsImRlc2NyaXB0aW9uIjoiQ2xhdWRlIDMuNSBTb25uZXQgZGVsaXZlcnMgYmV0dGVyLXRoYW4tT3B1cyBjYXBhYmlsaXRpZXMsIGZhc3Rlci10aGFuLVNvbm5ldCBzcGVlZHMsIGF0IHRoZSBzYW1lIFNvbm5ldCBwcmljZXMuIFNvbm5ldCBpcyBwYXJ0aWN1bGFybHkgZ29vZCBhdDpcblxuLSBDb2Rpbmc6IEF1dG9ub21vdXNseSB3cml0ZXMsIGVkaXRzLCBhbmQgcnVucyBjb2RlIHdpdGggcmVhc29uaW5nIGFuZCB0cm91Ymxlc2hvb3Rpbmdcbi0gRGF0YSBzY2llbmNlOiBBdWdtZW50cyBodW1hbiBkYXRhIHNjaWVuY2UgZXhwZXJ0aXNlOyBuYXZpZ2F0ZXMgdW5zdHJ1Y3R1cmVkIGRhdGEgd2hpbGUgdXNpbmcgbXVsdGlwbGUgdG9vbHMgZm9yIGluc2lnaHRzXG4tIFZpc3VhbCBwcm9jZXNzaW5nOiBleGNlbGxpbmcgYXQgaW50ZXJwcmV0aW5nIGNoYXJ0cywgZ3JhcGhzLCBhbmQgaW1hZ2VzLCBhY2N1cmF0ZWx5IHRyYW5zY3JpYmluZyB0ZXh0IHRvIGRlcml2ZSBpbnNpZ2h0cyBiZXlvbmQganVzdCB0aGUgdGV4dCBhbG9uZVxuLSBBZ2VudGljIHRhc2tzOiBleGNlcHRpb25hbCB0b29sIHVzZSwgbWFraW5nIGl0IGdyZWF0IGF0IGFnZW50aWMgdGFza3MgKGkuZS4gY29tcGxleCwgbXVsdGktc3RlcCBwcm9ibGVtIHNvbHZpbmcgdGFza3MgdGhhdCByZXF1aXJlIGVuZ2FnaW5nIHdpdGggb3RoZXIgc3lzdGVtcylcblxuRm9yIHRoZSBsYXRlc3QgdmVyc2lvbiAoMjAyNC0xMC0yMyksIGNoZWNrIG91dCBbQ2xhdWRlIDMuNSBTb25uZXRdKC9hbnRocm9waWMvY2xhdWRlLTMuNS1zb25uZXQpLlxuXG4jbXVsdGltb2RhbCIsImNvbnRleHRfbGVuZ3RoIjoyMDAwMDAsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQraW1hZ2UtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiLCJpbWFnZSJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6IkNsYXVkZSIsImluc3RydWN0X3R5cGUiOm51bGx9LCJwcmljaW5nIjp7InByb21wdCI6IjAuMDAwMDAzIiwiY29tcGxldGlvbiI6IjAuMDAwMDE1IiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAuMDA0OCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCIsImlucHV0X2NhY2hlX3JlYWQiOiIwLjAwMDAwMDMiLCJpbnB1dF9jYWNoZV93cml0ZSI6IjAuMDAwMDAzNzUifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoyMDAwMDAsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6ODE5MiwiaXNfbW9kZXJhdGVkIjp0cnVlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoic2FvMTBrL2wzLWV1cnlhbGUtNzBiIiwibmFtZSI6IlNhbzEwazogTGxhbWEgMyBFdXJ5YWxlIDcwQiB2Mi4xIiwiY3JlYXRlZCI6MTcxODY2ODgwMCwiZGVzY3JpcHRpb24iOiJFdXJ5YWxlIDcwQiB2Mi4xIGlzIGEgbW9kZWwgZm9jdXNlZCBvbiBjcmVhdGl2ZSByb2xlcGxheSBmcm9tIFtTYW8xMGtdKGh0dHBzOi8va28tZmkuY29tL3NhbzEwaykuXG5cbi0gQmV0dGVyIHByb21wdCBhZGhlcmVuY2UuXG4tIEJldHRlciBhbmF0b215IC8gc3BhdGlhbCBhd2FyZW5lc3MuXG4tIEFkYXB0cyBtdWNoIGJldHRlciB0byB1bmlxdWUgYW5kIGN1c3RvbSBmb3JtYXR0aW5nIC8gcmVwbHkgZm9ybWF0cy5cbi0gVmVyeSBjcmVhdGl2ZSwgbG90cyBvZiB1bmlxdWUgc3dpcGVzLlxuLSBJcyBub3QgcmVzdHJpY3RpdmUgZHVyaW5nIHJvbGVwbGF5cy4iLCJjb250ZXh0X2xlbmd0aCI6ODE5MiwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dC0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6IkxsYW1hMyIsImluc3RydWN0X3R5cGUiOiJsbGFtYTMifSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMTQ4IiwiY29tcGxldGlvbiI6IjAuMDAwMDAxNDgiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjgxOTIsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6ODE5MiwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6ImNvZ25pdGl2ZWNvbXB1dGF0aW9ucy9kb2xwaGluLW1peHRyYWwtOHgyMmIiLCJuYW1lIjoiRG9scGhpbiAyLjkuMiBNaXh0cmFsIDh4MjJCIPCfkKwiLCJjcmVhdGVkIjoxNzE3ODA0ODAwLCJkZXNjcmlwdGlvbiI6IkRvbHBoaW4gMi45IGlzIGRlc2lnbmVkIGZvciBpbnN0cnVjdGlvbiBmb2xsb3dpbmcsIGNvbnZlcnNhdGlvbmFsLCBhbmQgY29kaW5nLiBUaGlzIG1vZGVsIGlzIGEgZmluZXR1bmUgb2YgW01peHRyYWwgOHgyMkIgSW5zdHJ1Y3RdKC9tb2RlbHMvbWlzdHJhbGFpL21peHRyYWwtOHgyMmItaW5zdHJ1Y3QpLiBJdCBmZWF0dXJlcyBhIDY0ayBjb250ZXh0IGxlbmd0aCBhbmQgd2FzIGZpbmUtdHVuZWQgd2l0aCBhIDE2ayBzZXF1ZW5jZSBsZW5ndGggdXNpbmcgQ2hhdE1MIHRlbXBsYXRlcy5cblxuVGhpcyBtb2RlbCBpcyBhIHN1Y2Nlc3NvciB0byBbRG9scGhpbiBNaXh0cmFsIDh4N0JdKC9tb2RlbHMvY29nbml0aXZlY29tcHV0YXRpb25zL2RvbHBoaW4tbWl4dHJhbC04eDdiKS5cblxuVGhlIG1vZGVsIGlzIHVuY2Vuc29yZWQgYW5kIGlzIHN0cmlwcGVkIG9mIGFsaWdubWVudCBhbmQgYmlhcy4gSXQgcmVxdWlyZXMgYW4gZXh0ZXJuYWwgYWxpZ25tZW50IGxheWVyIGZvciBldGhpY2FsIHVzZS4gVXNlcnMgYXJlIGNhdXRpb25lZCB0byB1c2UgdGhpcyBoaWdobHkgY29tcGxpYW50IG1vZGVsIHJlc3BvbnNpYmx5LCBhcyBkZXRhaWxlZCBpbiBhIGJsb2cgcG9zdCBhYm91dCB1bmNlbnNvcmVkIG1vZGVscyBhdCBbZXJpY2hhcnRmb3JkLmNvbS91bmNlbnNvcmVkLW1vZGVsc10oaHR0cHM6Ly9lcmljaGFydGZvcmQuY29tL3VuY2Vuc29yZWQtbW9kZWxzKS5cblxuI21vZSAjdW5jZW5zb3JlZCIsImNvbnRleHRfbGVuZ3RoIjoxNjAwMCwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dC0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6Ik1pc3RyYWwiLCJpbnN0cnVjdF90eXBlIjoiY2hhdG1sIn0sInByaWNpbmciOnsicHJvbXB0IjoiMC4wMDAwMDA5IiwiY29tcGxldGlvbiI6IjAuMDAwMDAwOSIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6MTYwMDAsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6bnVsbCwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6InF3ZW4vcXdlbi0yLTcyYi1pbnN0cnVjdCIsIm5hbWUiOiJRd2VuIDIgNzJCIEluc3RydWN0IiwiY3JlYXRlZCI6MTcxNzcxODQwMCwiZGVzY3JpcHRpb24iOiJRd2VuMiA3MkIgaXMgYSB0cmFuc2Zvcm1lci1iYXNlZCBtb2RlbCB0aGF0IGV4Y2VscyBpbiBsYW5ndWFnZSB1bmRlcnN0YW5kaW5nLCBtdWx0aWxpbmd1YWwgY2FwYWJpbGl0aWVzLCBjb2RpbmcsIG1hdGhlbWF0aWNzLCBhbmQgcmVhc29uaW5nLlxuXG5JdCBmZWF0dXJlcyBTd2lHTFUgYWN0aXZhdGlvbiwgYXR0ZW50aW9uIFFLViBiaWFzLCBhbmQgZ3JvdXAgcXVlcnkgYXR0ZW50aW9uLiBJdCBpcyBwcmV0cmFpbmVkIG9uIGV4dGVuc2l2ZSBkYXRhIHdpdGggc3VwZXJ2aXNlZCBmaW5ldHVuaW5nIGFuZCBkaXJlY3QgcHJlZmVyZW5jZSBvcHRpbWl6YXRpb24uXG5cbkZvciBtb3JlIGRldGFpbHMsIHNlZSB0aGlzIFtibG9nIHBvc3RdKGh0dHBzOi8vcXdlbmxtLmdpdGh1Yi5pby9ibG9nL3F3ZW4yLykgYW5kIFtHaXRIdWIgcmVwb10oaHR0cHM6Ly9naXRodWIuY29tL1F3ZW5MTS9Rd2VuMikuXG5cblVzYWdlIG9mIHRoaXMgbW9kZWwgaXMgc3ViamVjdCB0byBbVG9uZ3lpIFFpYW53ZW4gTElDRU5TRSBBR1JFRU1FTlRdKGh0dHBzOi8vaHVnZ2luZ2ZhY2UuY28vUXdlbi9Rd2VuMS41LTExMEItQ2hhdC9ibG9iL21haW4vTElDRU5TRSkuIiwiY29udGV4dF9sZW5ndGgiOjMyNzY4LCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiUXdlbiIsImluc3RydWN0X3R5cGUiOiJjaGF0bWwifSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMDkiLCJjb21wbGV0aW9uIjoiMC4wMDAwMDA5IiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjozMjc2OCwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjo0MDk2LCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoibWlzdHJhbGFpL21pc3RyYWwtN2ItaW5zdHJ1Y3Q6ZnJlZSIsIm5hbWUiOiJNaXN0cmFsOiBNaXN0cmFsIDdCIEluc3RydWN0IChmcmVlKSIsImNyZWF0ZWQiOjE3MTY3NjgwMDAsImRlc2NyaXB0aW9uIjoiQSBoaWdoLXBlcmZvcm1pbmcsIGluZHVzdHJ5LXN0YW5kYXJkIDcuM0IgcGFyYW1ldGVyIG1vZGVsLCB3aXRoIG9wdGltaXphdGlvbnMgZm9yIHNwZWVkIGFuZCBjb250ZXh0IGxlbmd0aC5cblxuKk1pc3RyYWwgN0IgSW5zdHJ1Y3QgaGFzIG11bHRpcGxlIHZlcnNpb24gdmFyaWFudHMsIGFuZCB0aGlzIGlzIGludGVuZGVkIHRvIGJlIHRoZSBsYXRlc3QgdmVyc2lvbi4qIiwiY29udGV4dF9sZW5ndGgiOjMyNzY4LCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiTWlzdHJhbCIsImluc3RydWN0X3R5cGUiOiJtaXN0cmFsIn0sInByaWNpbmciOnsicHJvbXB0IjoiMCIsImNvbXBsZXRpb24iOiIwIiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjozMjc2OCwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjoxNjM4NCwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6Im1pc3RyYWxhaS9taXN0cmFsLTdiLWluc3RydWN0IiwibmFtZSI6Ik1pc3RyYWw6IE1pc3RyYWwgN0IgSW5zdHJ1Y3QiLCJjcmVhdGVkIjoxNzE2NzY4MDAwLCJkZXNjcmlwdGlvbiI6IkEgaGlnaC1wZXJmb3JtaW5nLCBpbmR1c3RyeS1zdGFuZGFyZCA3LjNCIHBhcmFtZXRlciBtb2RlbCwgd2l0aCBvcHRpbWl6YXRpb25zIGZvciBzcGVlZCBhbmQgY29udGV4dCBsZW5ndGguXG5cbipNaXN0cmFsIDdCIEluc3RydWN0IGhhcyBtdWx0aXBsZSB2ZXJzaW9uIHZhcmlhbnRzLCBhbmQgdGhpcyBpcyBpbnRlbmRlZCB0byBiZSB0aGUgbGF0ZXN0IHZlcnNpb24uKiIsImNvbnRleHRfbGVuZ3RoIjozMjc2OCwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dC0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6Ik1pc3RyYWwiLCJpbnN0cnVjdF90eXBlIjoibWlzdHJhbCJ9LCJwcmljaW5nIjp7InByb21wdCI6IjAuMDAwMDAwMDI5IiwiY29tcGxldGlvbiI6IjAuMDAwMDAwMDU1IiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjozMjc2OCwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjoxNjM4NCwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6Im1pc3RyYWxhaS9taXN0cmFsLTdiLWluc3RydWN0LXYwLjMiLCJuYW1lIjoiTWlzdHJhbDogTWlzdHJhbCA3QiBJbnN0cnVjdCB2MC4zIiwiY3JlYXRlZCI6MTcxNjc2ODAwMCwiZGVzY3JpcHRpb24iOiJBIGhpZ2gtcGVyZm9ybWluZywgaW5kdXN0cnktc3RhbmRhcmQgNy4zQiBwYXJhbWV0ZXIgbW9kZWwsIHdpdGggb3B0aW1pemF0aW9ucyBmb3Igc3BlZWQgYW5kIGNvbnRleHQgbGVuZ3RoLlxuXG5BbiBpbXByb3ZlZCB2ZXJzaW9uIG9mIFtNaXN0cmFsIDdCIEluc3RydWN0IHYwLjJdKC9tb2RlbHMvbWlzdHJhbGFpL21pc3RyYWwtN2ItaW5zdHJ1Y3QtdjAuMiksIHdpdGggdGhlIGZvbGxvd2luZyBjaGFuZ2VzOlxuXG4tIEV4dGVuZGVkIHZvY2FidWxhcnkgdG8gMzI3Njhcbi0gU3VwcG9ydHMgdjMgVG9rZW5pemVyXG4tIFN1cHBvcnRzIGZ1bmN0aW9uIGNhbGxpbmdcblxuTk9URTogU3VwcG9ydCBmb3IgZnVuY3Rpb24gY2FsbGluZyBkZXBlbmRzIG9uIHRoZSBwcm92aWRlci4iLCJjb250ZXh0X2xlbmd0aCI6MzI3NjgsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJNaXN0cmFsIiwiaW5zdHJ1Y3RfdHlwZSI6Im1pc3RyYWwifSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMDAyOSIsImNvbXBsZXRpb24iOiIwLjAwMDAwMDA1NSIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6MzI3NjgsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6MTYzODQsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJub3VzcmVzZWFyY2gvaGVybWVzLTItcHJvLWxsYW1hLTMtOGIiLCJuYW1lIjoiTm91c1Jlc2VhcmNoOiBIZXJtZXMgMiBQcm8gLSBMbGFtYS0zIDhCIiwiY3JlYXRlZCI6MTcxNjc2ODAwMCwiZGVzY3JpcHRpb24iOiJIZXJtZXMgMiBQcm8gaXMgYW4gdXBncmFkZWQsIHJldHJhaW5lZCB2ZXJzaW9uIG9mIE5vdXMgSGVybWVzIDIsIGNvbnNpc3Rpbmcgb2YgYW4gdXBkYXRlZCBhbmQgY2xlYW5lZCB2ZXJzaW9uIG9mIHRoZSBPcGVuSGVybWVzIDIuNSBEYXRhc2V0LCBhcyB3ZWxsIGFzIGEgbmV3bHkgaW50cm9kdWNlZCBGdW5jdGlvbiBDYWxsaW5nIGFuZCBKU09OIE1vZGUgZGF0YXNldCBkZXZlbG9wZWQgaW4taG91c2UuIiwiY29udGV4dF9sZW5ndGgiOjEzMTA3MiwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dC0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6IkxsYW1hMyIsImluc3RydWN0X3R5cGUiOiJjaGF0bWwifSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMDAyNSIsImNvbXBsZXRpb24iOiIwLjAwMDAwMDA0IiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoxMzEwNzIsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6MTMxMDcyLCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoibWljcm9zb2Z0L3BoaS0zLW1pbmktMTI4ay1pbnN0cnVjdCIsIm5hbWUiOiJNaWNyb3NvZnQ6IFBoaS0zIE1pbmkgMTI4SyBJbnN0cnVjdCIsImNyZWF0ZWQiOjE3MTY2ODE2MDAsImRlc2NyaXB0aW9uIjoiUGhpLTMgTWluaSBpcyBhIHBvd2VyZnVsIDMuOEIgcGFyYW1ldGVyIG1vZGVsIGRlc2lnbmVkIGZvciBhZHZhbmNlZCBsYW5ndWFnZSB1bmRlcnN0YW5kaW5nLCByZWFzb25pbmcsIGFuZCBpbnN0cnVjdGlvbiBmb2xsb3dpbmcuIE9wdGltaXplZCB0aHJvdWdoIHN1cGVydmlzZWQgZmluZS10dW5pbmcgYW5kIHByZWZlcmVuY2UgYWRqdXN0bWVudHMsIGl0IGV4Y2VscyBpbiB0YXNrcyBpbnZvbHZpbmcgY29tbW9uIHNlbnNlLCBtYXRoZW1hdGljcywgbG9naWNhbCByZWFzb25pbmcsIGFuZCBjb2RlIHByb2Nlc3NpbmcuXG5cbkF0IHRpbWUgb2YgcmVsZWFzZSwgUGhpLTMgTWVkaXVtIGRlbW9uc3RyYXRlZCBzdGF0ZS1vZi10aGUtYXJ0IHBlcmZvcm1hbmNlIGFtb25nIGxpZ2h0d2VpZ2h0IG1vZGVscy4gVGhpcyBtb2RlbCBpcyBzdGF0aWMsIHRyYWluZWQgb24gYW4gb2ZmbGluZSBkYXRhc2V0IHdpdGggYW4gT2N0b2JlciAyMDIzIGN1dG9mZiBkYXRlLiIsImNvbnRleHRfbGVuZ3RoIjoxMjgwMDAsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJPdGhlciIsImluc3RydWN0X3R5cGUiOiJwaGkzIn0sInByaWNpbmciOnsicHJvbXB0IjoiMC4wMDAwMDAxIiwiY29tcGxldGlvbiI6IjAuMDAwMDAwMSIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6MTI4MDAwLCJtYXhfY29tcGxldGlvbl90b2tlbnMiOm51bGwsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJtaWNyb3NvZnQvcGhpLTMtbWVkaXVtLTEyOGstaW5zdHJ1Y3QiLCJuYW1lIjoiTWljcm9zb2Z0OiBQaGktMyBNZWRpdW0gMTI4SyBJbnN0cnVjdCIsImNyZWF0ZWQiOjE3MTY1MDg4MDAsImRlc2NyaXB0aW9uIjoiUGhpLTMgMTI4SyBNZWRpdW0gaXMgYSBwb3dlcmZ1bCAxNC1iaWxsaW9uIHBhcmFtZXRlciBtb2RlbCBkZXNpZ25lZCBmb3IgYWR2YW5jZWQgbGFuZ3VhZ2UgdW5kZXJzdGFuZGluZywgcmVhc29uaW5nLCBhbmQgaW5zdHJ1Y3Rpb24gZm9sbG93aW5nLiBPcHRpbWl6ZWQgdGhyb3VnaCBzdXBlcnZpc2VkIGZpbmUtdHVuaW5nIGFuZCBwcmVmZXJlbmNlIGFkanVzdG1lbnRzLCBpdCBleGNlbHMgaW4gdGFza3MgaW52b2x2aW5nIGNvbW1vbiBzZW5zZSwgbWF0aGVtYXRpY3MsIGxvZ2ljYWwgcmVhc29uaW5nLCBhbmQgY29kZSBwcm9jZXNzaW5nLlxuXG5BdCB0aW1lIG9mIHJlbGVhc2UsIFBoaS0zIE1lZGl1bSBkZW1vbnN0cmF0ZWQgc3RhdGUtb2YtdGhlLWFydCBwZXJmb3JtYW5jZSBhbW9uZyBsaWdodHdlaWdodCBtb2RlbHMuIEluIHRoZSBNTUxVLVBybyBldmFsLCB0aGUgbW9kZWwgZXZlbiBjb21lcyBjbG9zZSB0byBhIExsYW1hMyA3MEIgbGV2ZWwgb2YgcGVyZm9ybWFuY2UuXG5cbkZvciA0ayBjb250ZXh0IGxlbmd0aCwgdHJ5IFtQaGktMyBNZWRpdW0gNEtdKC9tb2RlbHMvbWljcm9zb2Z0L3BoaS0zLW1lZGl1bS00ay1pbnN0cnVjdCkuIiwiY29udGV4dF9sZW5ndGgiOjEyODAwMCwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dC0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6Ik90aGVyIiwiaW5zdHJ1Y3RfdHlwZSI6InBoaTMifSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMSIsImNvbXBsZXRpb24iOiIwLjAwMDAwMSIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6MTI4MDAwLCJtYXhfY29tcGxldGlvbl90b2tlbnMiOm51bGwsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJuZXZlcnNsZWVwL2xsYW1hLTMtbHVtaW1haWQtNzBiIiwibmFtZSI6Ik5ldmVyU2xlZXA6IExsYW1hIDMgTHVtaW1haWQgNzBCIiwiY3JlYXRlZCI6MTcxNTgxNzYwMCwiZGVzY3JpcHRpb24iOiJUaGUgTmV2ZXJTbGVlcCB0ZWFtIGlzIGJhY2ssIHdpdGggYSBMbGFtYSAzIDcwQiBmaW5ldHVuZSB0cmFpbmVkIG9uIHRoZWlyIGN1cmF0ZWQgcm9sZXBsYXkgZGF0YS4gU3RyaWtpbmcgYSBiYWxhbmNlIGJldHdlZW4gZVJQIGFuZCBSUCwgTHVtaW1haWQgd2FzIGRlc2lnbmVkIHRvIGJlIHNlcmlvdXMsIHlldCB1bmNlbnNvcmVkIHdoZW4gbmVjZXNzYXJ5LlxuXG5UbyBlbmhhbmNlIGl0J3Mgb3ZlcmFsbCBpbnRlbGxpZ2VuY2UgYW5kIGNoYXQgY2FwYWJpbGl0eSwgcm91Z2hseSA0MCUgb2YgdGhlIHRyYWluaW5nIGRhdGEgd2FzIG5vdCByb2xlcGxheS4gVGhpcyBwcm92aWRlcyBhIGJyZWFkdGggb2Yga25vd2xlZGdlIHRvIGFjY2Vzcywgd2hpbGUgc3RpbGwga2VlcGluZyByb2xlcGxheSBhcyB0aGUgcHJpbWFyeSBzdHJlbmd0aC5cblxuVXNhZ2Ugb2YgdGhpcyBtb2RlbCBpcyBzdWJqZWN0IHRvIFtNZXRhJ3MgQWNjZXB0YWJsZSBVc2UgUG9saWN5XShodHRwczovL2xsYW1hLm1ldGEuY29tL2xsYW1hMy91c2UtcG9saWN5LykuIiwiY29udGV4dF9sZW5ndGgiOjgxOTIsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJMbGFtYTMiLCJpbnN0cnVjdF90eXBlIjoibGxhbWEzIn0sInByaWNpbmciOnsicHJvbXB0IjoiMC4wMDAwMDQiLCJjb21wbGV0aW9uIjoiMC4wMDAwMDYiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjgxOTIsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6NDA5NiwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6Imdvb2dsZS9nZW1pbmktZmxhc2gtMS41IiwibmFtZSI6Ikdvb2dsZTogR2VtaW5pIDEuNSBGbGFzaCAiLCJjcmVhdGVkIjoxNzE1NjQ0ODAwLCJkZXNjcmlwdGlvbiI6IkdlbWluaSAxLjUgRmxhc2ggaXMgYSBmb3VuZGF0aW9uIG1vZGVsIHRoYXQgcGVyZm9ybXMgd2VsbCBhdCBhIHZhcmlldHkgb2YgbXVsdGltb2RhbCB0YXNrcyBzdWNoIGFzIHZpc3VhbCB1bmRlcnN0YW5kaW5nLCBjbGFzc2lmaWNhdGlvbiwgc3VtbWFyaXphdGlvbiwgYW5kIGNyZWF0aW5nIGNvbnRlbnQgZnJvbSBpbWFnZSwgYXVkaW8gYW5kIHZpZGVvLiBJdCdzIGFkZXB0IGF0IHByb2Nlc3NpbmcgdmlzdWFsIGFuZCB0ZXh0IGlucHV0cyBzdWNoIGFzIHBob3RvZ3JhcGhzLCBkb2N1bWVudHMsIGluZm9ncmFwaGljcywgYW5kIHNjcmVlbnNob3RzLlxuXG5HZW1pbmkgMS41IEZsYXNoIGlzIGRlc2lnbmVkIGZvciBoaWdoLXZvbHVtZSwgaGlnaC1mcmVxdWVuY3kgdGFza3Mgd2hlcmUgY29zdCBhbmQgbGF0ZW5jeSBtYXR0ZXIuIE9uIG1vc3QgY29tbW9uIHRhc2tzLCBGbGFzaCBhY2hpZXZlcyBjb21wYXJhYmxlIHF1YWxpdHkgdG8gb3RoZXIgR2VtaW5pIFBybyBtb2RlbHMgYXQgYSBzaWduaWZpY2FudGx5IHJlZHVjZWQgY29zdC4gRmxhc2ggaXMgd2VsbC1zdWl0ZWQgZm9yIGFwcGxpY2F0aW9ucyBsaWtlIGNoYXQgYXNzaXN0YW50cyBhbmQgb24tZGVtYW5kIGNvbnRlbnQgZ2VuZXJhdGlvbiB3aGVyZSBzcGVlZCBhbmQgc2NhbGUgbWF0dGVyLlxuXG5Vc2FnZSBvZiBHZW1pbmkgaXMgc3ViamVjdCB0byBHb29nbGUncyBbR2VtaW5pIFRlcm1zIG9mIFVzZV0oaHR0cHM6Ly9haS5nb29nbGUuZGV2L3Rlcm1zKS5cblxuI211bHRpbW9kYWwiLCJjb250ZXh0X2xlbmd0aCI6MTAwMDAwMCwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dCtpbWFnZS0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCIsImltYWdlIl0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiR2VtaW5pIiwiaW5zdHJ1Y3RfdHlwZSI6bnVsbH0sInByaWNpbmciOnsicHJvbXB0IjoiMC4wMDAwMDAwNzUiLCJjb21wbGV0aW9uIjoiMC4wMDAwMDAzIiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAuMDAwMDQiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAiLCJpbnB1dF9jYWNoZV9yZWFkIjoiMC4wMDAwMDAwMTg3NSIsImlucHV0X2NhY2hlX3dyaXRlIjoiMC4wMDAwMDAxNTgzIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6MTAwMDAwMCwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjo4MTkyLCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoib3BlbmFpL2dwdC00byIsIm5hbWUiOiJPcGVuQUk6IEdQVC00byIsImNyZWF0ZWQiOjE3MTU1NTg0MDAsImRlc2NyaXB0aW9uIjoiR1BULTRvIChcIm9cIiBmb3IgXCJvbW5pXCIpIGlzIE9wZW5BSSdzIGxhdGVzdCBBSSBtb2RlbCwgc3VwcG9ydGluZyBib3RoIHRleHQgYW5kIGltYWdlIGlucHV0cyB3aXRoIHRleHQgb3V0cHV0cy4gSXQgbWFpbnRhaW5zIHRoZSBpbnRlbGxpZ2VuY2UgbGV2ZWwgb2YgW0dQVC00IFR1cmJvXSgvbW9kZWxzL29wZW5haS9ncHQtNC10dXJibykgd2hpbGUgYmVpbmcgdHdpY2UgYXMgZmFzdCBhbmQgNTAlIG1vcmUgY29zdC1lZmZlY3RpdmUuIEdQVC00byBhbHNvIG9mZmVycyBpbXByb3ZlZCBwZXJmb3JtYW5jZSBpbiBwcm9jZXNzaW5nIG5vbi1FbmdsaXNoIGxhbmd1YWdlcyBhbmQgZW5oYW5jZWQgdmlzdWFsIGNhcGFiaWxpdGllcy5cblxuRm9yIGJlbmNobWFya2luZyBhZ2FpbnN0IG90aGVyIG1vZGVscywgaXQgd2FzIGJyaWVmbHkgY2FsbGVkIFtcImltLWFsc28tYS1nb29kLWdwdDItY2hhdGJvdFwiXShodHRwczovL3R3aXR0ZXIuY29tL0xpYW1GZWR1cy9zdGF0dXMvMTc5MDA2NDk2Mzk2NjM3MDIwOSlcblxuI211bHRpbW9kYWwiLCJjb250ZXh0X2xlbmd0aCI6MTI4MDAwLCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0K2ltYWdlLT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0IiwiaW1hZ2UiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJHUFQiLCJpbnN0cnVjdF90eXBlIjpudWxsfSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMjUiLCJjb21wbGV0aW9uIjoiMC4wMDAwMSIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwLjAwMzYxMyIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCIsImlucHV0X2NhY2hlX3JlYWQiOiIwLjAwMDAwMTI1In0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6MTI4MDAwLCJtYXhfY29tcGxldGlvbl90b2tlbnMiOjE2Mzg0LCJpc19tb2RlcmF0ZWQiOnRydWV9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJvcGVuYWkvZ3B0LTRvOmV4dGVuZGVkIiwibmFtZSI6Ik9wZW5BSTogR1BULTRvIChleHRlbmRlZCkiLCJjcmVhdGVkIjoxNzE1NTU4NDAwLCJkZXNjcmlwdGlvbiI6IkdQVC00byAoXCJvXCIgZm9yIFwib21uaVwiKSBpcyBPcGVuQUkncyBsYXRlc3QgQUkgbW9kZWwsIHN1cHBvcnRpbmcgYm90aCB0ZXh0IGFuZCBpbWFnZSBpbnB1dHMgd2l0aCB0ZXh0IG91dHB1dHMuIEl0IG1haW50YWlucyB0aGUgaW50ZWxsaWdlbmNlIGxldmVsIG9mIFtHUFQtNCBUdXJib10oL21vZGVscy9vcGVuYWkvZ3B0LTQtdHVyYm8pIHdoaWxlIGJlaW5nIHR3aWNlIGFzIGZhc3QgYW5kIDUwJSBtb3JlIGNvc3QtZWZmZWN0aXZlLiBHUFQtNG8gYWxzbyBvZmZlcnMgaW1wcm92ZWQgcGVyZm9ybWFuY2UgaW4gcHJvY2Vzc2luZyBub24tRW5nbGlzaCBsYW5ndWFnZXMgYW5kIGVuaGFuY2VkIHZpc3VhbCBjYXBhYmlsaXRpZXMuXG5cbkZvciBiZW5jaG1hcmtpbmcgYWdhaW5zdCBvdGhlciBtb2RlbHMsIGl0IHdhcyBicmllZmx5IGNhbGxlZCBbXCJpbS1hbHNvLWEtZ29vZC1ncHQyLWNoYXRib3RcIl0oaHR0cHM6Ly90d2l0dGVyLmNvbS9MaWFtRmVkdXMvc3RhdHVzLzE3OTAwNjQ5NjM5NjYzNzAyMDkpXG5cbiNtdWx0aW1vZGFsIiwiY29udGV4dF9sZW5ndGgiOjEyODAwMCwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dCtpbWFnZS0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCIsImltYWdlIl0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiR1BUIiwiaW5zdHJ1Y3RfdHlwZSI6bnVsbH0sInByaWNpbmciOnsicHJvbXB0IjoiMC4wMDAwMDYiLCJjb21wbGV0aW9uIjoiMC4wMDAwMTgiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMC4wMDcyMjUiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoxMjgwMDAsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6NjQwMDAsImlzX21vZGVyYXRlZCI6dHJ1ZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6Im9wZW5haS9ncHQtNG8tMjAyNC0wNS0xMyIsIm5hbWUiOiJPcGVuQUk6IEdQVC00byAoMjAyNC0wNS0xMykiLCJjcmVhdGVkIjoxNzE1NTU4NDAwLCJkZXNjcmlwdGlvbiI6IkdQVC00byAoXCJvXCIgZm9yIFwib21uaVwiKSBpcyBPcGVuQUkncyBsYXRlc3QgQUkgbW9kZWwsIHN1cHBvcnRpbmcgYm90aCB0ZXh0IGFuZCBpbWFnZSBpbnB1dHMgd2l0aCB0ZXh0IG91dHB1dHMuIEl0IG1haW50YWlucyB0aGUgaW50ZWxsaWdlbmNlIGxldmVsIG9mIFtHUFQtNCBUdXJib10oL21vZGVscy9vcGVuYWkvZ3B0LTQtdHVyYm8pIHdoaWxlIGJlaW5nIHR3aWNlIGFzIGZhc3QgYW5kIDUwJSBtb3JlIGNvc3QtZWZmZWN0aXZlLiBHUFQtNG8gYWxzbyBvZmZlcnMgaW1wcm92ZWQgcGVyZm9ybWFuY2UgaW4gcHJvY2Vzc2luZyBub24tRW5nbGlzaCBsYW5ndWFnZXMgYW5kIGVuaGFuY2VkIHZpc3VhbCBjYXBhYmlsaXRpZXMuXG5cbkZvciBiZW5jaG1hcmtpbmcgYWdhaW5zdCBvdGhlciBtb2RlbHMsIGl0IHdhcyBicmllZmx5IGNhbGxlZCBbXCJpbS1hbHNvLWEtZ29vZC1ncHQyLWNoYXRib3RcIl0oaHR0cHM6Ly90d2l0dGVyLmNvbS9MaWFtRmVkdXMvc3RhdHVzLzE3OTAwNjQ5NjM5NjYzNzAyMDkpXG5cbiNtdWx0aW1vZGFsIiwiY29udGV4dF9sZW5ndGgiOjEyODAwMCwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dCtpbWFnZS0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCIsImltYWdlIl0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiR1BUIiwiaW5zdHJ1Y3RfdHlwZSI6bnVsbH0sInByaWNpbmciOnsicHJvbXB0IjoiMC4wMDAwMDUiLCJjb21wbGV0aW9uIjoiMC4wMDAwMTUiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMC4wMDcyMjUiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoxMjgwMDAsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6NDA5NiwiaXNfbW9kZXJhdGVkIjp0cnVlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoibWV0YS1sbGFtYS9sbGFtYS1ndWFyZC0yLThiIiwibmFtZSI6Ik1ldGE6IExsYW1hR3VhcmQgMiA4QiIsImNyZWF0ZWQiOjE3MTU1NTg0MDAsImRlc2NyaXB0aW9uIjoiVGhpcyBzYWZlZ3VhcmQgbW9kZWwgaGFzIDhCIHBhcmFtZXRlcnMgYW5kIGlzIGJhc2VkIG9uIHRoZSBMbGFtYSAzIGZhbWlseS4gSnVzdCBsaWtlIGlzIHByZWRlY2Vzc29yLCBbTGxhbWFHdWFyZCAxXShodHRwczovL2h1Z2dpbmdmYWNlLmNvL21ldGEtbGxhbWEvTGxhbWFHdWFyZC03YiksIGl0IGNhbiBkbyBib3RoIHByb21wdCBhbmQgcmVzcG9uc2UgY2xhc3NpZmljYXRpb24uXG5cbkxsYW1hR3VhcmQgMiBhY3RzIGFzIGEgbm9ybWFsIExMTSB3b3VsZCwgZ2VuZXJhdGluZyB0ZXh0IHRoYXQgaW5kaWNhdGVzIHdoZXRoZXIgdGhlIGdpdmVuIGlucHV0L291dHB1dCBpcyBzYWZlL3Vuc2FmZS4gSWYgZGVlbWVkIHVuc2FmZSwgaXQgd2lsbCBhbHNvIHNoYXJlIHRoZSBjb250ZW50IGNhdGVnb3JpZXMgdmlvbGF0ZWQuXG5cbkZvciBiZXN0IHJlc3VsdHMsIHBsZWFzZSB1c2UgcmF3IHByb21wdCBpbnB1dCBvciB0aGUgYC9jb21wbGV0aW9uc2AgZW5kcG9pbnQsIGluc3RlYWQgb2YgdGhlIGNoYXQgQVBJLlxuXG5JdCBoYXMgZGVtb25zdHJhdGVkIHN0cm9uZyBwZXJmb3JtYW5jZSBjb21wYXJlZCB0byBsZWFkaW5nIGNsb3NlZC1zb3VyY2UgbW9kZWxzIGluIGh1bWFuIGV2YWx1YXRpb25zLlxuXG5UbyByZWFkIG1vcmUgYWJvdXQgdGhlIG1vZGVsIHJlbGVhc2UsIFtjbGljayBoZXJlXShodHRwczovL2FpLm1ldGEuY29tL2Jsb2cvbWV0YS1sbGFtYS0zLykuIFVzYWdlIG9mIHRoaXMgbW9kZWwgaXMgc3ViamVjdCB0byBbTWV0YSdzIEFjY2VwdGFibGUgVXNlIFBvbGljeV0oaHR0cHM6Ly9sbGFtYS5tZXRhLmNvbS9sbGFtYTMvdXNlLXBvbGljeS8pLiIsImNvbnRleHRfbGVuZ3RoIjo4MTkyLCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiTGxhbWEzIiwiaW5zdHJ1Y3RfdHlwZSI6Im5vbmUifSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMDIiLCJjb21wbGV0aW9uIjoiMC4wMDAwMDAyIiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjo4MTkyLCJtYXhfY29tcGxldGlvbl90b2tlbnMiOm51bGwsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJuZXZlcnNsZWVwL2xsYW1hLTMtbHVtaW1haWQtOGI6ZXh0ZW5kZWQiLCJuYW1lIjoiTmV2ZXJTbGVlcDogTGxhbWEgMyBMdW1pbWFpZCA4QiAoZXh0ZW5kZWQpIiwiY3JlYXRlZCI6MTcxNDc4MDgwMCwiZGVzY3JpcHRpb24iOiJUaGUgTmV2ZXJTbGVlcCB0ZWFtIGlzIGJhY2ssIHdpdGggYSBMbGFtYSAzIDhCIGZpbmV0dW5lIHRyYWluZWQgb24gdGhlaXIgY3VyYXRlZCByb2xlcGxheSBkYXRhLiBTdHJpa2luZyBhIGJhbGFuY2UgYmV0d2VlbiBlUlAgYW5kIFJQLCBMdW1pbWFpZCB3YXMgZGVzaWduZWQgdG8gYmUgc2VyaW91cywgeWV0IHVuY2Vuc29yZWQgd2hlbiBuZWNlc3NhcnkuXG5cblRvIGVuaGFuY2UgaXQncyBvdmVyYWxsIGludGVsbGlnZW5jZSBhbmQgY2hhdCBjYXBhYmlsaXR5LCByb3VnaGx5IDQwJSBvZiB0aGUgdHJhaW5pbmcgZGF0YSB3YXMgbm90IHJvbGVwbGF5LiBUaGlzIHByb3ZpZGVzIGEgYnJlYWR0aCBvZiBrbm93bGVkZ2UgdG8gYWNjZXNzLCB3aGlsZSBzdGlsbCBrZWVwaW5nIHJvbGVwbGF5IGFzIHRoZSBwcmltYXJ5IHN0cmVuZ3RoLlxuXG5Vc2FnZSBvZiB0aGlzIG1vZGVsIGlzIHN1YmplY3QgdG8gW01ldGEncyBBY2NlcHRhYmxlIFVzZSBQb2xpY3ldKGh0dHBzOi8vbGxhbWEubWV0YS5jb20vbGxhbWEzL3VzZS1wb2xpY3kvKS4iLCJjb250ZXh0X2xlbmd0aCI6MjQ1NzYsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJMbGFtYTMiLCJpbnN0cnVjdF90eXBlIjoibGxhbWEzIn0sInByaWNpbmciOnsicHJvbXB0IjoiMC4wMDAwMDAwOTM3NSIsImNvbXBsZXRpb24iOiIwLjAwMDAwMDc1IiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoyNDU3NiwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjoyMDQ4LCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoibmV2ZXJzbGVlcC9sbGFtYS0zLWx1bWltYWlkLThiIiwibmFtZSI6Ik5ldmVyU2xlZXA6IExsYW1hIDMgTHVtaW1haWQgOEIiLCJjcmVhdGVkIjoxNzE0NzgwODAwLCJkZXNjcmlwdGlvbiI6IlRoZSBOZXZlclNsZWVwIHRlYW0gaXMgYmFjaywgd2l0aCBhIExsYW1hIDMgOEIgZmluZXR1bmUgdHJhaW5lZCBvbiB0aGVpciBjdXJhdGVkIHJvbGVwbGF5IGRhdGEuIFN0cmlraW5nIGEgYmFsYW5jZSBiZXR3ZWVuIGVSUCBhbmQgUlAsIEx1bWltYWlkIHdhcyBkZXNpZ25lZCB0byBiZSBzZXJpb3VzLCB5ZXQgdW5jZW5zb3JlZCB3aGVuIG5lY2Vzc2FyeS5cblxuVG8gZW5oYW5jZSBpdCdzIG92ZXJhbGwgaW50ZWxsaWdlbmNlIGFuZCBjaGF0IGNhcGFiaWxpdHksIHJvdWdobHkgNDAlIG9mIHRoZSB0cmFpbmluZyBkYXRhIHdhcyBub3Qgcm9sZXBsYXkuIFRoaXMgcHJvdmlkZXMgYSBicmVhZHRoIG9mIGtub3dsZWRnZSB0byBhY2Nlc3MsIHdoaWxlIHN0aWxsIGtlZXBpbmcgcm9sZXBsYXkgYXMgdGhlIHByaW1hcnkgc3RyZW5ndGguXG5cblVzYWdlIG9mIHRoaXMgbW9kZWwgaXMgc3ViamVjdCB0byBbTWV0YSdzIEFjY2VwdGFibGUgVXNlIFBvbGljeV0oaHR0cHM6Ly9sbGFtYS5tZXRhLmNvbS9sbGFtYTMvdXNlLXBvbGljeS8pLiIsImNvbnRleHRfbGVuZ3RoIjoyNDU3NiwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dC0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6IkxsYW1hMyIsImluc3RydWN0X3R5cGUiOiJsbGFtYTMifSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMDA5Mzc1IiwiY29tcGxldGlvbiI6IjAuMDAwMDAwNzUiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjI0NTc2LCJtYXhfY29tcGxldGlvbl90b2tlbnMiOjIwNDgsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJzYW8xMGsvZmltYnVsdmV0ci0xMWItdjIiLCJuYW1lIjoiRmltYnVsdmV0ciAxMUIgdjIiLCJjcmVhdGVkIjoxNzEzNjU3NjAwLCJkZXNjcmlwdGlvbiI6IkNyZWF0aXZlIHdyaXRpbmcgbW9kZWwsIHJvdXRlZCB3aXRoIHBlcm1pc3Npb24uIEl0J3MgZmFzdCwgaXQga2VlcHMgdGhlIGNvbnZlcnNhdGlvbiBnb2luZywgYW5kIGl0IHN0YXlzIGluIGNoYXJhY3Rlci5cblxuSWYgeW91IHN1Ym1pdCBhIHJhdyBwcm9tcHQsIHlvdSBjYW4gdXNlIEFscGFjYSBvciBWaWN1bmEgZm9ybWF0cy4iLCJjb250ZXh0X2xlbmd0aCI6NDA5NiwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dC0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6IkxsYW1hMiIsImluc3RydWN0X3R5cGUiOiJhbHBhY2EifSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMDgiLCJjb21wbGV0aW9uIjoiMC4wMDAwMDEyIiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjo0MDk2LCJtYXhfY29tcGxldGlvbl90b2tlbnMiOjQwOTYsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJtZXRhLWxsYW1hL2xsYW1hLTMtOGItaW5zdHJ1Y3QiLCJuYW1lIjoiTWV0YTogTGxhbWEgMyA4QiBJbnN0cnVjdCIsImNyZWF0ZWQiOjE3MTMzOTg0MDAsImRlc2NyaXB0aW9uIjoiTWV0YSdzIGxhdGVzdCBjbGFzcyBvZiBtb2RlbCAoTGxhbWEgMykgbGF1bmNoZWQgd2l0aCBhIHZhcmlldHkgb2Ygc2l6ZXMgJiBmbGF2b3JzLiBUaGlzIDhCIGluc3RydWN0LXR1bmVkIHZlcnNpb24gd2FzIG9wdGltaXplZCBmb3IgaGlnaCBxdWFsaXR5IGRpYWxvZ3VlIHVzZWNhc2VzLlxuXG5JdCBoYXMgZGVtb25zdHJhdGVkIHN0cm9uZyBwZXJmb3JtYW5jZSBjb21wYXJlZCB0byBsZWFkaW5nIGNsb3NlZC1zb3VyY2UgbW9kZWxzIGluIGh1bWFuIGV2YWx1YXRpb25zLlxuXG5UbyByZWFkIG1vcmUgYWJvdXQgdGhlIG1vZGVsIHJlbGVhc2UsIFtjbGljayBoZXJlXShodHRwczovL2FpLm1ldGEuY29tL2Jsb2cvbWV0YS1sbGFtYS0zLykuIFVzYWdlIG9mIHRoaXMgbW9kZWwgaXMgc3ViamVjdCB0byBbTWV0YSdzIEFjY2VwdGFibGUgVXNlIFBvbGljeV0oaHR0cHM6Ly9sbGFtYS5tZXRhLmNvbS9sbGFtYTMvdXNlLXBvbGljeS8pLiIsImNvbnRleHRfbGVuZ3RoIjo4MTkyLCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiTGxhbWEzIiwiaW5zdHJ1Y3RfdHlwZSI6ImxsYW1hMyJ9LCJwcmljaW5nIjp7InByb21wdCI6IjAuMDAwMDAwMDMiLCJjb21wbGV0aW9uIjoiMC4wMDAwMDAwNiIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6ODE5MiwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjoxNjM4NCwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6Im1ldGEtbGxhbWEvbGxhbWEtMy03MGItaW5zdHJ1Y3QiLCJuYW1lIjoiTWV0YTogTGxhbWEgMyA3MEIgSW5zdHJ1Y3QiLCJjcmVhdGVkIjoxNzEzMzk4NDAwLCJkZXNjcmlwdGlvbiI6Ik1ldGEncyBsYXRlc3QgY2xhc3Mgb2YgbW9kZWwgKExsYW1hIDMpIGxhdW5jaGVkIHdpdGggYSB2YXJpZXR5IG9mIHNpemVzICYgZmxhdm9ycy4gVGhpcyA3MEIgaW5zdHJ1Y3QtdHVuZWQgdmVyc2lvbiB3YXMgb3B0aW1pemVkIGZvciBoaWdoIHF1YWxpdHkgZGlhbG9ndWUgdXNlY2FzZXMuXG5cbkl0IGhhcyBkZW1vbnN0cmF0ZWQgc3Ryb25nIHBlcmZvcm1hbmNlIGNvbXBhcmVkIHRvIGxlYWRpbmcgY2xvc2VkLXNvdXJjZSBtb2RlbHMgaW4gaHVtYW4gZXZhbHVhdGlvbnMuXG5cblRvIHJlYWQgbW9yZSBhYm91dCB0aGUgbW9kZWwgcmVsZWFzZSwgW2NsaWNrIGhlcmVdKGh0dHBzOi8vYWkubWV0YS5jb20vYmxvZy9tZXRhLWxsYW1hLTMvKS4gVXNhZ2Ugb2YgdGhpcyBtb2RlbCBpcyBzdWJqZWN0IHRvIFtNZXRhJ3MgQWNjZXB0YWJsZSBVc2UgUG9saWN5XShodHRwczovL2xsYW1hLm1ldGEuY29tL2xsYW1hMy91c2UtcG9saWN5LykuIiwiY29udGV4dF9sZW5ndGgiOjgxOTIsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJMbGFtYTMiLCJpbnN0cnVjdF90eXBlIjoibGxhbWEzIn0sInByaWNpbmciOnsicHJvbXB0IjoiMC4wMDAwMDAzIiwiY29tcGxldGlvbiI6IjAuMDAwMDAwNCIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6ODE5MiwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjoxNjM4NCwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6Im1pc3RyYWxhaS9taXh0cmFsLTh4MjJiLWluc3RydWN0IiwibmFtZSI6Ik1pc3RyYWw6IE1peHRyYWwgOHgyMkIgSW5zdHJ1Y3QiLCJjcmVhdGVkIjoxNzEzMzEyMDAwLCJkZXNjcmlwdGlvbiI6Ik1pc3RyYWwncyBvZmZpY2lhbCBpbnN0cnVjdCBmaW5lLXR1bmVkIHZlcnNpb24gb2YgW01peHRyYWwgOHgyMkJdKC9tb2RlbHMvbWlzdHJhbGFpL21peHRyYWwtOHgyMmIpLiBJdCB1c2VzIDM5QiBhY3RpdmUgcGFyYW1ldGVycyBvdXQgb2YgMTQxQiwgb2ZmZXJpbmcgdW5wYXJhbGxlbGVkIGNvc3QgZWZmaWNpZW5jeSBmb3IgaXRzIHNpemUuIEl0cyBzdHJlbmd0aHMgaW5jbHVkZTpcbi0gc3Ryb25nIG1hdGgsIGNvZGluZywgYW5kIHJlYXNvbmluZ1xuLSBsYXJnZSBjb250ZXh0IGxlbmd0aCAoNjRrKVxuLSBmbHVlbmN5IGluIEVuZ2xpc2gsIEZyZW5jaCwgSXRhbGlhbiwgR2VybWFuLCBhbmQgU3BhbmlzaFxuXG5TZWUgYmVuY2htYXJrcyBvbiB0aGUgbGF1bmNoIGFubm91bmNlbWVudCBbaGVyZV0oaHR0cHM6Ly9taXN0cmFsLmFpL25ld3MvbWl4dHJhbC04eDIyYi8pLlxuI21vZSIsImNvbnRleHRfbGVuZ3RoIjo2NTUzNiwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dC0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6Ik1pc3RyYWwiLCJpbnN0cnVjdF90eXBlIjoibWlzdHJhbCJ9LCJwcmljaW5nIjp7InByb21wdCI6IjAuMDAwMDAwOSIsImNvbXBsZXRpb24iOiIwLjAwMDAwMDkiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjY1NTM2LCJtYXhfY29tcGxldGlvbl90b2tlbnMiOm51bGwsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJtaWNyb3NvZnQvd2l6YXJkbG0tMi04eDIyYiIsIm5hbWUiOiJXaXphcmRMTS0yIDh4MjJCIiwiY3JlYXRlZCI6MTcxMzIyNTYwMCwiZGVzY3JpcHRpb24iOiJXaXphcmRMTS0yIDh4MjJCIGlzIE1pY3Jvc29mdCBBSSdzIG1vc3QgYWR2YW5jZWQgV2l6YXJkIG1vZGVsLiBJdCBkZW1vbnN0cmF0ZXMgaGlnaGx5IGNvbXBldGl0aXZlIHBlcmZvcm1hbmNlIGNvbXBhcmVkIHRvIGxlYWRpbmcgcHJvcHJpZXRhcnkgbW9kZWxzLCBhbmQgaXQgY29uc2lzdGVudGx5IG91dHBlcmZvcm1zIGFsbCBleGlzdGluZyBzdGF0ZS1vZi10aGUtYXJ0IG9wZW5zb3VyY2UgbW9kZWxzLlxuXG5JdCBpcyBhbiBpbnN0cnVjdCBmaW5ldHVuZSBvZiBbTWl4dHJhbCA4eDIyQl0oL21vZGVscy9taXN0cmFsYWkvbWl4dHJhbC04eDIyYikuXG5cblRvIHJlYWQgbW9yZSBhYm91dCB0aGUgbW9kZWwgcmVsZWFzZSwgW2NsaWNrIGhlcmVdKGh0dHBzOi8vd2l6YXJkbG0uZ2l0aHViLmlvL1dpemFyZExNMi8pLlxuXG4jbW9lIiwiY29udGV4dF9sZW5ndGgiOjY1NTM2LCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiTWlzdHJhbCIsImluc3RydWN0X3R5cGUiOiJ2aWN1bmEifSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMDUiLCJjb21wbGV0aW9uIjoiMC4wMDAwMDA1IiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjo2NTUzNiwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjoxNjM4NCwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6Im1pY3Jvc29mdC93aXphcmRsbS0yLTdiIiwibmFtZSI6IldpemFyZExNLTIgN0IiLCJjcmVhdGVkIjoxNzEzMjI1NjAwLCJkZXNjcmlwdGlvbiI6IldpemFyZExNLTIgN0IgaXMgdGhlIHNtYWxsZXIgdmFyaWFudCBvZiBNaWNyb3NvZnQgQUkncyBsYXRlc3QgV2l6YXJkIG1vZGVsLiBJdCBpcyB0aGUgZmFzdGVzdCBhbmQgYWNoaWV2ZXMgY29tcGFyYWJsZSBwZXJmb3JtYW5jZSB3aXRoIGV4aXN0aW5nIDEweCBsYXJnZXIgb3BlbnNvdXJjZSBsZWFkaW5nIG1vZGVsc1xuXG5JdCBpcyBhIGZpbmV0dW5lIG9mIFtNaXN0cmFsIDdCIEluc3RydWN0XSgvbW9kZWxzL21pc3RyYWxhaS9taXN0cmFsLTdiLWluc3RydWN0KSwgdXNpbmcgdGhlIHNhbWUgdGVjaG5pcXVlIGFzIFtXaXphcmRMTS0yIDh4MjJCXSgvbW9kZWxzL21pY3Jvc29mdC93aXphcmRsbS0yLTh4MjJiKS5cblxuVG8gcmVhZCBtb3JlIGFib3V0IHRoZSBtb2RlbCByZWxlYXNlLCBbY2xpY2sgaGVyZV0oaHR0cHM6Ly93aXphcmRsbS5naXRodWIuaW8vV2l6YXJkTE0yLykuXG5cbiNtb2UiLCJjb250ZXh0X2xlbmd0aCI6MzIwMDAsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJNaXN0cmFsIiwiaW5zdHJ1Y3RfdHlwZSI6InZpY3VuYSJ9LCJwcmljaW5nIjp7InByb21wdCI6IjAuMDAwMDAwMDciLCJjb21wbGV0aW9uIjoiMC4wMDAwMDAwNyIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6MzIwMDAsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6bnVsbCwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6Imdvb2dsZS9nZW1pbmktcHJvLTEuNSIsIm5hbWUiOiJHb29nbGU6IEdlbWluaSAxLjUgUHJvIiwiY3JlYXRlZCI6MTcxMjYyMDgwMCwiZGVzY3JpcHRpb24iOiJHb29nbGUncyBsYXRlc3QgbXVsdGltb2RhbCBtb2RlbCwgc3VwcG9ydHMgaW1hZ2UgYW5kIHZpZGVvWzBdIGluIHRleHQgb3IgY2hhdCBwcm9tcHRzLlxuXG5PcHRpbWl6ZWQgZm9yIGxhbmd1YWdlIHRhc2tzIGluY2x1ZGluZzpcblxuLSBDb2RlIGdlbmVyYXRpb25cbi0gVGV4dCBnZW5lcmF0aW9uXG4tIFRleHQgZWRpdGluZ1xuLSBQcm9ibGVtIHNvbHZpbmdcbi0gUmVjb21tZW5kYXRpb25zXG4tIEluZm9ybWF0aW9uIGV4dHJhY3Rpb25cbi0gRGF0YSBleHRyYWN0aW9uIG9yIGdlbmVyYXRpb25cbi0gQUkgYWdlbnRzXG5cblVzYWdlIG9mIEdlbWluaSBpcyBzdWJqZWN0IHRvIEdvb2dsZSdzIFtHZW1pbmkgVGVybXMgb2YgVXNlXShodHRwczovL2FpLmdvb2dsZS5kZXYvdGVybXMpLlxuXG4qIFswXTogVmlkZW8gaW5wdXQgaXMgbm90IGF2YWlsYWJsZSB0aHJvdWdoIE9wZW5Sb3V0ZXIgYXQgdGhpcyB0aW1lLiIsImNvbnRleHRfbGVuZ3RoIjoyMDAwMDAwLCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0K2ltYWdlLT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0IiwiaW1hZ2UiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJHZW1pbmkiLCJpbnN0cnVjdF90eXBlIjpudWxsfSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMTI1IiwiY29tcGxldGlvbiI6IjAuMDAwMDA1IiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAuMDAwNjU3NSIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjIwMDAwMDAsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6ODE5MiwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6Im9wZW5haS9ncHQtNC10dXJibyIsIm5hbWUiOiJPcGVuQUk6IEdQVC00IFR1cmJvIiwiY3JlYXRlZCI6MTcxMjYyMDgwMCwiZGVzY3JpcHRpb24iOiJUaGUgbGF0ZXN0IEdQVC00IFR1cmJvIG1vZGVsIHdpdGggdmlzaW9uIGNhcGFiaWxpdGllcy4gVmlzaW9uIHJlcXVlc3RzIGNhbiBub3cgdXNlIEpTT04gbW9kZSBhbmQgZnVuY3Rpb24gY2FsbGluZy5cblxuVHJhaW5pbmcgZGF0YTogdXAgdG8gRGVjZW1iZXIgMjAyMy4iLCJjb250ZXh0X2xlbmd0aCI6MTI4MDAwLCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0K2ltYWdlLT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0IiwiaW1hZ2UiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJHUFQiLCJpbnN0cnVjdF90eXBlIjpudWxsfSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAxIiwiY29tcGxldGlvbiI6IjAuMDAwMDMiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMC4wMTQ0NSIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjEyODAwMCwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjo0MDk2LCJpc19tb2RlcmF0ZWQiOnRydWV9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJjb2hlcmUvY29tbWFuZC1yLXBsdXMiLCJuYW1lIjoiQ29oZXJlOiBDb21tYW5kIFIrIiwiY3JlYXRlZCI6MTcxMjE4ODgwMCwiZGVzY3JpcHRpb24iOiJDb21tYW5kIFIrIGlzIGEgbmV3LCAxMDRCLXBhcmFtZXRlciBMTE0gZnJvbSBDb2hlcmUuIEl0J3MgdXNlZnVsIGZvciByb2xlcGxheSwgZ2VuZXJhbCBjb25zdW1lciB1c2VjYXNlcywgYW5kIFJldHJpZXZhbCBBdWdtZW50ZWQgR2VuZXJhdGlvbiAoUkFHKS5cblxuSXQgb2ZmZXJzIG11bHRpbGluZ3VhbCBzdXBwb3J0IGZvciB0ZW4ga2V5IGxhbmd1YWdlcyB0byBmYWNpbGl0YXRlIGdsb2JhbCBidXNpbmVzcyBvcGVyYXRpb25zLiBTZWUgYmVuY2htYXJrcyBhbmQgdGhlIGxhdW5jaCBwb3N0IFtoZXJlXShodHRwczovL3R4dC5jb2hlcmUuY29tL2NvbW1hbmQtci1wbHVzLW1pY3Jvc29mdC1henVyZS8pLlxuXG5Vc2Ugb2YgdGhpcyBtb2RlbCBpcyBzdWJqZWN0IHRvIENvaGVyZSdzIFtVc2FnZSBQb2xpY3ldKGh0dHBzOi8vZG9jcy5jb2hlcmUuY29tL2RvY3MvdXNhZ2UtcG9saWN5KSBhbmQgW1NhYVMgQWdyZWVtZW50XShodHRwczovL2NvaGVyZS5jb20vc2Fhcy1hZ3JlZW1lbnQpLiIsImNvbnRleHRfbGVuZ3RoIjoxMjgwMDAsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJDb2hlcmUiLCJpbnN0cnVjdF90eXBlIjpudWxsfSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMyIsImNvbXBsZXRpb24iOiIwLjAwMDAxNSIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6MTI4MDAwLCJtYXhfY29tcGxldGlvbl90b2tlbnMiOjQwMDAsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJjb2hlcmUvY29tbWFuZC1yLXBsdXMtMDQtMjAyNCIsIm5hbWUiOiJDb2hlcmU6IENvbW1hbmQgUisgKDA0LTIwMjQpIiwiY3JlYXRlZCI6MTcxMjAxNjAwMCwiZGVzY3JpcHRpb24iOiJDb21tYW5kIFIrIGlzIGEgbmV3LCAxMDRCLXBhcmFtZXRlciBMTE0gZnJvbSBDb2hlcmUuIEl0J3MgdXNlZnVsIGZvciByb2xlcGxheSwgZ2VuZXJhbCBjb25zdW1lciB1c2VjYXNlcywgYW5kIFJldHJpZXZhbCBBdWdtZW50ZWQgR2VuZXJhdGlvbiAoUkFHKS5cblxuSXQgb2ZmZXJzIG11bHRpbGluZ3VhbCBzdXBwb3J0IGZvciB0ZW4ga2V5IGxhbmd1YWdlcyB0byBmYWNpbGl0YXRlIGdsb2JhbCBidXNpbmVzcyBvcGVyYXRpb25zLiBTZWUgYmVuY2htYXJrcyBhbmQgdGhlIGxhdW5jaCBwb3N0IFtoZXJlXShodHRwczovL3R4dC5jb2hlcmUuY29tL2NvbW1hbmQtci1wbHVzLW1pY3Jvc29mdC1henVyZS8pLlxuXG5Vc2Ugb2YgdGhpcyBtb2RlbCBpcyBzdWJqZWN0IHRvIENvaGVyZSdzIFtVc2FnZSBQb2xpY3ldKGh0dHBzOi8vZG9jcy5jb2hlcmUuY29tL2RvY3MvdXNhZ2UtcG9saWN5KSBhbmQgW1NhYVMgQWdyZWVtZW50XShodHRwczovL2NvaGVyZS5jb20vc2Fhcy1hZ3JlZW1lbnQpLiIsImNvbnRleHRfbGVuZ3RoIjoxMjgwMDAsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJDb2hlcmUiLCJpbnN0cnVjdF90eXBlIjpudWxsfSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMyIsImNvbXBsZXRpb24iOiIwLjAwMDAxNSIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6MTI4MDAwLCJtYXhfY29tcGxldGlvbl90b2tlbnMiOjQwMDAsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJzb3Bob3N5bXBhdGhlaWEvbWlkbmlnaHQtcm9zZS03MGIiLCJuYW1lIjoiTWlkbmlnaHQgUm9zZSA3MEIiLCJjcmVhdGVkIjoxNzExMDY1NjAwLCJkZXNjcmlwdGlvbiI6IkEgbWVyZ2Ugd2l0aCBhIGNvbXBsZXggZmFtaWx5IHRyZWUsIHRoaXMgbW9kZWwgd2FzIGNyYWZ0ZWQgZm9yIHJvbGVwbGF5aW5nIGFuZCBzdG9yeXRlbGxpbmcuIE1pZG5pZ2h0IFJvc2UgaXMgYSBzdWNjZXNzb3IgdG8gUm9ndWUgUm9zZSBhbmQgQXVyb3JhIE5pZ2h0cyBhbmQgaW1wcm92ZXMgdXBvbiB0aGVtIGJvdGguIEl0IHdhbnRzIHRvIHByb2R1Y2UgbGVuZ3RoeSBvdXRwdXQgYnkgZGVmYXVsdCBhbmQgaXMgdGhlIGJlc3QgY3JlYXRpdmUgd3JpdGluZyBtZXJnZSBwcm9kdWNlZCBzbyBmYXIgYnkgc29waG9zeW1wYXRoZWlhLlxuXG5EZXNjZW5kaW5nIGZyb20gZWFybGllciB2ZXJzaW9ucyBvZiBNaWRuaWdodCBSb3NlIGFuZCBbV2l6YXJkIFR1bHUgRG9scGhpbiA3MEJdKGh0dHBzOi8vaHVnZ2luZ2ZhY2UuY28vc29waG9zeW1wYXRoZWlhL1dpemFyZC1UdWx1LURvbHBoaW4tNzBCLXYxLjApLCBpdCBpbmhlcml0cyB0aGUgYmVzdCBxdWFsaXRpZXMgb2YgZWFjaC4iLCJjb250ZXh0X2xlbmd0aCI6NDA5NiwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dC0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6IkxsYW1hMiIsImluc3RydWN0X3R5cGUiOiJhaXJvYm9yb3MifSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMDgiLCJjb21wbGV0aW9uIjoiMC4wMDAwMDA4IiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjo0MDk2LCJtYXhfY29tcGxldGlvbl90b2tlbnMiOm51bGwsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJjb2hlcmUvY29tbWFuZCIsIm5hbWUiOiJDb2hlcmU6IENvbW1hbmQiLCJjcmVhdGVkIjoxNzEwMzc0NDAwLCJkZXNjcmlwdGlvbiI6IkNvbW1hbmQgaXMgYW4gaW5zdHJ1Y3Rpb24tZm9sbG93aW5nIGNvbnZlcnNhdGlvbmFsIG1vZGVsIHRoYXQgcGVyZm9ybXMgbGFuZ3VhZ2UgdGFza3Mgd2l0aCBoaWdoIHF1YWxpdHksIG1vcmUgcmVsaWFibHkgYW5kIHdpdGggYSBsb25nZXIgY29udGV4dCB0aGFuIG91ciBiYXNlIGdlbmVyYXRpdmUgbW9kZWxzLlxuXG5Vc2Ugb2YgdGhpcyBtb2RlbCBpcyBzdWJqZWN0IHRvIENvaGVyZSdzIFtVc2FnZSBQb2xpY3ldKGh0dHBzOi8vZG9jcy5jb2hlcmUuY29tL2RvY3MvdXNhZ2UtcG9saWN5KSBhbmQgW1NhYVMgQWdyZWVtZW50XShodHRwczovL2NvaGVyZS5jb20vc2Fhcy1hZ3JlZW1lbnQpLiIsImNvbnRleHRfbGVuZ3RoIjo0MDk2LCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiQ29oZXJlIiwiaW5zdHJ1Y3RfdHlwZSI6bnVsbH0sInByaWNpbmciOnsicHJvbXB0IjoiMC4wMDAwMDEiLCJjb21wbGV0aW9uIjoiMC4wMDAwMDIiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjQwOTYsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6NDAwMCwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6ImNvaGVyZS9jb21tYW5kLXIiLCJuYW1lIjoiQ29oZXJlOiBDb21tYW5kIFIiLCJjcmVhdGVkIjoxNzEwMzc0NDAwLCJkZXNjcmlwdGlvbiI6IkNvbW1hbmQtUiBpcyBhIDM1QiBwYXJhbWV0ZXIgbW9kZWwgdGhhdCBwZXJmb3JtcyBjb252ZXJzYXRpb25hbCBsYW5ndWFnZSB0YXNrcyBhdCBhIGhpZ2hlciBxdWFsaXR5LCBtb3JlIHJlbGlhYmx5LCBhbmQgd2l0aCBhIGxvbmdlciBjb250ZXh0IHRoYW4gcHJldmlvdXMgbW9kZWxzLiBJdCBjYW4gYmUgdXNlZCBmb3IgY29tcGxleCB3b3JrZmxvd3MgbGlrZSBjb2RlIGdlbmVyYXRpb24sIHJldHJpZXZhbCBhdWdtZW50ZWQgZ2VuZXJhdGlvbiAoUkFHKSwgdG9vbCB1c2UsIGFuZCBhZ2VudHMuXG5cblJlYWQgdGhlIGxhdW5jaCBwb3N0IFtoZXJlXShodHRwczovL3R4dC5jb2hlcmUuY29tL2NvbW1hbmQtci8pLlxuXG5Vc2Ugb2YgdGhpcyBtb2RlbCBpcyBzdWJqZWN0IHRvIENvaGVyZSdzIFtVc2FnZSBQb2xpY3ldKGh0dHBzOi8vZG9jcy5jb2hlcmUuY29tL2RvY3MvdXNhZ2UtcG9saWN5KSBhbmQgW1NhYVMgQWdyZWVtZW50XShodHRwczovL2NvaGVyZS5jb20vc2Fhcy1hZ3JlZW1lbnQpLiIsImNvbnRleHRfbGVuZ3RoIjoxMjgwMDAsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJDb2hlcmUiLCJpbnN0cnVjdF90eXBlIjpudWxsfSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMDUiLCJjb21wbGV0aW9uIjoiMC4wMDAwMDE1IiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoxMjgwMDAsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6NDAwMCwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6ImFudGhyb3BpYy9jbGF1ZGUtMy1oYWlrdTpiZXRhIiwibmFtZSI6IkFudGhyb3BpYzogQ2xhdWRlIDMgSGFpa3UgKHNlbGYtbW9kZXJhdGVkKSIsImNyZWF0ZWQiOjE3MTAyODgwMDAsImRlc2NyaXB0aW9uIjoiQ2xhdWRlIDMgSGFpa3UgaXMgQW50aHJvcGljJ3MgZmFzdGVzdCBhbmQgbW9zdCBjb21wYWN0IG1vZGVsIGZvclxubmVhci1pbnN0YW50IHJlc3BvbnNpdmVuZXNzLiBRdWljayBhbmQgYWNjdXJhdGUgdGFyZ2V0ZWQgcGVyZm9ybWFuY2UuXG5cblNlZSB0aGUgbGF1bmNoIGFubm91bmNlbWVudCBhbmQgYmVuY2htYXJrIHJlc3VsdHMgW2hlcmVdKGh0dHBzOi8vd3d3LmFudGhyb3BpYy5jb20vbmV3cy9jbGF1ZGUtMy1oYWlrdSlcblxuI211bHRpbW9kYWwiLCJjb250ZXh0X2xlbmd0aCI6MjAwMDAwLCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0K2ltYWdlLT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0IiwiaW1hZ2UiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJDbGF1ZGUiLCJpbnN0cnVjdF90eXBlIjpudWxsfSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMDI1IiwiY29tcGxldGlvbiI6IjAuMDAwMDAxMjUiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMC4wMDA0Iiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIiwiaW5wdXRfY2FjaGVfcmVhZCI6IjAuMDAwMDAwMDMiLCJpbnB1dF9jYWNoZV93cml0ZSI6IjAuMDAwMDAwMyJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjIwMDAwMCwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjo0MDk2LCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoiYW50aHJvcGljL2NsYXVkZS0zLWhhaWt1IiwibmFtZSI6IkFudGhyb3BpYzogQ2xhdWRlIDMgSGFpa3UiLCJjcmVhdGVkIjoxNzEwMjg4MDAwLCJkZXNjcmlwdGlvbiI6IkNsYXVkZSAzIEhhaWt1IGlzIEFudGhyb3BpYydzIGZhc3Rlc3QgYW5kIG1vc3QgY29tcGFjdCBtb2RlbCBmb3Jcbm5lYXItaW5zdGFudCByZXNwb25zaXZlbmVzcy4gUXVpY2sgYW5kIGFjY3VyYXRlIHRhcmdldGVkIHBlcmZvcm1hbmNlLlxuXG5TZWUgdGhlIGxhdW5jaCBhbm5vdW5jZW1lbnQgYW5kIGJlbmNobWFyayByZXN1bHRzIFtoZXJlXShodHRwczovL3d3dy5hbnRocm9waWMuY29tL25ld3MvY2xhdWRlLTMtaGFpa3UpXG5cbiNtdWx0aW1vZGFsIiwiY29udGV4dF9sZW5ndGgiOjIwMDAwMCwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dCtpbWFnZS0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCIsImltYWdlIl0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiQ2xhdWRlIiwiaW5zdHJ1Y3RfdHlwZSI6bnVsbH0sInByaWNpbmciOnsicHJvbXB0IjoiMC4wMDAwMDAyNSIsImNvbXBsZXRpb24iOiIwLjAwMDAwMTI1IiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAuMDAwNCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCIsImlucHV0X2NhY2hlX3JlYWQiOiIwLjAwMDAwMDAzIiwiaW5wdXRfY2FjaGVfd3JpdGUiOiIwLjAwMDAwMDMifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoyMDAwMDAsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6NDA5NiwiaXNfbW9kZXJhdGVkIjp0cnVlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoiYW50aHJvcGljL2NsYXVkZS0zLW9wdXM6YmV0YSIsIm5hbWUiOiJBbnRocm9waWM6IENsYXVkZSAzIE9wdXMgKHNlbGYtbW9kZXJhdGVkKSIsImNyZWF0ZWQiOjE3MDk1OTY4MDAsImRlc2NyaXB0aW9uIjoiQ2xhdWRlIDMgT3B1cyBpcyBBbnRocm9waWMncyBtb3N0IHBvd2VyZnVsIG1vZGVsIGZvciBoaWdobHkgY29tcGxleCB0YXNrcy4gSXQgYm9hc3RzIHRvcC1sZXZlbCBwZXJmb3JtYW5jZSwgaW50ZWxsaWdlbmNlLCBmbHVlbmN5LCBhbmQgdW5kZXJzdGFuZGluZy5cblxuU2VlIHRoZSBsYXVuY2ggYW5ub3VuY2VtZW50IGFuZCBiZW5jaG1hcmsgcmVzdWx0cyBbaGVyZV0oaHR0cHM6Ly93d3cuYW50aHJvcGljLmNvbS9uZXdzL2NsYXVkZS0zLWZhbWlseSlcblxuI211bHRpbW9kYWwiLCJjb250ZXh0X2xlbmd0aCI6MjAwMDAwLCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0K2ltYWdlLT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0IiwiaW1hZ2UiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJDbGF1ZGUiLCJpbnN0cnVjdF90eXBlIjpudWxsfSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAxNSIsImNvbXBsZXRpb24iOiIwLjAwMDA3NSIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwLjAyNCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCIsImlucHV0X2NhY2hlX3JlYWQiOiIwLjAwMDAwMTUiLCJpbnB1dF9jYWNoZV93cml0ZSI6IjAuMDAwMDE4NzUifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoyMDAwMDAsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6NDA5NiwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6ImFudGhyb3BpYy9jbGF1ZGUtMy1vcHVzIiwibmFtZSI6IkFudGhyb3BpYzogQ2xhdWRlIDMgT3B1cyIsImNyZWF0ZWQiOjE3MDk1OTY4MDAsImRlc2NyaXB0aW9uIjoiQ2xhdWRlIDMgT3B1cyBpcyBBbnRocm9waWMncyBtb3N0IHBvd2VyZnVsIG1vZGVsIGZvciBoaWdobHkgY29tcGxleCB0YXNrcy4gSXQgYm9hc3RzIHRvcC1sZXZlbCBwZXJmb3JtYW5jZSwgaW50ZWxsaWdlbmNlLCBmbHVlbmN5LCBhbmQgdW5kZXJzdGFuZGluZy5cblxuU2VlIHRoZSBsYXVuY2ggYW5ub3VuY2VtZW50IGFuZCBiZW5jaG1hcmsgcmVzdWx0cyBbaGVyZV0oaHR0cHM6Ly93d3cuYW50aHJvcGljLmNvbS9uZXdzL2NsYXVkZS0zLWZhbWlseSlcblxuI211bHRpbW9kYWwiLCJjb250ZXh0X2xlbmd0aCI6MjAwMDAwLCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0K2ltYWdlLT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0IiwiaW1hZ2UiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJDbGF1ZGUiLCJpbnN0cnVjdF90eXBlIjpudWxsfSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAxNSIsImNvbXBsZXRpb24iOiIwLjAwMDA3NSIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwLjAyNCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCIsImlucHV0X2NhY2hlX3JlYWQiOiIwLjAwMDAwMTUiLCJpbnB1dF9jYWNoZV93cml0ZSI6IjAuMDAwMDE4NzUifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoyMDAwMDAsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6NDA5NiwiaXNfbW9kZXJhdGVkIjp0cnVlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoiYW50aHJvcGljL2NsYXVkZS0zLXNvbm5ldDpiZXRhIiwibmFtZSI6IkFudGhyb3BpYzogQ2xhdWRlIDMgU29ubmV0IChzZWxmLW1vZGVyYXRlZCkiLCJjcmVhdGVkIjoxNzA5NTk2ODAwLCJkZXNjcmlwdGlvbiI6IkNsYXVkZSAzIFNvbm5ldCBpcyBhbiBpZGVhbCBiYWxhbmNlIG9mIGludGVsbGlnZW5jZSBhbmQgc3BlZWQgZm9yIGVudGVycHJpc2Ugd29ya2xvYWRzLiBNYXhpbXVtIHV0aWxpdHkgYXQgYSBsb3dlciBwcmljZSwgZGVwZW5kYWJsZSwgYmFsYW5jZWQgZm9yIHNjYWxlZCBkZXBsb3ltZW50cy5cblxuU2VlIHRoZSBsYXVuY2ggYW5ub3VuY2VtZW50IGFuZCBiZW5jaG1hcmsgcmVzdWx0cyBbaGVyZV0oaHR0cHM6Ly93d3cuYW50aHJvcGljLmNvbS9uZXdzL2NsYXVkZS0zLWZhbWlseSlcblxuI211bHRpbW9kYWwiLCJjb250ZXh0X2xlbmd0aCI6MjAwMDAwLCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0K2ltYWdlLT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0IiwiaW1hZ2UiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJDbGF1ZGUiLCJpbnN0cnVjdF90eXBlIjpudWxsfSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMyIsImNvbXBsZXRpb24iOiIwLjAwMDAxNSIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwLjAwNDgiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAiLCJpbnB1dF9jYWNoZV9yZWFkIjoiMC4wMDAwMDAzIiwiaW5wdXRfY2FjaGVfd3JpdGUiOiIwLjAwMDAwMzc1In0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6MjAwMDAwLCJtYXhfY29tcGxldGlvbl90b2tlbnMiOjQwOTYsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJhbnRocm9waWMvY2xhdWRlLTMtc29ubmV0IiwibmFtZSI6IkFudGhyb3BpYzogQ2xhdWRlIDMgU29ubmV0IiwiY3JlYXRlZCI6MTcwOTU5NjgwMCwiZGVzY3JpcHRpb24iOiJDbGF1ZGUgMyBTb25uZXQgaXMgYW4gaWRlYWwgYmFsYW5jZSBvZiBpbnRlbGxpZ2VuY2UgYW5kIHNwZWVkIGZvciBlbnRlcnByaXNlIHdvcmtsb2Fkcy4gTWF4aW11bSB1dGlsaXR5IGF0IGEgbG93ZXIgcHJpY2UsIGRlcGVuZGFibGUsIGJhbGFuY2VkIGZvciBzY2FsZWQgZGVwbG95bWVudHMuXG5cblNlZSB0aGUgbGF1bmNoIGFubm91bmNlbWVudCBhbmQgYmVuY2htYXJrIHJlc3VsdHMgW2hlcmVdKGh0dHBzOi8vd3d3LmFudGhyb3BpYy5jb20vbmV3cy9jbGF1ZGUtMy1mYW1pbHkpXG5cbiNtdWx0aW1vZGFsIiwiY29udGV4dF9sZW5ndGgiOjIwMDAwMCwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dCtpbWFnZS0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCIsImltYWdlIl0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiQ2xhdWRlIiwiaW5zdHJ1Y3RfdHlwZSI6bnVsbH0sInByaWNpbmciOnsicHJvbXB0IjoiMC4wMDAwMDMiLCJjb21wbGV0aW9uIjoiMC4wMDAwMTUiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMC4wMDQ4Iiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIiwiaW5wdXRfY2FjaGVfcmVhZCI6IjAuMDAwMDAwMyIsImlucHV0X2NhY2hlX3dyaXRlIjoiMC4wMDAwMDM3NSJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjIwMDAwMCwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjo0MDk2LCJpc19tb2RlcmF0ZWQiOnRydWV9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJjb2hlcmUvY29tbWFuZC1yLTAzLTIwMjQiLCJuYW1lIjoiQ29oZXJlOiBDb21tYW5kIFIgKDAzLTIwMjQpIiwiY3JlYXRlZCI6MTcwOTM0MTIwMCwiZGVzY3JpcHRpb24iOiJDb21tYW5kLVIgaXMgYSAzNUIgcGFyYW1ldGVyIG1vZGVsIHRoYXQgcGVyZm9ybXMgY29udmVyc2F0aW9uYWwgbGFuZ3VhZ2UgdGFza3MgYXQgYSBoaWdoZXIgcXVhbGl0eSwgbW9yZSByZWxpYWJseSwgYW5kIHdpdGggYSBsb25nZXIgY29udGV4dCB0aGFuIHByZXZpb3VzIG1vZGVscy4gSXQgY2FuIGJlIHVzZWQgZm9yIGNvbXBsZXggd29ya2Zsb3dzIGxpa2UgY29kZSBnZW5lcmF0aW9uLCByZXRyaWV2YWwgYXVnbWVudGVkIGdlbmVyYXRpb24gKFJBRyksIHRvb2wgdXNlLCBhbmQgYWdlbnRzLlxuXG5SZWFkIHRoZSBsYXVuY2ggcG9zdCBbaGVyZV0oaHR0cHM6Ly90eHQuY29oZXJlLmNvbS9jb21tYW5kLXIvKS5cblxuVXNlIG9mIHRoaXMgbW9kZWwgaXMgc3ViamVjdCB0byBDb2hlcmUncyBbVXNhZ2UgUG9saWN5XShodHRwczovL2RvY3MuY29oZXJlLmNvbS9kb2NzL3VzYWdlLXBvbGljeSkgYW5kIFtTYWFTIEFncmVlbWVudF0oaHR0cHM6Ly9jb2hlcmUuY29tL3NhYXMtYWdyZWVtZW50KS4iLCJjb250ZXh0X2xlbmd0aCI6MTI4MDAwLCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiQ29oZXJlIiwiaW5zdHJ1Y3RfdHlwZSI6bnVsbH0sInByaWNpbmciOnsicHJvbXB0IjoiMC4wMDAwMDA1IiwiY29tcGxldGlvbiI6IjAuMDAwMDAxNSIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6MTI4MDAwLCJtYXhfY29tcGxldGlvbl90b2tlbnMiOjQwMDAsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJtaXN0cmFsYWkvbWlzdHJhbC1sYXJnZSIsIm5hbWUiOiJNaXN0cmFsIExhcmdlIiwiY3JlYXRlZCI6MTcwODkwNTYwMCwiZGVzY3JpcHRpb24iOiJUaGlzIGlzIE1pc3RyYWwgQUkncyBmbGFnc2hpcCBtb2RlbCwgTWlzdHJhbCBMYXJnZSAyICh2ZXJzaW9uIGBtaXN0cmFsLWxhcmdlLTI0MDdgKS4gSXQncyBhIHByb3ByaWV0YXJ5IHdlaWdodHMtYXZhaWxhYmxlIG1vZGVsIGFuZCBleGNlbHMgYXQgcmVhc29uaW5nLCBjb2RlLCBKU09OLCBjaGF0LCBhbmQgbW9yZS4gUmVhZCB0aGUgbGF1bmNoIGFubm91bmNlbWVudCBbaGVyZV0oaHR0cHM6Ly9taXN0cmFsLmFpL25ld3MvbWlzdHJhbC1sYXJnZS0yNDA3LykuXG5cbkl0IHN1cHBvcnRzIGRvemVucyBvZiBsYW5ndWFnZXMgaW5jbHVkaW5nIEZyZW5jaCwgR2VybWFuLCBTcGFuaXNoLCBJdGFsaWFuLCBQb3J0dWd1ZXNlLCBBcmFiaWMsIEhpbmRpLCBSdXNzaWFuLCBDaGluZXNlLCBKYXBhbmVzZSwgYW5kIEtvcmVhbiwgYWxvbmcgd2l0aCA4MCsgY29kaW5nIGxhbmd1YWdlcyBpbmNsdWRpbmcgUHl0aG9uLCBKYXZhLCBDLCBDKyssIEphdmFTY3JpcHQsIGFuZCBCYXNoLiBJdHMgbG9uZyBjb250ZXh0IHdpbmRvdyBhbGxvd3MgcHJlY2lzZSBpbmZvcm1hdGlvbiByZWNhbGwgZnJvbSBsYXJnZSBkb2N1bWVudHMuIiwiY29udGV4dF9sZW5ndGgiOjEyODAwMCwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dC0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6Ik1pc3RyYWwiLCJpbnN0cnVjdF90eXBlIjpudWxsfSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMiIsImNvbXBsZXRpb24iOiIwLjAwMDAwNiIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6MTI4MDAwLCJtYXhfY29tcGxldGlvbl90b2tlbnMiOm51bGwsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJvcGVuYWkvZ3B0LTMuNS10dXJiby0wNjEzIiwibmFtZSI6Ik9wZW5BSTogR1BULTMuNSBUdXJibyAob2xkZXIgdjA2MTMpIiwiY3JlYXRlZCI6MTcwNjE0MDgwMCwiZGVzY3JpcHRpb24iOiJHUFQtMy41IFR1cmJvIGlzIE9wZW5BSSdzIGZhc3Rlc3QgbW9kZWwuIEl0IGNhbiB1bmRlcnN0YW5kIGFuZCBnZW5lcmF0ZSBuYXR1cmFsIGxhbmd1YWdlIG9yIGNvZGUsIGFuZCBpcyBvcHRpbWl6ZWQgZm9yIGNoYXQgYW5kIHRyYWRpdGlvbmFsIGNvbXBsZXRpb24gdGFza3MuXG5cblRyYWluaW5nIGRhdGEgdXAgdG8gU2VwIDIwMjEuIiwiY29udGV4dF9sZW5ndGgiOjQwOTUsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJHUFQiLCJpbnN0cnVjdF90eXBlIjpudWxsfSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMSIsImNvbXBsZXRpb24iOiIwLjAwMDAwMiIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6NDA5NSwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjo0MDk2LCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoib3BlbmFpL2dwdC00LXR1cmJvLXByZXZpZXciLCJuYW1lIjoiT3BlbkFJOiBHUFQtNCBUdXJibyBQcmV2aWV3IiwiY3JlYXRlZCI6MTcwNjE0MDgwMCwiZGVzY3JpcHRpb24iOiJUaGUgcHJldmlldyBHUFQtNCBtb2RlbCB3aXRoIGltcHJvdmVkIGluc3RydWN0aW9uIGZvbGxvd2luZywgSlNPTiBtb2RlLCByZXByb2R1Y2libGUgb3V0cHV0cywgcGFyYWxsZWwgZnVuY3Rpb24gY2FsbGluZywgYW5kIG1vcmUuIFRyYWluaW5nIGRhdGE6IHVwIHRvIERlYyAyMDIzLlxuXG4qKk5vdGU6KiogaGVhdmlseSByYXRlIGxpbWl0ZWQgYnkgT3BlbkFJIHdoaWxlIGluIHByZXZpZXcuIiwiY29udGV4dF9sZW5ndGgiOjEyODAwMCwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dC0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6IkdQVCIsImluc3RydWN0X3R5cGUiOm51bGx9LCJwcmljaW5nIjp7InByb21wdCI6IjAuMDAwMDEiLCJjb21wbGV0aW9uIjoiMC4wMDAwMyIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6MTI4MDAwLCJtYXhfY29tcGxldGlvbl90b2tlbnMiOjQwOTYsImlzX21vZGVyYXRlZCI6dHJ1ZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6Im5vdXNyZXNlYXJjaC9ub3VzLWhlcm1lcy0yLW1peHRyYWwtOHg3Yi1kcG8iLCJuYW1lIjoiTm91czogSGVybWVzIDIgTWl4dHJhbCA4eDdCIERQTyIsImNyZWF0ZWQiOjE3MDUzNjMyMDAsImRlc2NyaXB0aW9uIjoiTm91cyBIZXJtZXMgMiBNaXh0cmFsIDh4N0IgRFBPIGlzIHRoZSBuZXcgZmxhZ3NoaXAgTm91cyBSZXNlYXJjaCBtb2RlbCB0cmFpbmVkIG92ZXIgdGhlIFtNaXh0cmFsIDh4N0IgTW9FIExMTV0oL21vZGVscy9taXN0cmFsYWkvbWl4dHJhbC04eDdiKS5cblxuVGhlIG1vZGVsIHdhcyB0cmFpbmVkIG9uIG92ZXIgMSwwMDAsMDAwIGVudHJpZXMgb2YgcHJpbWFyaWx5IFtHUFQtNF0oL21vZGVscy9vcGVuYWkvZ3B0LTQpIGdlbmVyYXRlZCBkYXRhLCBhcyB3ZWxsIGFzIG90aGVyIGhpZ2ggcXVhbGl0eSBkYXRhIGZyb20gb3BlbiBkYXRhc2V0cyBhY3Jvc3MgdGhlIEFJIGxhbmRzY2FwZSwgYWNoaWV2aW5nIHN0YXRlIG9mIHRoZSBhcnQgcGVyZm9ybWFuY2Ugb24gYSB2YXJpZXR5IG9mIHRhc2tzLlxuXG4jbW9lIiwiY29udGV4dF9sZW5ndGgiOjMyNzY4LCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiTWlzdHJhbCIsImluc3RydWN0X3R5cGUiOiJjaGF0bWwifSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMDYiLCJjb21wbGV0aW9uIjoiMC4wMDAwMDA2IiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjozMjc2OCwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjoyMDQ4LCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoibWlzdHJhbGFpL21pc3RyYWwtbWVkaXVtIiwibmFtZSI6Ik1pc3RyYWwgTWVkaXVtIiwiY3JlYXRlZCI6MTcwNDg0NDgwMCwiZGVzY3JpcHRpb24iOiJUaGlzIGlzIE1pc3RyYWwgQUkncyBjbG9zZWQtc291cmNlLCBtZWRpdW0tc2lkZWQgbW9kZWwuIEl0J3MgcG93ZXJlZCBieSBhIGNsb3NlZC1zb3VyY2UgcHJvdG90eXBlIGFuZCBleGNlbHMgYXQgcmVhc29uaW5nLCBjb2RlLCBKU09OLCBjaGF0LCBhbmQgbW9yZS4gSW4gYmVuY2htYXJrcywgaXQgY29tcGFyZXMgd2l0aCBtYW55IG9mIHRoZSBmbGFnc2hpcCBtb2RlbHMgb2Ygb3RoZXIgY29tcGFuaWVzLiIsImNvbnRleHRfbGVuZ3RoIjozMjc2OCwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dC0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6Ik1pc3RyYWwiLCJpbnN0cnVjdF90eXBlIjpudWxsfSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMjc1IiwiY29tcGxldGlvbiI6IjAuMDAwMDA4MSIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6MzI3NjgsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6bnVsbCwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6Im1pc3RyYWxhaS9taXN0cmFsLXNtYWxsIiwibmFtZSI6Ik1pc3RyYWwgU21hbGwiLCJjcmVhdGVkIjoxNzA0ODQ0ODAwLCJkZXNjcmlwdGlvbiI6IldpdGggMjIgYmlsbGlvbiBwYXJhbWV0ZXJzLCBNaXN0cmFsIFNtYWxsIHYyNC4wOSBvZmZlcnMgYSBjb252ZW5pZW50IG1pZC1wb2ludCBiZXR3ZWVuIChNaXN0cmFsIE5lTW8gMTJCKVsvbWlzdHJhbGFpL21pc3RyYWwtbmVtb10gYW5kIChNaXN0cmFsIExhcmdlIDIpWy9taXN0cmFsYWkvbWlzdHJhbC1sYXJnZV0sIHByb3ZpZGluZyBhIGNvc3QtZWZmZWN0aXZlIHNvbHV0aW9uIHRoYXQgY2FuIGJlIGRlcGxveWVkIGFjcm9zcyB2YXJpb3VzIHBsYXRmb3JtcyBhbmQgZW52aXJvbm1lbnRzLiBJdCBoYXMgYmV0dGVyIHJlYXNvbmluZywgZXhoaWJpdHMgbW9yZSBjYXBhYmlsaXRpZXMsIGNhbiBwcm9kdWNlIGFuZCByZWFzb24gYWJvdXQgY29kZSwgYW5kIGlzIG11bHRpbGlndWFsLCBzdXBwb3J0aW5nIEVuZ2xpc2gsIEZyZW5jaCwgR2VybWFuLCBJdGFsaWFuLCBhbmQgU3BhbmlzaC4iLCJjb250ZXh0X2xlbmd0aCI6MzI3NjgsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJNaXN0cmFsIiwiaW5zdHJ1Y3RfdHlwZSI6bnVsbH0sInByaWNpbmciOnsicHJvbXB0IjoiMC4wMDAwMDAyIiwiY29tcGxldGlvbiI6IjAuMDAwMDAwNiIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6MzI3NjgsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6bnVsbCwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6Im1pc3RyYWxhaS9taXN0cmFsLXRpbnkiLCJuYW1lIjoiTWlzdHJhbCBUaW55IiwiY3JlYXRlZCI6MTcwNDg0NDgwMCwiZGVzY3JpcHRpb24iOiJOb3RlOiBUaGlzIG1vZGVsIGlzIGJlaW5nIGRlcHJlY2F0ZWQuIFJlY29tbWVuZGVkIHJlcGxhY2VtZW50IGlzIHRoZSBuZXdlciBbTWluaXN0cmFsIDhCXSgvbWlzdHJhbC9taW5pc3RyYWwtOGIpXG5cblRoaXMgbW9kZWwgaXMgY3VycmVudGx5IHBvd2VyZWQgYnkgTWlzdHJhbC03Qi12MC4yLCBhbmQgaW5jb3Jwb3JhdGVzIGEgXCJiZXR0ZXJcIiBmaW5lLXR1bmluZyB0aGFuIFtNaXN0cmFsIDdCXSgvbW9kZWxzL21pc3RyYWxhaS9taXN0cmFsLTdiLWluc3RydWN0LXYwLjEpLCBpbnNwaXJlZCBieSBjb21tdW5pdHkgd29yay4gSXQncyBiZXN0IHVzZWQgZm9yIGxhcmdlIGJhdGNoIHByb2Nlc3NpbmcgdGFza3Mgd2hlcmUgY29zdCBpcyBhIHNpZ25pZmljYW50IGZhY3RvciBidXQgcmVhc29uaW5nIGNhcGFiaWxpdGllcyBhcmUgbm90IGNydWNpYWwuIiwiY29udGV4dF9sZW5ndGgiOjMyNzY4LCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiTWlzdHJhbCIsImluc3RydWN0X3R5cGUiOm51bGx9LCJwcmljaW5nIjp7InByb21wdCI6IjAuMDAwMDAwMjUiLCJjb21wbGV0aW9uIjoiMC4wMDAwMDAyNSIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6MzI3NjgsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6bnVsbCwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6Im1pc3RyYWxhaS9taXN0cmFsLTdiLWluc3RydWN0LXYwLjIiLCJuYW1lIjoiTWlzdHJhbDogTWlzdHJhbCA3QiBJbnN0cnVjdCB2MC4yIiwiY3JlYXRlZCI6MTcwMzcyMTYwMCwiZGVzY3JpcHRpb24iOiJBIGhpZ2gtcGVyZm9ybWluZywgaW5kdXN0cnktc3RhbmRhcmQgNy4zQiBwYXJhbWV0ZXIgbW9kZWwsIHdpdGggb3B0aW1pemF0aW9ucyBmb3Igc3BlZWQgYW5kIGNvbnRleHQgbGVuZ3RoLlxuXG5BbiBpbXByb3ZlZCB2ZXJzaW9uIG9mIFtNaXN0cmFsIDdCIEluc3RydWN0XSgvbW9kZWxzbWlzdHJhbGFpL21pc3RyYWwtN2ItaW5zdHJ1Y3QtdjAuMSksIHdpdGggdGhlIGZvbGxvd2luZyBjaGFuZ2VzOlxuXG4tIDMyayBjb250ZXh0IHdpbmRvdyAodnMgOGsgY29udGV4dCBpbiB2MC4xKVxuLSBSb3BlLXRoZXRhID0gMWU2XG4tIE5vIFNsaWRpbmctV2luZG93IEF0dGVudGlvbiIsImNvbnRleHRfbGVuZ3RoIjozMjc2OCwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dC0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6Ik1pc3RyYWwiLCJpbnN0cnVjdF90eXBlIjoibWlzdHJhbCJ9LCJwcmljaW5nIjp7InByb21wdCI6IjAuMDAwMDAwMiIsImNvbXBsZXRpb24iOiIwLjAwMDAwMDIiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjMyNzY4LCJtYXhfY29tcGxldGlvbl90b2tlbnMiOm51bGwsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJjb2duaXRpdmVjb21wdXRhdGlvbnMvZG9scGhpbi1taXh0cmFsLTh4N2IiLCJuYW1lIjoiRG9scGhpbiAyLjYgTWl4dHJhbCA4eDdCIPCfkKwiLCJjcmVhdGVkIjoxNzAzMTE2ODAwLCJkZXNjcmlwdGlvbiI6IlRoaXMgaXMgYSAxNmsgY29udGV4dCBmaW5lLXR1bmUgb2YgW01peHRyYWwtOHg3Yl0oL21vZGVscy9taXN0cmFsYWkvbWl4dHJhbC04eDdiKS4gSXQgZXhjZWxzIGluIGNvZGluZyB0YXNrcyBkdWUgdG8gZXh0ZW5zaXZlIHRyYWluaW5nIHdpdGggY29kaW5nIGRhdGEgYW5kIGlzIGtub3duIGZvciBpdHMgb2JlZGllbmNlLCBhbHRob3VnaCBpdCBsYWNrcyBEUE8gdHVuaW5nLlxuXG5UaGUgbW9kZWwgaXMgdW5jZW5zb3JlZCBhbmQgaXMgc3RyaXBwZWQgb2YgYWxpZ25tZW50IGFuZCBiaWFzLiBJdCByZXF1aXJlcyBhbiBleHRlcm5hbCBhbGlnbm1lbnQgbGF5ZXIgZm9yIGV0aGljYWwgdXNlLiBVc2VycyBhcmUgY2F1dGlvbmVkIHRvIHVzZSB0aGlzIGhpZ2hseSBjb21wbGlhbnQgbW9kZWwgcmVzcG9uc2libHksIGFzIGRldGFpbGVkIGluIGEgYmxvZyBwb3N0IGFib3V0IHVuY2Vuc29yZWQgbW9kZWxzIGF0IFtlcmljaGFydGZvcmQuY29tL3VuY2Vuc29yZWQtbW9kZWxzXShodHRwczovL2VyaWNoYXJ0Zm9yZC5jb20vdW5jZW5zb3JlZC1tb2RlbHMpLlxuXG4jbW9lICN1bmNlbnNvcmVkIiwiY29udGV4dF9sZW5ndGgiOjMyNzY4LCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiTWlzdHJhbCIsImluc3RydWN0X3R5cGUiOiJjaGF0bWwifSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMDUiLCJjb21wbGV0aW9uIjoiMC4wMDAwMDA1IiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjozMjc2OCwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjpudWxsLCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoiZ29vZ2xlL2dlbWluaS1wcm8tdmlzaW9uIiwibmFtZSI6Ikdvb2dsZTogR2VtaW5pIFBybyBWaXNpb24gMS4wIiwiY3JlYXRlZCI6MTcwMjQyNTYwMCwiZGVzY3JpcHRpb24iOiJHb29nbGUncyBmbGFnc2hpcCBtdWx0aW1vZGFsIG1vZGVsLCBzdXBwb3J0aW5nIGltYWdlIGFuZCB2aWRlbyBpbiB0ZXh0IG9yIGNoYXQgcHJvbXB0cyBmb3IgYSB0ZXh0IG9yIGNvZGUgcmVzcG9uc2UuXG5cblNlZSB0aGUgYmVuY2htYXJrcyBhbmQgcHJvbXB0aW5nIGd1aWRlbGluZXMgZnJvbSBbRGVlcG1pbmRdKGh0dHBzOi8vZGVlcG1pbmQuZ29vZ2xlL3RlY2hub2xvZ2llcy9nZW1pbmkvKS5cblxuVXNhZ2Ugb2YgR2VtaW5pIGlzIHN1YmplY3QgdG8gR29vZ2xlJ3MgW0dlbWluaSBUZXJtcyBvZiBVc2VdKGh0dHBzOi8vYWkuZ29vZ2xlLmRldi90ZXJtcykuXG5cbiNtdWx0aW1vZGFsIiwiY29udGV4dF9sZW5ndGgiOjE2Mzg0LCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0K2ltYWdlLT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0IiwiaW1hZ2UiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJHZW1pbmkiLCJpbnN0cnVjdF90eXBlIjpudWxsfSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMDUiLCJjb21wbGV0aW9uIjoiMC4wMDAwMDE1IiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAuMDAyNSIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjE2Mzg0LCJtYXhfY29tcGxldGlvbl90b2tlbnMiOjIwNDgsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJtaXN0cmFsYWkvbWl4dHJhbC04eDdiLWluc3RydWN0IiwibmFtZSI6Ik1pc3RyYWw6IE1peHRyYWwgOHg3QiBJbnN0cnVjdCIsImNyZWF0ZWQiOjE3MDIxNjY0MDAsImRlc2NyaXB0aW9uIjoiTWl4dHJhbCA4eDdCIEluc3RydWN0IGlzIGEgcHJldHJhaW5lZCBnZW5lcmF0aXZlIFNwYXJzZSBNaXh0dXJlIG9mIEV4cGVydHMsIGJ5IE1pc3RyYWwgQUksIGZvciBjaGF0IGFuZCBpbnN0cnVjdGlvbiB1c2UuIEluY29ycG9yYXRlcyA4IGV4cGVydHMgKGZlZWQtZm9yd2FyZCBuZXR3b3JrcykgZm9yIGEgdG90YWwgb2YgNDcgYmlsbGlvbiBwYXJhbWV0ZXJzLlxuXG5JbnN0cnVjdCBtb2RlbCBmaW5lLXR1bmVkIGJ5IE1pc3RyYWwuICNtb2UiLCJjb250ZXh0X2xlbmd0aCI6MzI3NjgsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJNaXN0cmFsIiwiaW5zdHJ1Y3RfdHlwZSI6Im1pc3RyYWwifSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMDI0IiwiY29tcGxldGlvbiI6IjAuMDAwMDAwMjQiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjMyNzY4LCJtYXhfY29tcGxldGlvbl90b2tlbnMiOjE2Mzg0LCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoib3BlbmNoYXQvb3BlbmNoYXQtN2IiLCJuYW1lIjoiT3BlbkNoYXQgMy41IDdCIiwiY3JlYXRlZCI6MTcwMTEyOTYwMCwiZGVzY3JpcHRpb24iOiJPcGVuQ2hhdCA3QiBpcyBhIGxpYnJhcnkgb2Ygb3Blbi1zb3VyY2UgbGFuZ3VhZ2UgbW9kZWxzLCBmaW5lLXR1bmVkIHdpdGggXCJDLVJMRlQgKENvbmRpdGlvbmVkIFJlaW5mb3JjZW1lbnQgTGVhcm5pbmcgRmluZS1UdW5pbmcpXCIgLSBhIHN0cmF0ZWd5IGluc3BpcmVkIGJ5IG9mZmxpbmUgcmVpbmZvcmNlbWVudCBsZWFybmluZy4gSXQgaGFzIGJlZW4gdHJhaW5lZCBvbiBtaXhlZC1xdWFsaXR5IGRhdGEgd2l0aG91dCBwcmVmZXJlbmNlIGxhYmVscy5cblxuLSBGb3IgT3BlbkNoYXQgZmluZS10dW5lZCBvbiBNaXN0cmFsIDdCLCBjaGVjayBvdXQgW09wZW5DaGF0IDdCXSgvbW9kZWxzL29wZW5jaGF0L29wZW5jaGF0LTdiKS5cbi0gRm9yIE9wZW5DaGF0IGZpbmUtdHVuZWQgb24gTGxhbWEgOEIsIGNoZWNrIG91dCBbT3BlbkNoYXQgOEJdKC9tb2RlbHMvb3BlbmNoYXQvb3BlbmNoYXQtOGIpLlxuXG4jb3Blbi1zb3VyY2UiLCJjb250ZXh0X2xlbmd0aCI6ODE5MiwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dC0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6Ik1pc3RyYWwiLCJpbnN0cnVjdF90eXBlIjoib3BlbmNoYXQifSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMDA3IiwiY29tcGxldGlvbiI6IjAuMDAwMDAwMDciLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjgxOTIsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6bnVsbCwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6Im5ldmVyc2xlZXAvbm9yb21haWQtMjBiIiwibmFtZSI6Ik5vcm9tYWlkIDIwQiIsImNyZWF0ZWQiOjE3MDA5NTY4MDAsImRlc2NyaXB0aW9uIjoiQSBjb2xsYWIgYmV0d2VlbiBJa2FyaURldiBhbmQgVW5kaS4gVGhpcyBtZXJnZSBpcyBzdWl0YWJsZSBmb3IgUlAsIEVSUCwgYW5kIGdlbmVyYWwga25vd2xlZGdlLlxuXG4jbWVyZ2UgI3VuY2Vuc29yZWQiLCJjb250ZXh0X2xlbmd0aCI6ODE5MiwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dC0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6IkxsYW1hMiIsImluc3RydWN0X3R5cGUiOiJhbHBhY2EifSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMDc1IiwiY29tcGxldGlvbiI6IjAuMDAwMDAxNSIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6ODE5MiwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjoyMDQ4LCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoiYW50aHJvcGljL2NsYXVkZS0yLjE6YmV0YSIsIm5hbWUiOiJBbnRocm9waWM6IENsYXVkZSB2Mi4xIChzZWxmLW1vZGVyYXRlZCkiLCJjcmVhdGVkIjoxNzAwNjExMjAwLCJkZXNjcmlwdGlvbiI6IkNsYXVkZSAyIGRlbGl2ZXJzIGFkdmFuY2VtZW50cyBpbiBrZXkgY2FwYWJpbGl0aWVzIGZvciBlbnRlcnByaXNlc+KAlGluY2x1ZGluZyBhbiBpbmR1c3RyeS1sZWFkaW5nIDIwMEsgdG9rZW4gY29udGV4dCB3aW5kb3csIHNpZ25pZmljYW50IHJlZHVjdGlvbnMgaW4gcmF0ZXMgb2YgbW9kZWwgaGFsbHVjaW5hdGlvbiwgc3lzdGVtIHByb21wdHMgYW5kIGEgbmV3IGJldGEgZmVhdHVyZTogdG9vbCB1c2UuIiwiY29udGV4dF9sZW5ndGgiOjIwMDAwMCwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dC0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6IkNsYXVkZSIsImluc3RydWN0X3R5cGUiOm51bGx9LCJwcmljaW5nIjp7InByb21wdCI6IjAuMDAwMDA4IiwiY29tcGxldGlvbiI6IjAuMDAwMDI0IiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoyMDAwMDAsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6NDA5NiwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6ImFudGhyb3BpYy9jbGF1ZGUtMi4xIiwibmFtZSI6IkFudGhyb3BpYzogQ2xhdWRlIHYyLjEiLCJjcmVhdGVkIjoxNzAwNjExMjAwLCJkZXNjcmlwdGlvbiI6IkNsYXVkZSAyIGRlbGl2ZXJzIGFkdmFuY2VtZW50cyBpbiBrZXkgY2FwYWJpbGl0aWVzIGZvciBlbnRlcnByaXNlc+KAlGluY2x1ZGluZyBhbiBpbmR1c3RyeS1sZWFkaW5nIDIwMEsgdG9rZW4gY29udGV4dCB3aW5kb3csIHNpZ25pZmljYW50IHJlZHVjdGlvbnMgaW4gcmF0ZXMgb2YgbW9kZWwgaGFsbHVjaW5hdGlvbiwgc3lzdGVtIHByb21wdHMgYW5kIGEgbmV3IGJldGEgZmVhdHVyZTogdG9vbCB1c2UuIiwiY29udGV4dF9sZW5ndGgiOjIwMDAwMCwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dC0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6IkNsYXVkZSIsImluc3RydWN0X3R5cGUiOm51bGx9LCJwcmljaW5nIjp7InByb21wdCI6IjAuMDAwMDA4IiwiY29tcGxldGlvbiI6IjAuMDAwMDI0IiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoyMDAwMDAsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6NDA5NiwiaXNfbW9kZXJhdGVkIjp0cnVlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoiYW50aHJvcGljL2NsYXVkZS0yOmJldGEiLCJuYW1lIjoiQW50aHJvcGljOiBDbGF1ZGUgdjIgKHNlbGYtbW9kZXJhdGVkKSIsImNyZWF0ZWQiOjE3MDA2MTEyMDAsImRlc2NyaXB0aW9uIjoiQ2xhdWRlIDIgZGVsaXZlcnMgYWR2YW5jZW1lbnRzIGluIGtleSBjYXBhYmlsaXRpZXMgZm9yIGVudGVycHJpc2Vz4oCUaW5jbHVkaW5nIGFuIGluZHVzdHJ5LWxlYWRpbmcgMjAwSyB0b2tlbiBjb250ZXh0IHdpbmRvdywgc2lnbmlmaWNhbnQgcmVkdWN0aW9ucyBpbiByYXRlcyBvZiBtb2RlbCBoYWxsdWNpbmF0aW9uLCBzeXN0ZW0gcHJvbXB0cyBhbmQgYSBuZXcgYmV0YSBmZWF0dXJlOiB0b29sIHVzZS4iLCJjb250ZXh0X2xlbmd0aCI6MjAwMDAwLCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiQ2xhdWRlIiwiaW5zdHJ1Y3RfdHlwZSI6bnVsbH0sInByaWNpbmciOnsicHJvbXB0IjoiMC4wMDAwMDgiLCJjb21wbGV0aW9uIjoiMC4wMDAwMjQiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjIwMDAwMCwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjo0MDk2LCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoiYW50aHJvcGljL2NsYXVkZS0yIiwibmFtZSI6IkFudGhyb3BpYzogQ2xhdWRlIHYyIiwiY3JlYXRlZCI6MTcwMDYxMTIwMCwiZGVzY3JpcHRpb24iOiJDbGF1ZGUgMiBkZWxpdmVycyBhZHZhbmNlbWVudHMgaW4ga2V5IGNhcGFiaWxpdGllcyBmb3IgZW50ZXJwcmlzZXPigJRpbmNsdWRpbmcgYW4gaW5kdXN0cnktbGVhZGluZyAyMDBLIHRva2VuIGNvbnRleHQgd2luZG93LCBzaWduaWZpY2FudCByZWR1Y3Rpb25zIGluIHJhdGVzIG9mIG1vZGVsIGhhbGx1Y2luYXRpb24sIHN5c3RlbSBwcm9tcHRzIGFuZCBhIG5ldyBiZXRhIGZlYXR1cmU6IHRvb2wgdXNlLiIsImNvbnRleHRfbGVuZ3RoIjoyMDAwMDAsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJDbGF1ZGUiLCJpbnN0cnVjdF90eXBlIjpudWxsfSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwOCIsImNvbXBsZXRpb24iOiIwLjAwMDAyNCIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6MjAwMDAwLCJtYXhfY29tcGxldGlvbl90b2tlbnMiOjQwOTYsImlzX21vZGVyYXRlZCI6dHJ1ZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6InVuZGk5NS90b3BweS1tLTdiIiwibmFtZSI6IlRvcHB5IE0gN0IiLCJjcmVhdGVkIjoxNjk5NTc0NDAwLCJkZXNjcmlwdGlvbiI6IkEgd2lsZCA3QiBwYXJhbWV0ZXIgbW9kZWwgdGhhdCBtZXJnZXMgc2V2ZXJhbCBtb2RlbHMgdXNpbmcgdGhlIG5ldyB0YXNrX2FyaXRobWV0aWMgbWVyZ2UgbWV0aG9kIGZyb20gbWVyZ2VraXQuXG5MaXN0IG9mIG1lcmdlZCBtb2RlbHM6XG4tIE5vdXNSZXNlYXJjaC9Ob3VzLUNhcHliYXJhLTdCLVYxLjlcbi0gW0h1Z2dpbmdGYWNlSDQvemVwaHlyLTdiLWJldGFdKC9tb2RlbHMvaHVnZ2luZ2ZhY2VoNC96ZXBoeXItN2ItYmV0YSlcbi0gbGVtb25pbGlhL0FzaGhMaW1hUlAtTWlzdHJhbC03QlxuLSBWdWxrYW5lLzEyMC1EYXlzLW9mLVNvZG9tLUxvUkEtTWlzdHJhbC03YlxuLSBVbmRpOTUvTWlzdHJhbC1waXBwYS1zaGFyZWdwdC03Yi1xbG9yYVxuXG4jbWVyZ2UgI3VuY2Vuc29yZWQiLCJjb250ZXh0X2xlbmd0aCI6NDA5NiwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dC0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6Ik1pc3RyYWwiLCJpbnN0cnVjdF90eXBlIjoiYWxwYWNhIn0sInByaWNpbmciOnsicHJvbXB0IjoiMC4wMDAwMDAwNyIsImNvbXBsZXRpb24iOiIwLjAwMDAwMDA3IiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjo0MDk2LCJtYXhfY29tcGxldGlvbl90b2tlbnMiOm51bGwsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJhbHBpbmRhbGUvZ29saWF0aC0xMjBiIiwibmFtZSI6IkdvbGlhdGggMTIwQiIsImNyZWF0ZWQiOjE2OTk1NzQ0MDAsImRlc2NyaXB0aW9uIjoiQSBsYXJnZSBMTE0gY3JlYXRlZCBieSBjb21iaW5pbmcgdHdvIGZpbmUtdHVuZWQgTGxhbWEgNzBCIG1vZGVscyBpbnRvIG9uZSAxMjBCIG1vZGVsLiBDb21iaW5lcyBYd2luIGFuZCBFdXJ5YWxlLlxuXG5DcmVkaXRzIHRvXG4tIFtAY2hhcmdvZGRhcmRdKGh0dHBzOi8vaHVnZ2luZ2ZhY2UuY28vY2hhcmdvZGRhcmQpIGZvciBkZXZlbG9waW5nIHRoZSBmcmFtZXdvcmsgdXNlZCB0byBtZXJnZSB0aGUgbW9kZWwgLSBbbWVyZ2VraXRdKGh0dHBzOi8vZ2l0aHViLmNvbS9jZzEyMy9tZXJnZWtpdCkuXG4tIFtAVW5kaTk1XShodHRwczovL2h1Z2dpbmdmYWNlLmNvL1VuZGk5NSkgZm9yIGhlbHBpbmcgd2l0aCB0aGUgbWVyZ2UgcmF0aW9zLlxuXG4jbWVyZ2UiLCJjb250ZXh0X2xlbmd0aCI6NjE0NCwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dC0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6IkxsYW1hMiIsImluc3RydWN0X3R5cGUiOiJhaXJvYm9yb3MifSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwNjU2MjUiLCJjb21wbGV0aW9uIjoiMC4wMDAwMDkzNzUiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjYxNDQsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6NTEyLCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoib3BlbnJvdXRlci9hdXRvIiwibmFtZSI6IkF1dG8gUm91dGVyIiwiY3JlYXRlZCI6MTY5OTQwMTYwMCwiZGVzY3JpcHRpb24iOiJZb3VyIHByb21wdCB3aWxsIGJlIHByb2Nlc3NlZCBieSBhIG1ldGEtbW9kZWwgYW5kIHJvdXRlZCB0byBvbmUgb2YgZG96ZW5zIG9mIG1vZGVscyAoc2VlIGJlbG93KSwgb3B0aW1pemluZyBmb3IgdGhlIGJlc3QgcG9zc2libGUgb3V0cHV0LlxuXG5UbyBzZWUgd2hpY2ggbW9kZWwgd2FzIHVzZWQsIHZpc2l0IFtBY3Rpdml0eV0oL2FjdGl2aXR5KSwgb3IgcmVhZCB0aGUgYG1vZGVsYCBhdHRyaWJ1dGUgb2YgdGhlIHJlc3BvbnNlLiBZb3VyIHJlc3BvbnNlIHdpbGwgYmUgcHJpY2VkIGF0IHRoZSBzYW1lIHJhdGUgYXMgdGhlIHJvdXRlZCBtb2RlbC5cblxuVGhlIG1ldGEtbW9kZWwgaXMgcG93ZXJlZCBieSBbTm90IERpYW1vbmRdKGh0dHBzOi8vZG9jcy5ub3RkaWFtb25kLmFpL2RvY3MvaG93LW5vdC1kaWFtb25kLXdvcmtzKS4gTGVhcm4gbW9yZSBpbiBvdXIgW2RvY3NdKC9kb2NzL21vZGVsLXJvdXRpbmcpLlxuXG5SZXF1ZXN0cyB3aWxsIGJlIHJvdXRlZCB0byB0aGUgZm9sbG93aW5nIG1vZGVsczpcbi0gW29wZW5haS9ncHQtNG8tMjAyNC0wOC0wNl0oL29wZW5haS9ncHQtNG8tMjAyNC0wOC0wNilcbi0gW29wZW5haS9ncHQtNG8tMjAyNC0wNS0xM10oL29wZW5haS9ncHQtNG8tMjAyNC0wNS0xMylcbi0gW29wZW5haS9ncHQtNG8tbWluaS0yMDI0LTA3LTE4XSgvb3BlbmFpL2dwdC00by1taW5pLTIwMjQtMDctMTgpXG4tIFtvcGVuYWkvY2hhdGdwdC00by1sYXRlc3RdKC9vcGVuYWkvY2hhdGdwdC00by1sYXRlc3QpXG4tIFtvcGVuYWkvbzEtcHJldmlldy0yMDI0LTA5LTEyXSgvb3BlbmFpL28xLXByZXZpZXctMjAyNC0wOS0xMilcbi0gW29wZW5haS9vMS1taW5pLTIwMjQtMDktMTJdKC9vcGVuYWkvbzEtbWluaS0yMDI0LTA5LTEyKVxuLSBbYW50aHJvcGljL2NsYXVkZS0zLjUtc29ubmV0XSgvYW50aHJvcGljL2NsYXVkZS0zLjUtc29ubmV0KVxuLSBbYW50aHJvcGljL2NsYXVkZS0zLjUtaGFpa3VdKC9hbnRocm9waWMvY2xhdWRlLTMuNS1oYWlrdSlcbi0gW2FudGhyb3BpYy9jbGF1ZGUtMy1vcHVzXSgvYW50aHJvcGljL2NsYXVkZS0zLW9wdXMpXG4tIFthbnRocm9waWMvY2xhdWRlLTIuMV0oL2FudGhyb3BpYy9jbGF1ZGUtMi4xKVxuLSBbZ29vZ2xlL2dlbWluaS1wcm8tMS41XSgvZ29vZ2xlL2dlbWluaS1wcm8tMS41KVxuLSBbZ29vZ2xlL2dlbWluaS1mbGFzaC0xLjVdKC9nb29nbGUvZ2VtaW5pLWZsYXNoLTEuNSlcbi0gW21pc3RyYWxhaS9taXN0cmFsLWxhcmdlLTI0MDddKC9taXN0cmFsYWkvbWlzdHJhbC1sYXJnZS0yNDA3KVxuLSBbbWlzdHJhbGFpL21pc3RyYWwtbmVtb10oL21pc3RyYWxhaS9taXN0cmFsLW5lbW8pXG4tIFtkZWVwc2Vlay9kZWVwc2Vlay1yMV0oL2RlZXBzZWVrL2RlZXBzZWVrLXIxKVxuLSBbbWV0YS1sbGFtYS9sbGFtYS0zLjEtNzBiLWluc3RydWN0XSgvbWV0YS1sbGFtYS9sbGFtYS0zLjEtNzBiLWluc3RydWN0KVxuLSBbbWV0YS1sbGFtYS9sbGFtYS0zLjEtNDA1Yi1pbnN0cnVjdF0oL21ldGEtbGxhbWEvbGxhbWEtMy4xLTQwNWItaW5zdHJ1Y3QpXG4tIFttaXN0cmFsYWkvbWl4dHJhbC04eDIyYi1pbnN0cnVjdF0oL21pc3RyYWxhaS9taXh0cmFsLTh4MjJiLWluc3RydWN0KVxuLSBbY29oZXJlL2NvbW1hbmQtci1wbHVzXSgvY29oZXJlL2NvbW1hbmQtci1wbHVzKVxuLSBbY29oZXJlL2NvbW1hbmQtcl0oL2NvaGVyZS9jb21tYW5kLXIpIiwiY29udGV4dF9sZW5ndGgiOjIwMDAwMDAsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJSb3V0ZXIiLCJpbnN0cnVjdF90eXBlIjpudWxsfSwicHJpY2luZyI6eyJwcm9tcHQiOiItMSIsImNvbXBsZXRpb24iOiItMSJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOm51bGwsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6bnVsbCwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6Im9wZW5haS9ncHQtMy41LXR1cmJvLTExMDYiLCJuYW1lIjoiT3BlbkFJOiBHUFQtMy41IFR1cmJvIDE2ayAob2xkZXIgdjExMDYpIiwiY3JlYXRlZCI6MTY5OTIyODgwMCwiZGVzY3JpcHRpb24iOiJBbiBvbGRlciBHUFQtMy41IFR1cmJvIG1vZGVsIHdpdGggaW1wcm92ZWQgaW5zdHJ1Y3Rpb24gZm9sbG93aW5nLCBKU09OIG1vZGUsIHJlcHJvZHVjaWJsZSBvdXRwdXRzLCBwYXJhbGxlbCBmdW5jdGlvbiBjYWxsaW5nLCBhbmQgbW9yZS4gVHJhaW5pbmcgZGF0YTogdXAgdG8gU2VwIDIwMjEuIiwiY29udGV4dF9sZW5ndGgiOjE2Mzg1LCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiR1BUIiwiaW5zdHJ1Y3RfdHlwZSI6bnVsbH0sInByaWNpbmciOnsicHJvbXB0IjoiMC4wMDAwMDEiLCJjb21wbGV0aW9uIjoiMC4wMDAwMDIiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjE2Mzg1LCJtYXhfY29tcGxldGlvbl90b2tlbnMiOjQwOTYsImlzX21vZGVyYXRlZCI6dHJ1ZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6Im9wZW5haS9ncHQtNC0xMTA2LXByZXZpZXciLCJuYW1lIjoiT3BlbkFJOiBHUFQtNCBUdXJibyAob2xkZXIgdjExMDYpIiwiY3JlYXRlZCI6MTY5OTIyODgwMCwiZGVzY3JpcHRpb24iOiJUaGUgbGF0ZXN0IEdQVC00IFR1cmJvIG1vZGVsIHdpdGggdmlzaW9uIGNhcGFiaWxpdGllcy4gVmlzaW9uIHJlcXVlc3RzIGNhbiBub3cgdXNlIEpTT04gbW9kZSBhbmQgZnVuY3Rpb24gY2FsbGluZy5cblxuVHJhaW5pbmcgZGF0YTogdXAgdG8gQXByaWwgMjAyMy4iLCJjb250ZXh0X2xlbmd0aCI6MTI4MDAwLCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiR1BUIiwiaW5zdHJ1Y3RfdHlwZSI6bnVsbH0sInByaWNpbmciOnsicHJvbXB0IjoiMC4wMDAwMSIsImNvbXBsZXRpb24iOiIwLjAwMDAzIiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoxMjgwMDAsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6NDA5NiwiaXNfbW9kZXJhdGVkIjp0cnVlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoiZ29vZ2xlL3BhbG0tMi1jaGF0LWJpc29uLTMyayIsIm5hbWUiOiJHb29nbGU6IFBhTE0gMiBDaGF0IDMyayIsImNyZWF0ZWQiOjE2OTg5Njk2MDAsImRlc2NyaXB0aW9uIjoiUGFMTSAyIGlzIGEgbGFuZ3VhZ2UgbW9kZWwgYnkgR29vZ2xlIHdpdGggaW1wcm92ZWQgbXVsdGlsaW5ndWFsLCByZWFzb25pbmcgYW5kIGNvZGluZyBjYXBhYmlsaXRpZXMuIiwiY29udGV4dF9sZW5ndGgiOjMyNzY4LCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiUGFMTSIsImluc3RydWN0X3R5cGUiOm51bGx9LCJwcmljaW5nIjp7InByb21wdCI6IjAuMDAwMDAxIiwiY29tcGxldGlvbiI6IjAuMDAwMDAyIiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjozMjc2OCwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjo4MTkyLCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoiZ29vZ2xlL3BhbG0tMi1jb2RlY2hhdC1iaXNvbi0zMmsiLCJuYW1lIjoiR29vZ2xlOiBQYUxNIDIgQ29kZSBDaGF0IDMyayIsImNyZWF0ZWQiOjE2OTg5Njk2MDAsImRlc2NyaXB0aW9uIjoiUGFMTSAyIGZpbmUtdHVuZWQgZm9yIGNoYXRib3QgY29udmVyc2F0aW9ucyB0aGF0IGhlbHAgd2l0aCBjb2RlLXJlbGF0ZWQgcXVlc3Rpb25zLiIsImNvbnRleHRfbGVuZ3RoIjozMjc2OCwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dC0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6IlBhTE0iLCJpbnN0cnVjdF90eXBlIjpudWxsfSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMSIsImNvbXBsZXRpb24iOiIwLjAwMDAwMiIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6MzI3NjgsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6ODE5MiwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6ImpvbmR1cmJpbi9haXJvYm9yb3MtbDItNzBiIiwibmFtZSI6IkFpcm9ib3JvcyA3MEIiLCJjcmVhdGVkIjoxNjk4NTM3NjAwLCJkZXNjcmlwdGlvbiI6IkEgTGxhbWEgMiA3MEIgZmluZS10dW5lIHVzaW5nIHN5bnRoZXRpYyBkYXRhICh0aGUgQWlyb2Jvcm9zIGRhdGFzZXQpLlxuXG5DdXJyZW50bHkgYmFzZWQgb24gW2pvbmR1cmJpbi9haXJvYm9yb3MtbDItNzBiXShodHRwczovL2h1Z2dpbmdmYWNlLmNvL2pvbmR1cmJpbi9haXJvYm9yb3MtbDItNzBiLTIuMi4xKSwgYnV0IG1pZ2h0IGdldCB1cGRhdGVkIGluIHRoZSBmdXR1cmUuIiwiY29udGV4dF9sZW5ndGgiOjQwOTYsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJMbGFtYTIiLCJpbnN0cnVjdF90eXBlIjoiYWlyb2Jvcm9zIn0sInByaWNpbmciOnsicHJvbXB0IjoiMC4wMDAwMDA1IiwiY29tcGxldGlvbiI6IjAuMDAwMDAwNSIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6NDA5NiwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjpudWxsLCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoib3BlbmFpL2dwdC0zLjUtdHVyYm8taW5zdHJ1Y3QiLCJuYW1lIjoiT3BlbkFJOiBHUFQtMy41IFR1cmJvIEluc3RydWN0IiwiY3JlYXRlZCI6MTY5NTg1OTIwMCwiZGVzY3JpcHRpb24iOiJUaGlzIG1vZGVsIGlzIGEgdmFyaWFudCBvZiBHUFQtMy41IFR1cmJvIHR1bmVkIGZvciBpbnN0cnVjdGlvbmFsIHByb21wdHMgYW5kIG9taXR0aW5nIGNoYXQtcmVsYXRlZCBvcHRpbWl6YXRpb25zLiBUcmFpbmluZyBkYXRhOiB1cCB0byBTZXAgMjAyMS4iLCJjb250ZXh0X2xlbmd0aCI6NDA5NSwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dC0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6IkdQVCIsImluc3RydWN0X3R5cGUiOiJjaGF0bWwifSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMTUiLCJjb21wbGV0aW9uIjoiMC4wMDAwMDIiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjQwOTUsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6NDA5NiwiaXNfbW9kZXJhdGVkIjp0cnVlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoibWlzdHJhbGFpL21pc3RyYWwtN2ItaW5zdHJ1Y3QtdjAuMSIsIm5hbWUiOiJNaXN0cmFsOiBNaXN0cmFsIDdCIEluc3RydWN0IHYwLjEiLCJjcmVhdGVkIjoxNjk1ODU5MjAwLCJkZXNjcmlwdGlvbiI6IkEgNy4zQiBwYXJhbWV0ZXIgbW9kZWwgdGhhdCBvdXRwZXJmb3JtcyBMbGFtYSAyIDEzQiBvbiBhbGwgYmVuY2htYXJrcywgd2l0aCBvcHRpbWl6YXRpb25zIGZvciBzcGVlZCBhbmQgY29udGV4dCBsZW5ndGguIiwiY29udGV4dF9sZW5ndGgiOjMyNzY4LCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiTWlzdHJhbCIsImluc3RydWN0X3R5cGUiOiJtaXN0cmFsIn0sInByaWNpbmciOnsicHJvbXB0IjoiMC4wMDAwMDAyIiwiY29tcGxldGlvbiI6IjAuMDAwMDAwMiIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6MzI3NjgsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6MjA0OCwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6InB5Z21hbGlvbmFpL215dGhhbGlvbi0xM2IiLCJuYW1lIjoiUHlnbWFsaW9uOiBNeXRoYWxpb24gMTNCIiwiY3JlYXRlZCI6MTY5MzYxMjgwMCwiZGVzY3JpcHRpb24iOiJBIGJsZW5kIG9mIHRoZSBuZXcgUHlnbWFsaW9uLTEzYiBhbmQgTXl0aG9NYXguICNtZXJnZSIsImNvbnRleHRfbGVuZ3RoIjo4MTkyLCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiTGxhbWEyIiwiaW5zdHJ1Y3RfdHlwZSI6ImFscGFjYSJ9LCJwcmljaW5nIjp7InByb21wdCI6IjAuMDAwMDAwNTYyNSIsImNvbXBsZXRpb24iOiIwLjAwMDAwMTEyNSIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6ODE5MiwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjoxMDI0LCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoib3BlbmFpL2dwdC0zLjUtdHVyYm8tMTZrIiwibmFtZSI6Ik9wZW5BSTogR1BULTMuNSBUdXJibyAxNmsiLCJjcmVhdGVkIjoxNjkzMTgwODAwLCJkZXNjcmlwdGlvbiI6IlRoaXMgbW9kZWwgb2ZmZXJzIGZvdXIgdGltZXMgdGhlIGNvbnRleHQgbGVuZ3RoIG9mIGdwdC0zLjUtdHVyYm8sIGFsbG93aW5nIGl0IHRvIHN1cHBvcnQgYXBwcm94aW1hdGVseSAyMCBwYWdlcyBvZiB0ZXh0IGluIGEgc2luZ2xlIHJlcXVlc3QgYXQgYSBoaWdoZXIgY29zdC4gVHJhaW5pbmcgZGF0YTogdXAgdG8gU2VwIDIwMjEuIiwiY29udGV4dF9sZW5ndGgiOjE2Mzg1LCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiR1BUIiwiaW5zdHJ1Y3RfdHlwZSI6bnVsbH0sInByaWNpbmciOnsicHJvbXB0IjoiMC4wMDAwMDMiLCJjb21wbGV0aW9uIjoiMC4wMDAwMDQiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjE2Mzg1LCJtYXhfY29tcGxldGlvbl90b2tlbnMiOjQwOTYsImlzX21vZGVyYXRlZCI6dHJ1ZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6Im9wZW5haS9ncHQtNC0zMmsiLCJuYW1lIjoiT3BlbkFJOiBHUFQtNCAzMmsiLCJjcmVhdGVkIjoxNjkzMTgwODAwLCJkZXNjcmlwdGlvbiI6IkdQVC00LTMyayBpcyBhbiBleHRlbmRlZCB2ZXJzaW9uIG9mIEdQVC00LCB3aXRoIHRoZSBzYW1lIGNhcGFiaWxpdGllcyBidXQgcXVhZHJ1cGxlZCBjb250ZXh0IGxlbmd0aCwgYWxsb3dpbmcgZm9yIHByb2Nlc3NpbmcgdXAgdG8gNDAgcGFnZXMgb2YgdGV4dCBpbiBhIHNpbmdsZSBwYXNzLiBUaGlzIGlzIHBhcnRpY3VsYXJseSBiZW5lZmljaWFsIGZvciBoYW5kbGluZyBsb25nZXIgY29udGVudCBsaWtlIGludGVyYWN0aW5nIHdpdGggUERGcyB3aXRob3V0IGFuIGV4dGVybmFsIHZlY3RvciBkYXRhYmFzZS4gVHJhaW5pbmcgZGF0YTogdXAgdG8gU2VwIDIwMjEuIiwiY29udGV4dF9sZW5ndGgiOjMyNzY3LCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiR1BUIiwiaW5zdHJ1Y3RfdHlwZSI6bnVsbH0sInByaWNpbmciOnsicHJvbXB0IjoiMC4wMDAwNiIsImNvbXBsZXRpb24iOiIwLjAwMDEyIiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjozMjc2NywibWF4X2NvbXBsZXRpb25fdG9rZW5zIjo0MDk2LCJpc19tb2RlcmF0ZWQiOnRydWV9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJvcGVuYWkvZ3B0LTQtMzJrLTAzMTQiLCJuYW1lIjoiT3BlbkFJOiBHUFQtNCAzMmsgKG9sZGVyIHYwMzE0KSIsImNyZWF0ZWQiOjE2OTMxODA4MDAsImRlc2NyaXB0aW9uIjoiR1BULTQtMzJrIGlzIGFuIGV4dGVuZGVkIHZlcnNpb24gb2YgR1BULTQsIHdpdGggdGhlIHNhbWUgY2FwYWJpbGl0aWVzIGJ1dCBxdWFkcnVwbGVkIGNvbnRleHQgbGVuZ3RoLCBhbGxvd2luZyBmb3IgcHJvY2Vzc2luZyB1cCB0byA0MCBwYWdlcyBvZiB0ZXh0IGluIGEgc2luZ2xlIHBhc3MuIFRoaXMgaXMgcGFydGljdWxhcmx5IGJlbmVmaWNpYWwgZm9yIGhhbmRsaW5nIGxvbmdlciBjb250ZW50IGxpa2UgaW50ZXJhY3Rpbmcgd2l0aCBQREZzIHdpdGhvdXQgYW4gZXh0ZXJuYWwgdmVjdG9yIGRhdGFiYXNlLiBUcmFpbmluZyBkYXRhOiB1cCB0byBTZXAgMjAyMS4iLCJjb250ZXh0X2xlbmd0aCI6MzI3NjcsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJHUFQiLCJpbnN0cnVjdF90eXBlIjpudWxsfSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDA2IiwiY29tcGxldGlvbiI6IjAuMDAwMTIiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjMyNzY3LCJtYXhfY29tcGxldGlvbl90b2tlbnMiOjQwOTYsImlzX21vZGVyYXRlZCI6dHJ1ZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6Im5vdXNyZXNlYXJjaC9ub3VzLWhlcm1lcy1sbGFtYTItMTNiIiwibmFtZSI6Ik5vdXM6IEhlcm1lcyAxM0IiLCJjcmVhdGVkIjoxNjkyNDg5NjAwLCJkZXNjcmlwdGlvbiI6IkEgc3RhdGUtb2YtdGhlLWFydCBsYW5ndWFnZSBtb2RlbCBmaW5lLXR1bmVkIG9uIG92ZXIgMzAwayBpbnN0cnVjdGlvbnMgYnkgTm91cyBSZXNlYXJjaCwgd2l0aCBUZWtuaXVtIGFuZCBFbW96aWxsYSBsZWFkaW5nIHRoZSBmaW5lIHR1bmluZyBwcm9jZXNzLiIsImNvbnRleHRfbGVuZ3RoIjo0MDk2LCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiTGxhbWEyIiwiaW5zdHJ1Y3RfdHlwZSI6ImFscGFjYSJ9LCJwcmljaW5nIjp7InByb21wdCI6IjAuMDAwMDAwMTgiLCJjb21wbGV0aW9uIjoiMC4wMDAwMDAxOCIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6NDA5NiwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjpudWxsLCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoibWFuY2VyL3dlYXZlciIsIm5hbWUiOiJNYW5jZXI6IFdlYXZlciAoYWxwaGEpIiwiY3JlYXRlZCI6MTY5MDkzNDQwMCwiZGVzY3JpcHRpb24iOiJBbiBhdHRlbXB0IHRvIHJlY3JlYXRlIENsYXVkZS1zdHlsZSB2ZXJib3NpdHksIGJ1dCBkb24ndCBleHBlY3QgdGhlIHNhbWUgbGV2ZWwgb2YgY29oZXJlbmNlIG9yIG1lbW9yeS4gTWVhbnQgZm9yIHVzZSBpbiByb2xlcGxheS9uYXJyYXRpdmUgc2l0dWF0aW9ucy4iLCJjb250ZXh0X2xlbmd0aCI6ODAwMCwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dC0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6IkxsYW1hMiIsImluc3RydWN0X3R5cGUiOiJhbHBhY2EifSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMTEyNSIsImNvbXBsZXRpb24iOiIwLjAwMDAwMTEyNSIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6ODAwMCwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjoxMDAwLCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoiaHVnZ2luZ2ZhY2VoNC96ZXBoeXItN2ItYmV0YTpmcmVlIiwibmFtZSI6Ikh1Z2dpbmcgRmFjZTogWmVwaHlyIDdCIChmcmVlKSIsImNyZWF0ZWQiOjE2OTA5MzQ0MDAsImRlc2NyaXB0aW9uIjoiWmVwaHlyIGlzIGEgc2VyaWVzIG9mIGxhbmd1YWdlIG1vZGVscyB0aGF0IGFyZSB0cmFpbmVkIHRvIGFjdCBhcyBoZWxwZnVsIGFzc2lzdGFudHMuIFplcGh5ci03Qi3OsiBpcyB0aGUgc2Vjb25kIG1vZGVsIGluIHRoZSBzZXJpZXMsIGFuZCBpcyBhIGZpbmUtdHVuZWQgdmVyc2lvbiBvZiBbbWlzdHJhbGFpL01pc3RyYWwtN0ItdjAuMV0oL21vZGVscy9taXN0cmFsYWkvbWlzdHJhbC03Yi1pbnN0cnVjdC12MC4xKSB0aGF0IHdhcyB0cmFpbmVkIG9uIGEgbWl4IG9mIHB1YmxpY2x5IGF2YWlsYWJsZSwgc3ludGhldGljIGRhdGFzZXRzIHVzaW5nIERpcmVjdCBQcmVmZXJlbmNlIE9wdGltaXphdGlvbiAoRFBPKS4iLCJjb250ZXh0X2xlbmd0aCI6NDA5NiwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dC0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6Ik1pc3RyYWwiLCJpbnN0cnVjdF90eXBlIjoiemVwaHlyIn0sInByaWNpbmciOnsicHJvbXB0IjoiMCIsImNvbXBsZXRpb24iOiIwIiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjo0MDk2LCJtYXhfY29tcGxldGlvbl90b2tlbnMiOjIwNDgsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJhbnRocm9waWMvY2xhdWRlLTIuMDpiZXRhIiwibmFtZSI6IkFudGhyb3BpYzogQ2xhdWRlIHYyLjAgKHNlbGYtbW9kZXJhdGVkKSIsImNyZWF0ZWQiOjE2OTA1MDI0MDAsImRlc2NyaXB0aW9uIjoiQW50aHJvcGljJ3MgZmxhZ3NoaXAgbW9kZWwuIFN1cGVyaW9yIHBlcmZvcm1hbmNlIG9uIHRhc2tzIHRoYXQgcmVxdWlyZSBjb21wbGV4IHJlYXNvbmluZy4gU3VwcG9ydHMgaHVuZHJlZHMgb2YgcGFnZXMgb2YgdGV4dC4iLCJjb250ZXh0X2xlbmd0aCI6MTAwMDAwLCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiQ2xhdWRlIiwiaW5zdHJ1Y3RfdHlwZSI6bnVsbH0sInByaWNpbmciOnsicHJvbXB0IjoiMC4wMDAwMDgiLCJjb21wbGV0aW9uIjoiMC4wMDAwMjQiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjEwMDAwMCwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjo0MDk2LCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoiYW50aHJvcGljL2NsYXVkZS0yLjAiLCJuYW1lIjoiQW50aHJvcGljOiBDbGF1ZGUgdjIuMCIsImNyZWF0ZWQiOjE2OTA1MDI0MDAsImRlc2NyaXB0aW9uIjoiQW50aHJvcGljJ3MgZmxhZ3NoaXAgbW9kZWwuIFN1cGVyaW9yIHBlcmZvcm1hbmNlIG9uIHRhc2tzIHRoYXQgcmVxdWlyZSBjb21wbGV4IHJlYXNvbmluZy4gU3VwcG9ydHMgaHVuZHJlZHMgb2YgcGFnZXMgb2YgdGV4dC4iLCJjb250ZXh0X2xlbmd0aCI6MTAwMDAwLCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiQ2xhdWRlIiwiaW5zdHJ1Y3RfdHlwZSI6bnVsbH0sInByaWNpbmciOnsicHJvbXB0IjoiMC4wMDAwMDgiLCJjb21wbGV0aW9uIjoiMC4wMDAwMjQiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjEwMDAwMCwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjo0MDk2LCJpc19tb2RlcmF0ZWQiOnRydWV9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJ1bmRpOTUvcmVtbS1zbGVycC1sMi0xM2IiLCJuYW1lIjoiUmVNTSBTTEVSUCAxM0IiLCJjcmVhdGVkIjoxNjg5OTg0MDAwLCJkZXNjcmlwdGlvbiI6IkEgcmVjcmVhdGlvbiB0cmlhbCBvZiB0aGUgb3JpZ2luYWwgTXl0aG9NYXgtTDItQjEzIGJ1dCB3aXRoIHVwZGF0ZWQgbW9kZWxzLiAjbWVyZ2UiLCJjb250ZXh0X2xlbmd0aCI6NjE0NCwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dC0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6IkxsYW1hMiIsImluc3RydWN0X3R5cGUiOiJhbHBhY2EifSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMDU2MjUiLCJjb21wbGV0aW9uIjoiMC4wMDAwMDExMjUiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjYxNDQsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6MTAyNCwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6Imdvb2dsZS9wYWxtLTItY2hhdC1iaXNvbiIsIm5hbWUiOiJHb29nbGU6IFBhTE0gMiBDaGF0IiwiY3JlYXRlZCI6MTY4OTgxMTIwMCwiZGVzY3JpcHRpb24iOiJQYUxNIDIgaXMgYSBsYW5ndWFnZSBtb2RlbCBieSBHb29nbGUgd2l0aCBpbXByb3ZlZCBtdWx0aWxpbmd1YWwsIHJlYXNvbmluZyBhbmQgY29kaW5nIGNhcGFiaWxpdGllcy4iLCJjb250ZXh0X2xlbmd0aCI6OTIxNiwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dC0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6IlBhTE0iLCJpbnN0cnVjdF90eXBlIjpudWxsfSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMSIsImNvbXBsZXRpb24iOiIwLjAwMDAwMiIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6OTIxNiwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjoxMDI0LCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoiZ29vZ2xlL3BhbG0tMi1jb2RlY2hhdC1iaXNvbiIsIm5hbWUiOiJHb29nbGU6IFBhTE0gMiBDb2RlIENoYXQiLCJjcmVhdGVkIjoxNjg5ODExMjAwLCJkZXNjcmlwdGlvbiI6IlBhTE0gMiBmaW5lLXR1bmVkIGZvciBjaGF0Ym90IGNvbnZlcnNhdGlvbnMgdGhhdCBoZWxwIHdpdGggY29kZS1yZWxhdGVkIHF1ZXN0aW9ucy4iLCJjb250ZXh0X2xlbmd0aCI6NzE2OCwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dC0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6IlBhTE0iLCJpbnN0cnVjdF90eXBlIjpudWxsfSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMSIsImNvbXBsZXRpb24iOiIwLjAwMDAwMiIsInJlcXVlc3QiOiIwIiwiaW1hZ2UiOiIwIiwid2ViX3NlYXJjaCI6IjAiLCJpbnRlcm5hbF9yZWFzb25pbmciOiIwIn0sInRvcF9wcm92aWRlciI6eyJjb250ZXh0X2xlbmd0aCI6NzE2OCwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjoxMDI0LCJpc19tb2RlcmF0ZWQiOmZhbHNlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfSx7ImlkIjoiZ3J5cGhlL215dGhvbWF4LWwyLTEzYiIsIm5hbWUiOiJNeXRob01heCAxM0IiLCJjcmVhdGVkIjoxNjg4MjU2MDAwLCJkZXNjcmlwdGlvbiI6Ik9uZSBvZiB0aGUgaGlnaGVzdCBwZXJmb3JtaW5nIGFuZCBtb3N0IHBvcHVsYXIgZmluZS10dW5lcyBvZiBMbGFtYSAyIDEzQiwgd2l0aCByaWNoIGRlc2NyaXB0aW9ucyBhbmQgcm9sZXBsYXkuICNtZXJnZSIsImNvbnRleHRfbGVuZ3RoIjo0MDk2LCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiTGxhbWEyIiwiaW5zdHJ1Y3RfdHlwZSI6ImFscGFjYSJ9LCJwcmljaW5nIjp7InByb21wdCI6IjAuMDAwMDAwMDY1IiwiY29tcGxldGlvbiI6IjAuMDAwMDAwMDY1IiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjo0MDk2LCJtYXhfY29tcGxldGlvbl90b2tlbnMiOjQwOTYsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJtZXRhLWxsYW1hL2xsYW1hLTItMTNiLWNoYXQiLCJuYW1lIjoiTWV0YTogTGxhbWEgMiAxM0IgQ2hhdCIsImNyZWF0ZWQiOjE2ODcyMTkyMDAsImRlc2NyaXB0aW9uIjoiQSAxMyBiaWxsaW9uIHBhcmFtZXRlciBsYW5ndWFnZSBtb2RlbCBmcm9tIE1ldGEsIGZpbmUgdHVuZWQgZm9yIGNoYXQgY29tcGxldGlvbnMiLCJjb250ZXh0X2xlbmd0aCI6NDA5NiwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dC0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6IkxsYW1hMiIsImluc3RydWN0X3R5cGUiOiJsbGFtYTIifSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMDIyIiwiY29tcGxldGlvbiI6IjAuMDAwMDAwMjIiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjQwOTYsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6MjA0OCwiaXNfbW9kZXJhdGVkIjpmYWxzZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6Im1ldGEtbGxhbWEvbGxhbWEtMi03MGItY2hhdCIsIm5hbWUiOiJNZXRhOiBMbGFtYSAyIDcwQiBDaGF0IiwiY3JlYXRlZCI6MTY4NzIxOTIwMCwiZGVzY3JpcHRpb24iOiJUaGUgZmxhZ3NoaXAsIDcwIGJpbGxpb24gcGFyYW1ldGVyIGxhbmd1YWdlIG1vZGVsIGZyb20gTWV0YSwgZmluZSB0dW5lZCBmb3IgY2hhdCBjb21wbGV0aW9ucy4gTGxhbWEgMiBpcyBhbiBhdXRvLXJlZ3Jlc3NpdmUgbGFuZ3VhZ2UgbW9kZWwgdGhhdCB1c2VzIGFuIG9wdGltaXplZCB0cmFuc2Zvcm1lciBhcmNoaXRlY3R1cmUuIFRoZSB0dW5lZCB2ZXJzaW9ucyB1c2Ugc3VwZXJ2aXNlZCBmaW5lLXR1bmluZyAoU0ZUKSBhbmQgcmVpbmZvcmNlbWVudCBsZWFybmluZyB3aXRoIGh1bWFuIGZlZWRiYWNrIChSTEhGKSB0byBhbGlnbiB0byBodW1hbiBwcmVmZXJlbmNlcyBmb3IgaGVscGZ1bG5lc3MgYW5kIHNhZmV0eS4iLCJjb250ZXh0X2xlbmd0aCI6NDA5NiwiYXJjaGl0ZWN0dXJlIjp7Im1vZGFsaXR5IjoidGV4dC0+dGV4dCIsImlucHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJvdXRwdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sInRva2VuaXplciI6IkxsYW1hMiIsImluc3RydWN0X3R5cGUiOiJsbGFtYTIifSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMDkiLCJjb21wbGV0aW9uIjoiMC4wMDAwMDA5IiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjo0MDk2LCJtYXhfY29tcGxldGlvbl90b2tlbnMiOm51bGwsImlzX21vZGVyYXRlZCI6ZmFsc2V9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJvcGVuYWkvZ3B0LTMuNS10dXJibyIsIm5hbWUiOiJPcGVuQUk6IEdQVC0zLjUgVHVyYm8iLCJjcmVhdGVkIjoxNjg1MjMyMDAwLCJkZXNjcmlwdGlvbiI6IkdQVC0zLjUgVHVyYm8gaXMgT3BlbkFJJ3MgZmFzdGVzdCBtb2RlbC4gSXQgY2FuIHVuZGVyc3RhbmQgYW5kIGdlbmVyYXRlIG5hdHVyYWwgbGFuZ3VhZ2Ugb3IgY29kZSwgYW5kIGlzIG9wdGltaXplZCBmb3IgY2hhdCBhbmQgdHJhZGl0aW9uYWwgY29tcGxldGlvbiB0YXNrcy5cblxuVHJhaW5pbmcgZGF0YSB1cCB0byBTZXAgMjAyMS4iLCJjb250ZXh0X2xlbmd0aCI6MTYzODUsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJHUFQiLCJpbnN0cnVjdF90eXBlIjpudWxsfSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMDUiLCJjb21wbGV0aW9uIjoiMC4wMDAwMDE1IiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoxNjM4NSwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjo0MDk2LCJpc19tb2RlcmF0ZWQiOnRydWV9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJvcGVuYWkvZ3B0LTMuNS10dXJiby0wMTI1IiwibmFtZSI6Ik9wZW5BSTogR1BULTMuNSBUdXJibyAxNmsiLCJjcmVhdGVkIjoxNjg1MjMyMDAwLCJkZXNjcmlwdGlvbiI6IlRoZSBsYXRlc3QgR1BULTMuNSBUdXJibyBtb2RlbCB3aXRoIGltcHJvdmVkIGluc3RydWN0aW9uIGZvbGxvd2luZywgSlNPTiBtb2RlLCByZXByb2R1Y2libGUgb3V0cHV0cywgcGFyYWxsZWwgZnVuY3Rpb24gY2FsbGluZywgYW5kIG1vcmUuIFRyYWluaW5nIGRhdGE6IHVwIHRvIFNlcCAyMDIxLlxuXG5UaGlzIHZlcnNpb24gaGFzIGEgaGlnaGVyIGFjY3VyYWN5IGF0IHJlc3BvbmRpbmcgaW4gcmVxdWVzdGVkIGZvcm1hdHMgYW5kIGEgZml4IGZvciBhIGJ1ZyB3aGljaCBjYXVzZWQgYSB0ZXh0IGVuY29kaW5nIGlzc3VlIGZvciBub24tRW5nbGlzaCBsYW5ndWFnZSBmdW5jdGlvbiBjYWxscy4iLCJjb250ZXh0X2xlbmd0aCI6MTYzODUsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJHUFQiLCJpbnN0cnVjdF90eXBlIjpudWxsfSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAwMDUiLCJjb21wbGV0aW9uIjoiMC4wMDAwMDE1IiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjoxNjM4NSwibWF4X2NvbXBsZXRpb25fdG9rZW5zIjo0MDk2LCJpc19tb2RlcmF0ZWQiOnRydWV9LCJwZXJfcmVxdWVzdF9saW1pdHMiOm51bGx9LHsiaWQiOiJvcGVuYWkvZ3B0LTQiLCJuYW1lIjoiT3BlbkFJOiBHUFQtNCIsImNyZWF0ZWQiOjE2ODUyMzIwMDAsImRlc2NyaXB0aW9uIjoiT3BlbkFJJ3MgZmxhZ3NoaXAgbW9kZWwsIEdQVC00IGlzIGEgbGFyZ2Utc2NhbGUgbXVsdGltb2RhbCBsYW5ndWFnZSBtb2RlbCBjYXBhYmxlIG9mIHNvbHZpbmcgZGlmZmljdWx0IHByb2JsZW1zIHdpdGggZ3JlYXRlciBhY2N1cmFjeSB0aGFuIHByZXZpb3VzIG1vZGVscyBkdWUgdG8gaXRzIGJyb2FkZXIgZ2VuZXJhbCBrbm93bGVkZ2UgYW5kIGFkdmFuY2VkIHJlYXNvbmluZyBjYXBhYmlsaXRpZXMuIFRyYWluaW5nIGRhdGE6IHVwIHRvIFNlcCAyMDIxLiIsImNvbnRleHRfbGVuZ3RoIjo4MTkxLCJhcmNoaXRlY3R1cmUiOnsibW9kYWxpdHkiOiJ0ZXh0LT50ZXh0IiwiaW5wdXRfbW9kYWxpdGllcyI6WyJ0ZXh0Il0sIm91dHB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwidG9rZW5pemVyIjoiR1BUIiwiaW5zdHJ1Y3RfdHlwZSI6bnVsbH0sInByaWNpbmciOnsicHJvbXB0IjoiMC4wMDAwMyIsImNvbXBsZXRpb24iOiIwLjAwMDA2IiwicmVxdWVzdCI6IjAiLCJpbWFnZSI6IjAiLCJ3ZWJfc2VhcmNoIjoiMCIsImludGVybmFsX3JlYXNvbmluZyI6IjAifSwidG9wX3Byb3ZpZGVyIjp7ImNvbnRleHRfbGVuZ3RoIjo4MTkxLCJtYXhfY29tcGxldGlvbl90b2tlbnMiOjQwOTYsImlzX21vZGVyYXRlZCI6dHJ1ZX0sInBlcl9yZXF1ZXN0X2xpbWl0cyI6bnVsbH0seyJpZCI6Im9wZW5haS9ncHQtNC0wMzE0IiwibmFtZSI6Ik9wZW5BSTogR1BULTQgKG9sZGVyIHYwMzE0KSIsImNyZWF0ZWQiOjE2ODUyMzIwMDAsImRlc2NyaXB0aW9uIjoiR1BULTQtMDMxNCBpcyB0aGUgZmlyc3QgdmVyc2lvbiBvZiBHUFQtNCByZWxlYXNlZCwgd2l0aCBhIGNvbnRleHQgbGVuZ3RoIG9mIDgsMTkyIHRva2VucywgYW5kIHdhcyBzdXBwb3J0ZWQgdW50aWwgSnVuZSAxNC4gVHJhaW5pbmcgZGF0YTogdXAgdG8gU2VwIDIwMjEuIiwiY29udGV4dF9sZW5ndGgiOjgxOTEsImFyY2hpdGVjdHVyZSI6eyJtb2RhbGl0eSI6InRleHQtPnRleHQiLCJpbnB1dF9tb2RhbGl0aWVzIjpbInRleHQiXSwib3V0cHV0X21vZGFsaXRpZXMiOlsidGV4dCJdLCJ0b2tlbml6ZXIiOiJHUFQiLCJpbnN0cnVjdF90eXBlIjpudWxsfSwicHJpY2luZyI6eyJwcm9tcHQiOiIwLjAwMDAzIiwiY29tcGxldGlvbiI6IjAuMDAwMDYiLCJyZXF1ZXN0IjoiMCIsImltYWdlIjoiMCIsIndlYl9zZWFyY2giOiIwIiwiaW50ZXJuYWxfcmVhc29uaW5nIjoiMCJ9LCJ0b3BfcHJvdmlkZXIiOnsiY29udGV4dF9sZW5ndGgiOjgxOTEsIm1heF9jb21wbGV0aW9uX3Rva2VucyI6NDA5NiwiaXNfbW9kZXJhdGVkIjp0cnVlfSwicGVyX3JlcXVlc3RfbGltaXRzIjpudWxsfV19
  recorded_at: Wed, 23 Apr 2025 11:31:55 GMT
- request:
    method: get
    uri: "<OLLAMA_API_BASE>/models"
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v2.13.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json
      Date:
      - Wed, 23 Apr 2025 11:31:56 GMT
      Content-Length:
      - '282'
    body:
      encoding: UTF-8
      string: '{"object":"list","data":[{"id":"mistral-small3.1:latest","object":"model","created":1745402354,"owned_by":"library"},{"id":"gemma3:12b","object":"model","created":1744895453,"owned_by":"library"},{"id":"deepseek-r1:32b","object":"model","created":1737718036,"owned_by":"library"}]}

        '
  recorded_at: Wed, 23 Apr 2025 11:31:56 GMT
recorded_with: VCR 6.3.1
