---
description:
globs:
  - "*.rb"
alwaysApply: false
---

# Ruby Style Guide and Conventions

This document outlines the key Ruby style and architectural patterns observed in the project. Adhering to these conventions ensures consistency.

**Overall Style:**

- Follows **Standard Ruby** style guidelines.
- Likely enforced by **RuboCop**; respect existing `# rubocop:disable` directives but avoid adding new ones without justification.
- Prioritize clean, readable, and consistently formatted code.

**Specific Conventions:**

1.  **File Structure:**

    - Start files with `# frozen_string_literal: true`.
    - Use nested `module` definitions for namespacing (e.g., `module MyModule module NestedModule`). Do _not_ use `Module::Class` style for definitions.

2.  **Module Design:**

    - For utility modules containing stateless functions, use `module_function` at the start to export methods as module methods.

3.  **Naming:**

    - **Modules/Classes:** `PascalCase`
    - **Methods/Variables:** `snake_case`
    - **Predicate Methods:** End with `?` (e.g., `active?`)
    - **Constants:** `SCREAMING_SNAKE_CASE`
    - **Unused Parameters:** Prefix with `_` (e.g., `_unused_param`).

4.  **Methods:**

    - Use parentheses for definitions with parameters: `def my_method(param1, param2)`.
    - Parentheses are optional for calls with no arguments or where unambiguous.
    - Employ guard clauses (`return value if condition`) for early exits.
    - Rely on implicit returns.

5.  **Documentation:**

    - Use **YARD** format for documenting methods (`@param`, `@return`).

6.  **Control Flow:**

    - Prefer `case/when` for multiple conditions on a single value, often using regex (`/pattern/`).
    - Use `if/unless` for simpler conditions.

7.  **Data Structures:**

    - Use symbols (`:key`) for Hash keys.
    - Use `Hash#dig` for safe access to nested hash values.
    - Use `||` for default values.
    - Use trailing commas in multi-line Hashes and Arrays.

8.  **Strings & Regex:**

    - Prefer single quotes (`'`) for strings without interpolation.
    - Use literal regex syntax (`/.../`) and prefer `match?` for boolean checks.

9.  **Formatting:**
    - 2-space indentation.
    - Whitespace around operators and after commas.
    - Break and indent chained method calls for readability.

**Architecture:**

- Organize code into clearly namespaced modules and classes.
- Create utility modules for shared, stateless logic (using `module_function`).
- Centralize configuration (e.g., in constants like `PRICES` in the example).
