---
description: Add a new provider to the `ruby_llm` gem.
globs:
alwaysApply: false
---

# Add New Provider Guide

**Description:** This document outlines the standard procedure to follow whenever adding a new provider (e.g., "NewAPI") to the `ruby_llm` gem. It uses the structure of existing providers like OpenAI as a template.

## Step-by-Step Instructions

1.  **Create Directory Structure:**

    - Provider code: `lib/ruby_llm/providers/new_api/`
    - Tests: `spec/ruby_llm/providers/new_api/`
    - VCR cassettes: `spec/fixtures/vcr_cassettes/new_api/`

2.  **Implement Provider Client (`RubyLLM::Providers::NewAPI::Client`):**

    - Create `[lib/ruby_llm/providers/new_api/client.rb](mdc:lib/ruby_llm/providers/new_api/client.rb)`.
    - Handle initialization (API keys via ENV or `RubyLLM.configuration`, Faraday connection setup).
    - Implement core methods (`chat`, `embeddings`, etc.) matching the standard interface.
    - Translate generic arguments to the provider-specific API format.
    - Make HTTP requests using Faraday.
    - Handle HTTP and API-specific errors.
    - Instantiate and return a `RubyLLM::Providers::NewAPI::Response`.
    - Add YARD documentation.

3.  **Implement Provider Response (`RubyLLM::Providers::NewAPI::Response`):**

    - Create `[lib/ruby_llm/providers/new_api/response.rb](mdc:lib/ruby_llm/providers/new_api/response.rb)`.
    - Inherit from `[RubyLLM::Response](mdc:lib/ruby_llm/response.rb)`.
    - Override accessor methods (`model`, `content`, `tool_calls`, `finish_reason`, token counts, etc.) to extract data from the provider's specific response structure.
    - Add YARD documentation.

4.  **Register the Provider:**

    - Edit `[lib/ruby_llm/client.rb](mdc:lib/ruby_llm/client.rb)`.
    - Modify the provider selection logic (e.g., `case` statement in `initialize`) to instantiate `RubyLLM::Providers::NewAPI::Client` when `provider: :new_api` is specified.

5.  **Update Model Information:**

    - **Models (`[data/models.json](mdc:data/models.json)`):** Preferably update the `rake models:update` task in the `[Rakefile](mdc:Rakefile)` to fetch models from the new provider's API. Avoid manual edits if possible.
    - **Aliases (`[data/aliases.json](mdc:data/aliases.json)`):** Add any necessary model aliases.

6.  **Add Tests:**

    - Create spec files in `spec/ruby_llm/providers/new_api/` (e.g., `client_spec.rb`, `response_spec.rb`).
    - Test client initialization, successful API calls, response parsing, parameter handling, and error handling.
    - Configure VCR in `[spec/spec_helper.rb](mdc:spec/spec_helper.rb)` to handle the new API domain and filter sensitive data (API keys).

7.  **Record VCR Cassettes:**

    - Set the provider-specific API key environment variable (e.g., `NEW_API_KEY`).
    - Consider adding a Rake task in the `[Rakefile](mdc:Rakefile)` (e.g., `vcr:record_new_api`) to facilitate recording.
    - Run the recording task.
    - Run tests to ensure they use the cassettes.
    - **Crucially:** Inspect the generated `.yml` cassettes in `spec/fixtures/vcr_cassettes/new_api/` for correctness and ensure no sensitive data remains.

8.  **Documentation:**

    - Add YARD comments to new code.
    - Update `[README.md](mdc:README.md)` to include the new provider and API key instructions.
    - Update guides in `docs/guides/` if necessary.

9.  **Style and Committing:**
    - Run `bundle exec rubocop -A` to enforce style defined in `[.rubocop.yml](mdc:.rubocop.yml)`. Overcommit hooks (`[.overcommit.yml](mdc:.overcommit.yml)`) should also run checks.
    - Use conventional commit messages (e.g., `feat: add support for NewAPI provider`).
